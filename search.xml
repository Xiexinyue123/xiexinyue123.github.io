<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue学习笔记01</title>
      <link href="article/c8202765.html"/>
      <url>article/c8202765.html</url>
      
        <content type="html"><![CDATA[<h1 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h1><ul><li>中文官网：<a href="https://cn.vuejs.org/">Vue.js (vuejs.org)</a></li></ul><h1 id="初识Vue"><a href="#初识Vue" class="headerlink" title="初识Vue"></a>初识Vue</h1><ul><li>想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象</li><li>root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法</li><li>root容器里的代码被称为【Vue模板】</li><li>Vue实例和容器是一一对应的</li><li>真实开发中只有一个Vue实例，并且会配合着组件一起使用</li><li><code>&#123;&#123;xxx&#125;&#125;</code>中的<code>xxx</code>要写JS表达式，且<code>xxx</code>可以自动读取到data中的所有属性</li><li>一旦data中的数据发生改变，那么模板中用到该数据的地方也会自动更新</li></ul><h2 id="区分：JS表达式和JS代码（语句）"><a href="#区分：JS表达式和JS代码（语句）" class="headerlink" title="区分：JS表达式和JS代码（语句）"></a>区分：JS表达式和JS代码（语句）</h2><ul><li>表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方：<ol><li>a</li><li>a+b</li><li>demo(1)</li><li>x === y ? ‘a’ : ‘b’</li></ol></li><li>JS代码（语句）：<ol><li>if(){}</li><li>for(){}</li></ol></li></ul><h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><h2 id="插值语法"><a href="#插值语法" class="headerlink" title="插值语法"></a>插值语法</h2><ul><li>功能：用于解析标签体内容</li><li>写法：，xxx是JS表达式，且可以直接读取到data中的所有属性</li></ul><h2 id="指令语法"><a href="#指令语法" class="headerlink" title="指令语法"></a>指令语法</h2><ul><li>功能：用于解析标签（包括：标签属性，标签体内容，绑定事件……）</li><li>举例：<code>v-bind:href=&quot;xxx&quot;</code>或简写为<code>:href=&quot;xxx&quot;</code>，xxx同样要写JS表达式，且可以直接读取到data中的所有属性</li><li>备注：Vue中有很多的指令，且形式都是：v-???，此处只是拿v-bind举个例子</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 准备好一个容器 --&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;插值语法&lt;/h1&gt;</span><br><span class="line">&lt;h3&gt;你好，&#123;&#123;name&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">    &lt;h1&gt;指令语法&lt;/h1&gt;</span><br><span class="line">&lt;a :href=<span class="string">&quot;url&quot;</span>&gt;点我去尚硅谷学习&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//阻止vue在启动时生成生产提示</span></span><br><span class="line">    Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//创建Vue实例</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">&#x27;#root&#x27;</span>, <span class="comment">//el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串</span></span><br><span class="line">    data:&#123;  <span class="comment">//data中用于存储数据，数据供el所指定的容器去使用，值暂时先写成对象，以后会写成函数</span></span><br><span class="line">        name:<span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">        url:<span class="string">&#x27;http://www.atguigu.com&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210925202122204.png" alt="image-20210925202122204"></p><h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><ul><li>Vue中有两种绑定方式</li></ul><ol><li>单向绑定(<code>v-bind</code>)：数据只能从data流向页面</li><li>双向绑定(<code>v-model</code>)：数据不仅能从data流向页面，还可以从页面流向data</li></ol><ul><li>备注：<ul><li>双向绑定一般都应用于表单类元素上（如：input，select等…）</li><li><code>v-model:value</code>可以简写为<code>v-model</code>，因为<code>v-model</code>默认收集的就是value值</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 普通写法 --&gt;</span><br><span class="line">    单向数据绑定：&lt;input type=<span class="string">&quot;text&quot;</span> v-bind:value=<span class="string">&quot;name&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">        双向数据绑定：&lt;input type=<span class="string">&quot;text&quot;</span> v-model:value=<span class="string">&quot;name&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">            &lt;!-- 简写 --&gt;</span><br><span class="line">            双向数据绑定：&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;name&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">                &lt;!-- 如下代码是错误的，因为v-model只能应用在表单类元素（输入类元素）上 --&gt;</span><br><span class="line">                &lt;h2 v-model:x=<span class="string">&quot;name&quot;</span>&gt;你好啊&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="el与data的两种写法"><a href="#el与data的两种写法" class="headerlink" title="el与data的两种写法"></a>el与data的两种写法</h1><h2 id="el有两种写法"><a href="#el有两种写法" class="headerlink" title="el有两种写法"></a>el有两种写法</h2><ol><li>new Vue是配置el属性</li><li>先创建Vue实例，然后再通过<code>vm.$mount(&#39;#root&#39;)</code>指定el的值</li></ol><h2 id="data有两种写法"><a href="#data有两种写法" class="headerlink" title="data有两种写法"></a>data有两种写法</h2><ul><li>对象式</li><li>函数式</li><li>如何选择：目前两种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错</li></ul><h2 id="一个重要原则"><a href="#一个重要原则" class="headerlink" title="一个重要原则"></a>一个重要原则</h2><ul><li>由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//阻止vue在启动时生成生产提示</span></span><br><span class="line">    Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//创建Vue实例</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">&#x27;#root&#x27;</span>, <span class="comment">//第一种写法</span></span><br><span class="line">    data:&#123;  <span class="comment">//第一种写法：对象式</span></span><br><span class="line">        name:<span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">        url:<span class="string">&#x27;http://www.atguigu.com&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//第二种写法：函数式</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);  <span class="comment">//此处的this是Vue实例对象</span></span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            name:<span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">v.$mount(<span class="string">&#x27;#root&#x27;</span>);  <span class="comment">//第二种写法</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h1><ul><li>M：模型(Model)：对应data中的数据</li><li>V：视图(View)：模板</li><li>VM：视图模型(ViewModel)：Vue实例对象</li></ul><p><img src="https://blog.ply.cool/image/image-20210927144900686.png" alt="image-20210927144900686"></p><ul><li>观察发现<ul><li>data中所有的属性，最后都出现在了VM身上</li><li>VM身上所有的属性 及 Vue原型上所有的属性，在Vue模板中都可以直接使用</li></ul></li></ul><h1 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h1><h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    sex:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">// value:18,</span></span><br><span class="line">    <span class="comment">// enumerable:true, //控制属性是否可以枚举，默认值是false</span></span><br><span class="line">    <span class="comment">// writable:true,  //控制属性是否可以被修改，默认值是false</span></span><br><span class="line">    <span class="comment">// configurable:true,   //控制属性是否可以被删除，默认值是false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span></span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;有人读取age属性了&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当有人读取person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span></span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;有人修改了age值，且值是&quot;</span>,value);</span><br><span class="line">        number = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210927200413693.png" alt="image-20210927200413693"></p><h2 id="何为数据代理"><a href="#何为数据代理" class="headerlink" title="何为数据代理"></a>何为数据代理</h2><ul><li>数据代理就是通过一个对象代理对另一个对象中属性的操作（读/写）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>:<span class="number">100</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">y</span>:<span class="number">200</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj2,<span class="string">&#x27;x&#x27;</span>,&#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.x;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当有人读取person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span></span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        obj.x = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210927201610468.png" alt="image-20210927201610468"></p><h2 id="Vue中的数据代理"><a href="#Vue中的数据代理" class="headerlink" title="Vue中的数据代理"></a>Vue中的数据代理</h2><ul><li>通过VM对象来代理data对象中属性的操作（读/写）</li><li>Vue中的数据代理的好处：<ul><li>更加方便的操作data中的数据</li></ul></li><li>基本原理：<ul><li>通过<code>Object.defineProperty()</code>把data对象中所有属性都添加到vm上</li><li>为每一个添加到vm上的属性，都指定一个getter/setter</li><li>在getter/setter内部去操作（读/写）data中对应的属性</li></ul></li></ul><p><img src="https://blog.ply.cool/image/image-20210927203834442.png" alt="image-20210927203834442"></p><h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><h2 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h2><ul><li>使用v-on：xxx 或 @xxx（常用这个） 绑定事件，其中xxx是事件名</li><li>事件的回调需要配置在methods对象中，最终会在vm上</li><li>methods中配置的函数，不要用箭头函数！否则this就不是vm了</li><li>methods中配置的函数，都是被Vue所管理的函数，this的指向是vm或组件实例对象</li><li><code>@click=&quot;demo&quot;</code>和<code>@click=&quot;demo($event)&quot;</code>效果一样，但后者可以传参</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;欢迎来到&#123;&#123;name&#125;&#125;学习&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;showInfo&quot;</span>&gt;点我提示信息<span class="number">1</span>（不传参）&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;showInfo2($event,66)&quot;</span>&gt;点我提示信息<span class="number">2</span>（传参）&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//阻止vue在启动时生成生产提示</span></span><br><span class="line">    Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//创建Vue实例</span></span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            name:<span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">showInfo</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">                <span class="comment">// console.log(this);  //此处的this是vm</span></span><br><span class="line">                alert(<span class="string">&#x27;同学你好！&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="title">showInfo2</span>(<span class="params">event,number</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(number);</span><br><span class="line">                <span class="built_in">console</span>.log(event);</span><br><span class="line">                alert(<span class="string">&#x27;同学你好！！&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210927211401535.png" alt="image-20210927211401535"></p><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><ul><li>prevent：阻止默认事件（常用）</li><li>stop：阻止事件冒泡（常用）</li><li>once：事件只触发一次（常用）</li><li>capture：使用事件的捕获模式</li><li>self：只有event.target是当前操作的元素时才触发事件</li><li>passive：事件的默认行为立即执行，无需等待事件回调执行完毕</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;http://www.atguigu.com&quot;</span> @click.prevent=<span class="string">&quot;showInfo&quot;</span>&gt;点我提示信息&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>上述案例浏览器在响应点击事件后，并不会作页面跳转。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js学习笔记</title>
      <link href="article/1aafa723.html"/>
      <url>article/1aafa723.html</url>
      
        <content type="html"><![CDATA[<h1 id="命令行窗口"><a href="#命令行窗口" class="headerlink" title="命令行窗口"></a>命令行窗口</h1><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><ul><li><code>dir</code> 列出当前目录下的所有文件</li><li><code>cd 目录名</code>进入到指定的目录</li><li><code>md</code>创建文件夹</li><li><code>rd</code>删除文件夹</li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><code>.</code>表示当前目录</li><li><code>..</code>表示上一级目录</li></ul><h2 id="环境变量（windows系统中的变量）"><a href="#环境变量（windows系统中的变量）" class="headerlink" title="环境变量（windows系统中的变量）"></a>环境变量（windows系统中的变量）</h2><ul><li><p>当我们在命令行窗口打开一个文件，或调用一个程序时</p><p>系统会首先在当前目录下寻找文件程序，如果找到了则直接打开</p><p>如果没有找到则会依次到环境变量path的路径中寻找，直到找到为止</p><p>如果没有则报错</p></li></ul><h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><ul><li>一个能够在服务器端运行JavaScript代码的运行环境。</li></ul><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><ul><li><p>在node中，一个js文件就是一个模块</p></li><li><p>在node中，通过require()函数来引入外部模块</p><ul><li>require()可以传递一个文件的路径作为参数，node将会自动根据该路径来引入外部模块</li><li>这里路径，如果使用相对路径，必须以.或..开头</li><li>使用require()引入模块后，该函数会返回一个对象，这个对象代表的是引入的模块</li></ul></li><li><p>每一个js文件中的js代码都是独立运行在一个函数中</p><p>而不是全局作用域，所以一个模块中的变量和函数在其它模块中无法访问</p></li></ul><h2 id="导出变量和函数"><a href="#导出变量和函数" class="headerlink" title="导出变量和函数"></a>导出变量和函数</h2><ul><li><p>使用exports</p><ul><li><code>exports.属性 = 属性值;</code></li><li><code>exports.方法 = 函数;</code></li></ul></li><li><p>使用module.exports</p><ul><li><code>module.exports.属性 = 属性值;</code></li><li><code>module.exports.方法 = 函数;</code></li><li><code>module.exports = &#123;&#125;;</code></li></ul></li><li><p>可以通过exports来向外部暴露变量和方法</p><ul><li>只需要将需要暴露给外部的变量或方法设置为exports的属性即可</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;hello,我是test.js&quot;);</span><br><span class="line">exports.x &#x3D; &quot;我是test.js中的x&quot;;</span><br><span class="line">exports.y &#x3D; &quot;我是y&quot;;</span><br><span class="line">exports.fn &#x3D; function()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const test &#x3D; require(&#39;.&#x2F;test&#39;);</span><br><span class="line">console.log(test);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210611164918970.png" alt="image-20210611164918970"></p></li><li><p>模块分为两大类：</p><ul><li>核心模块<ul><li>由node引擎提供的模块</li><li>核心模块的标识就是模块的名字</li></ul></li><li>文件模块<ul><li>由用户自己创建的模块</li><li>文件模块的标识就是文件的路径</li></ul></li></ul></li><li><p>在node中有一个全局对象global，它的作用和网页中window类似</p><ul><li>在全局中创建的变量都会作为global的属性保存</li><li>在全局中创建的函数都会作为global的方法保存</li></ul></li><li><p>实际上模块中的代码都是封装在一个函数中执行的，并且在函数执行时，同时传进了5个实参</p><ul><li>exports<ul><li>该对象用来将变量或函数暴露到外部</li></ul></li><li>require<ul><li>函数，用来引入外部的模块</li></ul></li><li>module<ul><li>代表当前模块本身</li><li>exports就是module的属性</li><li>既可以使用exports导出，也可以使用module.exports导出</li></ul></li><li>_filename<ul><li>当前模块的完整路径</li></ul></li><li>_dirname<ul><li>当前模块所在文件夹的路径</li></ul></li></ul></li></ul><h1 id="模块的标识"><a href="#模块的标识" class="headerlink" title="模块的标识"></a>模块的标识</h1><ul><li><p>对于核心模块（npm中下载的模块），直接使用模块的名字进行引入</p><p><code>const math = require(&#39;math&#39;);</code></p></li><li><p>对于自定义的文件模块，需要通过文件的路径来对模块进行引入</p><ul><li><p>路径可以是绝对路径，也可以是相对路径，必须以<code>./</code>或<code>../</code>开头</p><p><code>const test = require(&#39;./test&#39;);</code></p></li></ul></li></ul><h1 id="包（package）"><a href="#包（package）" class="headerlink" title="包（package）"></a>包（package）</h1><ul><li>包实际上就是一个压缩文件，解压后还原为目录<ul><li>package.json    描述文件</li><li>bin    可执行的二进制文件</li><li>lib    js代码</li><li>doc    文档</li><li>test     单元测试</li></ul></li></ul><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><ul><li>node包管理器</li><li>通过npm下载的包都在node_modules文件夹中</li></ul><p><img src="https://blog.ply.cool/image/image-20210611185309458.png" alt="image-20210611185309458"></p><h2 id="npm的命令"><a href="#npm的命令" class="headerlink" title="npm的命令"></a>npm的命令</h2><ul><li><code>npm -v</code> 查看npm的版本</li><li><code>npm version</code> 查看所有模块的版本</li><li><code>npm search 包名</code>搜索包</li><li><code>npm install / i 包名</code>安装包</li><li><code>npm remove / r 包名</code>删除包</li><li><code>npm install 包名 --save</code>安装包并添加到依赖中（用得最多）</li><li><code>npm install</code>下载当前项目所依赖的包</li><li><code>npm install 包名 -g</code>全局安装包（全局安装的包一般都是一些工具）</li></ul><h2 id="指定文件作为包"><a href="#指定文件作为包" class="headerlink" title="指定文件作为包"></a>指定文件作为包</h2><ul><li><p>要先在这个文件夹中<code>npm init</code>初始化这个文件夹，使它有<code>package.json</code>，直接跳过初始化操作可以<code>npm init -y</code> </p><p>这样才可以将包引入到指定文件中</p></li></ul><h2 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h2><ul><li>淘宝镜像npm，解决npm服务器在国外造成的一系列问题，但是（只读）只能下载</li></ul><h1 id="Buffer（缓冲区）"><a href="#Buffer（缓冲区）" class="headerlink" title="Buffer（缓冲区）"></a>Buffer（缓冲区）</h1><ul><li><p>结构和数组很像，操作的方法也和数组类似</p></li><li><p>数组中不能存储二进制文件，而buffer就是专门用来存储二进制的数据</p></li><li><p>使用buffer不需要引入模块，直接使用即可</p></li><li><p>在buffer中存储的数据都是二进制数据，但是在显示时都是以十六进制的形式展示</p></li><li><p>buffer中每一个元素的范围都是从00 - ff（ 十进制：0-255）（二进制：00000000 - 11111111）</p><p>计算机 一个0或1 我们称1位（bit）</p><p>8bit = 1byte（字节）</p><p>buffer中的每一个元素，占用内存一个字节</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello Atguigu&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> buf = Buffer.from(str);</span><br><span class="line"><span class="built_in">console</span>.log(buf);</span><br><span class="line"><span class="built_in">console</span>.log(buf.length);</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://blog.ply.cool/image/image-20210611191440701.png" alt="image-20210611191440701"></p></li><li><p><code>Buffer.from(str)</code>将一个字符串转换为buffer</p></li><li><p><code>Buffer.alloc(size)</code>创建一个指定大小的buffer</p></li><li><p><code>Buffer.allocUnsafe(size)</code>创建一个指定大小的buffer，可能包含敏感数据</p></li><li><p><code>buf.toString()</code>将缓冲区中的数据转换为字符串</p></li></ul><h2 id="创建指定大小的buffer"><a href="#创建指定大小的buffer" class="headerlink" title="创建指定大小的buffer"></a>创建指定大小的buffer</h2><ul><li><p>buffer构造函数都是不推荐使用的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf = Buffer.alloc(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf);</span><br><span class="line">buf[<span class="number">0</span>] = <span class="number">88</span>;</span><br><span class="line">buf[<span class="number">1</span>] = <span class="number">255</span>;</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">0xaa</span>;</span><br><span class="line"><span class="built_in">console</span>.log(buf);</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://blog.ply.cool/image/image-20210611192041110.png" alt="image-20210611192041110"></p></li><li><p>buffer大小一旦确定，不能改变</p></li><li><p>只要数字在控制台或页面中输出，一定是十进制</p></li></ul><h1 id="fs（文件系统）"><a href="#fs（文件系统）" class="headerlink" title="fs（文件系统）"></a>fs（文件系统）</h1><h2 id="文件系统（File-System）"><a href="#文件系统（File-System）" class="headerlink" title="文件系统（File System）"></a>文件系统（File System）</h2><ul><li>文件系统简单来说就是通过Node来操作系统中的文件</li><li>使用文件系统，需要先引入fs模块，fs是核心模块，直接引入不需要下载</li></ul><p><img src="https://blog.ply.cool/image/image-20210611194040434.png" alt="image-20210611194040434"></p><h2 id="同步文件的写入"><a href="#同步文件的写入" class="headerlink" title="同步文件的写入"></a>同步文件的写入</h2><ol><li><p>打开文件</p><p><code>fs.openSync(path, flags[, mode])</code></p><ul><li>path：要打开文件的路径</li><li>flags：打开文件要做的操作类型<ul><li>r：只读</li><li>w：可写</li></ul></li><li>mode：设置文件的操作权限，一般不传</li><li>返回值<ul><li>该方法会返回一个文件描述符作为结果，我们可以通过该描述符来对文件名进行各种操作</li></ul></li></ul></li><li><p>向文件中写入内容</p><p><code>fs.writeSync(fd, String[, position,[, encoding]])</code></p><ul><li>fd     文件的描述符，需要传入要写入的文件的描述符</li><li>string    要写入的内容</li><li>position   写入的起始位置</li><li>encoding     写入的编码，默认UTF-8</li></ul></li><li><p>保存并关闭文件</p><p><code>fs.closeSync(fd);</code></p><ul><li>fd     要关闭的文件的描述符</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line"><span class="keyword">var</span> fd = fs.openSync(<span class="string">&quot;hello.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="comment">//向文件中写入内容</span></span><br><span class="line">fs.writeSync(fd, <span class="string">&quot;今天天气真不错！&quot;</span>);</span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">fs.closeSync(fd);</span><br></pre></td></tr></table></figure><h2 id="异步文件写入"><a href="#异步文件写入" class="headerlink" title="异步文件写入"></a>异步文件写入</h2><ol><li><p>打开文件</p><p><code>fs.open(path, flags[, mode], callback)</code> </p><ul><li><p>path：要打开文件的路径</p></li><li><p>异步调用的方法，结果都是通过回调函数的参数返回的</p></li><li><p>回调函数两个参数：</p><ul><li>err    错误对象</li><li>fd   文件描述符</li></ul></li><li><p>flags：打开文件要做的操作类型</p><ul><li>r：只读</li><li>w：可写</li></ul></li><li><p>mode：设置文件的操作权限，一般不传</p></li></ul></li><li><p>向文件中写入内容</p><p><code>fs.write(fd, String[, position,[, encoding]], callback)</code></p><ul><li>用来异步写入一个文件</li></ul></li><li><p>关闭文件</p><p><code>fs.close(fd, callback)</code></p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">fs.open(<span class="string">&quot;hello.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,fd</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="comment">//如果没有出错，写入操作</span></span><br><span class="line">        fs.write(fd,<span class="string">&quot;这是异步写入的内容&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;写入成功~~&quot;</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">//关闭</span></span><br><span class="line">            fs.close(fd, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;文件已关闭~~&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;程序向下执行~~~&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="简单文件写入"><a href="#简单文件写入" class="headerlink" title="简单文件写入"></a>简单文件写入</h2><ul><li>异步：<code>fs.writeFile(file, data[, options], callback)</code></li><li>同步：<code>fs.writeFileSync(file, data[, options])</code></li><li>file 要操作的文件路径</li><li>data 要写入的数据</li><li>options 选项，可以对写入进行一些设置</li><li>callback 当写入完成以后执行的函数</li></ul><p><img src="https://blog.ply.cool/image/image-20210924220220138.png" alt="image-20210924220220138"></p><h2 id="流式文件写入"><a href="#流式文件写入" class="headerlink" title="流式文件写入"></a>流式文件写入</h2><ul><li>同步，异步，简单文件写入都不适合大文件的写入，性能较差，容易导致内存溢出</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个输入流</span></span><br><span class="line"><span class="keyword">var</span> ws = fs.createWriteStream(<span class="string">&quot;hello3.text&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过监听流的open和close事件来监听流的打开和关闭</span></span><br><span class="line">ws.once(<span class="string">&quot;open&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;流打开了~~~&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ws.once(<span class="string">&quot;close&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;流关闭了~~~&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ws.write(<span class="string">&quot;可写入文件的内容&quot;</span>);</span><br><span class="line">ws.write(<span class="string">&quot;可写入文件的内容&quot;</span>);</span><br><span class="line">ws.write(<span class="string">&quot;可写入文件的内容&quot;</span>);</span><br><span class="line">ws.write(<span class="string">&quot;可写入文件的内容&quot;</span>);</span><br><span class="line">ws.write(<span class="string">&quot;可写入文件的内容&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭流</span></span><br><span class="line">ws.end();</span><br></pre></td></tr></table></figure><ul><li>on(事件字符串，回调函数)<ul><li>可以为对象绑定一个事件</li></ul></li><li>once(事件字符串，回调函数)<ul><li>可以为对象绑定一个一次性的事件，该事件会在触发一次后自动失效</li></ul></li></ul><h2 id="同步文件读取"><a href="#同步文件读取" class="headerlink" title="同步文件读取"></a>同步文件读取</h2><h2 id="异步文件读取"><a href="#异步文件读取" class="headerlink" title="异步文件读取"></a>异步文件读取</h2><h2 id="简单文件读取"><a href="#简单文件读取" class="headerlink" title="简单文件读取"></a>简单文件读取</h2><ul><li><h4 id="fs-readFile-path-options-callback"><a href="#fs-readFile-path-options-callback" class="headerlink" title="fs.readFile(path[, options], callback)"></a><code>fs.readFile(path[, options], callback)</code></h4></li><li><h4 id="fs-readFileSync-path-options"><a href="#fs-readFileSync-path-options" class="headerlink" title="fs.readFileSync(path[, options])"></a><code>fs.readFileSync(path[, options])</code></h4></li></ul><h2 id="流式文件读取"><a href="#流式文件读取" class="headerlink" title="流式文件读取"></a>流式文件读取</h2><ul><li><code>pipe()</code>可以直接将可读流中的内容直接输入到可写流</li></ul><p><img src="https://blog.ply.cool/image/image-20210924224751703.png" alt="image-20210924224751703"></p><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><ul><li><p>验证路径是否存在</p><ul><li><code>fs.existsSync(path)</code></li></ul></li><li><p>获取文件信息</p><ul><li><code>fs.stat(path,callback)</code></li><li><code>fs.statSync(path)</code></li></ul></li><li><p>删除文件</p><ul><li><code>fs.unlink(path,callback)</code></li><li><code>fs.unlinkSync(path)</code></li></ul></li><li><p>列出文件</p><ul><li><code>fs.readdir(path[, option], callback)</code></li><li><code>fs.readdirSync(path[, option])</code></li></ul></li><li><p>截断文件</p><ul><li><code>fs.truncate(path, len, callback)</code></li><li><code>fs.truncateSync(path, len)</code></li></ul></li><li><p>建立目录</p><ul><li><code>fs.mkdir(path[, mode], callback)</code></li><li><code>fs.mkdirSync(path[, mode])</code></li></ul></li><li><p>删除目录 </p><ul><li><code>fs.rmdir(path, callback)</code></li><li><code>fs.rmdir(path)</code></li></ul></li><li><p>重命名文件和目录</p><ul><li><code>fs.rename(oldPath, newPath, callback)</code></li><li><code>fs.renameSync(oldPath, newPath)</code></li></ul></li><li><p>监视文件更改写入</p><ul><li><code>fs.watchFile(filename[, option], listener)</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Office全家桶激活</title>
      <link href="article/fbcc472c.html"/>
      <url>article/fbcc472c.html</url>
      
        <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h2><ul><li>OTP下载请点击这里：<span class="inline-tag red"><a href="https://blog.ply.cool/Office-Tool-with-runtime-v8.1.zip">OTP个人加速下载通道</a></span></li></ul><h1 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h1><h2 id="Office-Tool-Plus"><a href="#Office-Tool-Plus" class="headerlink" title="Office Tool Plus"></a>Office Tool Plus</h2><ul><li>简称OTP，OTP是一款万能的Office一站式辅助工具，当你想安装Office办公套件时，选择Office Tool Plus是完美的选择。Office Tool Plus体积非常小，却能卸载旧版本的残留痕迹、自定义选择安装组件、激活Office2019等各个版本。这样，你就不用去找Office各个版本的下载地址、不用担心无法激活Office等。</li></ul><h2 id="Key-Management-Service"><a href="#Key-Management-Service" class="headerlink" title="Key Management Service"></a>Key Management Service</h2><ul><li>简称KMS，KMS是微软官方认可的一种系统激活方式。这个激活方式主要用于企业计算机及微软产品的批量激活。.</li><li>密钥管理服务 (KMS) 允许在本地网络上激活产品。这样，单台计算机不必连接至 Microsoft 便可激活产品。需要将一台计算机配置为 KMS 主机。管理员必须为 KMS 主机输入 KMS 主机密钥。必须激活 KMS 主机密钥并连接至 Microsoft 托管的服务器一次，才能激活。</li></ul><h2 id="OTP和KMS对Office激活的帮助"><a href="#OTP和KMS对Office激活的帮助" class="headerlink" title="OTP和KMS对Office激活的帮助"></a>OTP和KMS对Office激活的帮助</h2><ul><li>打个比方，你有一片干旱的地（未激活的office），你现在需要在这块地上耕作，它必须湿润（激活）。现在水源（KMS主机）已经有了，你就需要将水源引入你的地里。你需要一根水管（OTP），水管里有水流（KMS），这样土地就具备了农作物生长的基本条件（office成功激活）。</li></ul><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><ul><li>OTP内置了一套完备的Office卸载程序，可以卸载有关Office的所有文件</li></ul><ol><li><p>软件主页 &gt; 工具箱 &gt; 修复工具 &gt; 移除Office</p><p><img src="https://blog.ply.cool/image/image-20210608184129153.png" alt="image-20210608184129153"></p><p><img src="https://blog.ply.cool/image/image-20210608184624006.png" alt="image-20210608184624006"></p></li><li><p>等待移除完毕后，有如下反馈：</p><p><img src="https://blog.ply.cool/image/image-20210608185154244.png" alt="image-20210608185154244"></p></li></ol><ul><li><p>附：卸载Office系列并不影响Office的激活状态</p><p>也就是说，如果你的Office本身就是激活状态，再次安装后仍然是激活状态</p></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>软件主页 &gt; 安装Office &gt; 下拉框点击<strong>其它安装选项</strong></p><blockquote><p>如果点击上面的4个版本，会默认下载32位版本，所以如果你是64位系统，请务必点击其他安装选项</p></blockquote><p><img src="https://blog.ply.cool/image/image-20210608190503044.png" alt="image-20210608190503044"></p></li><li><p>本机以2019家庭学生版为例</p><p><img src="https://blog.ply.cool/image/image-20210608190906191.png" alt="image-20210608190906191"></p><ul><li>其它选项默认即可</li></ul></li><li><p>若想要安装Office其它产品（比如Visio）</p><p><img src="https://blog.ply.cool/image/image-20210608192816724.png" alt="image-20210608192816724"></p></li><li><p>确认无误后，开始部署。等待软件上方进度条完成，跳转微软安装程序完成即安装成功</p></li></ol><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><ul><li><p>下载完成后，可以先在 主页 &gt; 激活中查看激活状态</p></li><li><p>等待操作完成后，在操作结果中查看Office是否处于激活状态</p><p><img src="https://blog.ply.cool/image/image-20210608193837141.png" alt="image-20210608193837141"></p></li><li><p>若显示未激活，则进行激活操作</p></li></ul><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol><li><p>安装对应许可证</p></li><li><p>在KMS管理中输入KMS主机地址，保存设置</p></li><li><p>点击右上方激活</p><p><img src="https://blog.ply.cool/image/image-20210608195047853.png" alt="image-20210608195047853"></p></li><li><p>重新查看激活信息</p><p><img src="https://blog.ply.cool/image/image-20210608195905914.png" alt="image-20210608195905914"></p><p>可以看到，我们所应用的激活已经生效，不过只有180天</p><p>但是，KMS主机地址是可以重复使用的，也就是说只要它提醒到期，我们就可以重新激活继续使用，这样，理论上我们的Office全家桶就可以无限期使用了</p></li></ol><h3 id="KMS主机地址哪里找？"><a href="#KMS主机地址哪里找？" class="headerlink" title="KMS主机地址哪里找？"></a>KMS主机地址哪里找？</h3><ul><li><p>在百度，知乎，CSDN中，你几乎都可以找到</p></li><li><p>这里提供一些KMS主机地址供大家使用</p><table><thead><tr><th align="center">kms.loli.best（自用）</th></tr></thead><tbody><tr><td align="center">kms.loli.beer</td></tr><tr><td align="center">kms.iaini.net</td></tr><tr><td align="center">kms.03k.org</td></tr><tr><td align="center">kms.cangshui.net</td></tr><tr><td align="center">kms.cary.tech</td></tr><tr><td align="center">kms.catqu.com</td></tr><tr><td align="center">kms.cgtsoft.com</td></tr><tr><td align="center">kms.ghpym.com</td></tr></tbody></table></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
          <category> Office </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery 核心函数与对象</title>
      <link href="article/95e80f98.html"/>
      <url>article/95e80f98.html</url>
      
        <content type="html"><![CDATA[<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li><p>选择器本身只是一个有特定语法规则的字符串，没有实质用处</p></li><li><p>它的基本语法规则使用的就是CSS的选择器语法，并对此进行扩展</p></li><li><p>只有调用<code>$()</code>，并将选择器作为参数传入才能起作用</p></li><li><p><code>$(selector)</code>作用：</p><p>根据选择器规则在整个文档中查找所有匹配的标签的数组，并封装成jQuery对象返回</p></li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li><p>基本选择器（最基本最常用的选择器）</p><ul><li>#id</li><li>element</li><li>.class</li><li>*</li><li>selector1,selector2,selectorN（并集选择器）</li><li>selector1selector2selectorN（交集选择器）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需求1：选择id为div1的元素</span></span><br><span class="line">$(<span class="string">&#x27;#div1&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);<span class="comment">//只修改一个样式可以直接传两个字符串，多个样式要传对象</span></span><br><span class="line"><span class="comment">//需求2：选择所有的div元素</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"><span class="comment">//需求3：选择所有class属性为box的元素</span></span><br><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"><span class="comment">//需求4：选择所有div和span元素</span></span><br><span class="line">$(<span class="string">&#x27;div,span&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"><span class="comment">//需求5：选择所有class属性为box的div元素</span></span><br><span class="line">$(<span class="string">&#x27;div.box&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"><span class="comment">//需求6：选择所有元素</span></span><br><span class="line">$(<span class="string">&#x27;*&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>层次选择器（查找子元素，后代元素，兄弟元素的选择器）</p><ul><li>ancestor descendant</li><li>parent &gt; child</li><li>prev + next</li><li>prev ~ siblings</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需求1：选择ul下的所有span</span></span><br><span class="line">$(<span class="string">&#x27;ul span&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>);</span><br><span class="line"><span class="comment">//需求2：选择ul下的所有子元素span</span></span><br><span class="line">$(<span class="string">&#x27;ul&gt;span&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>);</span><br><span class="line"><span class="comment">//需求3：选择class属性为box的下一个li</span></span><br><span class="line">$(<span class="string">&#x27;.box+li&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>);</span><br><span class="line"><span class="comment">//需求4：选择ul下class属性为box的后面所有兄弟元素</span></span><br><span class="line">$(<span class="string">&#x27;ul .box+li~*&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>过滤选择器（在原有选择器匹配的元素中进一步进行过滤的选择器）</p><ul><li>基本</li><li>内容</li><li>可见性</li><li>属性</li><li>子元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需求1：选择第一个div</span></span><br><span class="line">$(<span class="string">&#x27;div:first&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>);</span><br><span class="line"><span class="comment">//需求2：选择最后一个class为box的元素</span></span><br><span class="line">$(<span class="string">&#x27;.box:last&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>);</span><br><span class="line"><span class="comment">//需求3：选择class属性不为box的div</span></span><br><span class="line">$(<span class="string">&#x27;div:not(.box)&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>);  <span class="comment">//没有属性也可以</span></span><br><span class="line"><span class="comment">//需求4：选择第二个和第三个li元素</span></span><br><span class="line">$(<span class="string">&#x27;li:lt(3):gt(0)&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>); <span class="comment">//多个过滤选择器是依次执行的，不是同时</span></span><br><span class="line"><span class="comment">//需求5：选择内容为BBBBB的li</span></span><br><span class="line">$(<span class="string">&#x27;li:contains(&quot;BBBBB&quot;)&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>);</span><br><span class="line"><span class="comment">//选择隐藏的li</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&#x27;li:hidden&#x27;</span>).length, $(<span class="string">&#x27;li:hidden&#x27;</span>)[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//选择有title属性的li元素</span></span><br><span class="line">$(<span class="string">&#x27;li[title]&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>);</span><br><span class="line"><span class="comment">//选择所有属性title为hello的li元素</span></span><br><span class="line">$(<span class="string">&#x27;li[title=&quot;hello&quot;]&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>表单选择器</p><ul><li>表单</li><li>表单对象属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需求1：选择不可用的文本输入框</span></span><br><span class="line">$(<span class="string">&#x27;:text:disabled&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>);</span><br><span class="line"><span class="comment">//需求2：显示选择爱好的个数</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&#x27;:checkbox:checked&#x27;</span>).length);</span><br><span class="line"><span class="comment">//需求3：点击提交显示选择城市的名称</span></span><br><span class="line">$(<span class="string">&#x27;:submit&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> city = $(<span class="string">&#x27;select&gt;option:selected&#x27;</span>).html();</span><br><span class="line">    alert(city);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h1 id="工具方法"><a href="#工具方法" class="headerlink" title="$工具方法"></a>$工具方法</h1><h2 id="each-：遍历数组或对象中的数据"><a href="#each-：遍历数组或对象中的数据" class="headerlink" title="$.each()：遍历数组或对象中的数据"></a><code>$.each()</code>：遍历数组或对象中的数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">    setName: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">$.each(obj, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://blog.ply.cool/image/image-20210607164052694.png" alt="image-20210607164052694"></p><h2 id="trim-：去除字符串两边的空格"><a href="#trim-：去除字符串两边的空格" class="headerlink" title="$.trim()：去除字符串两边的空格"></a><code>$.trim()</code>：去除字符串两边的空格</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;   hello world   &#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;=====&quot;</span>+$.trim(str)+<span class="string">&quot;=====&quot;</span>);</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://blog.ply.cool/image/image-20210607173241987.png" alt="image-20210607173241987"></p><h2 id="type-obj-：得到数据类型"><a href="#type-obj-：得到数据类型" class="headerlink" title="$.type(obj)：得到数据类型"></a><code>$.type(obj)</code>：得到数据类型</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($.type($)); <span class="comment">//function</span></span><br></pre></td></tr></table></figure><h2 id="isArray-obj-：判断是否是数组"><a href="#isArray-obj-：判断是否是数组" class="headerlink" title="$.isArray(obj)：判断是否是数组"></a><code>$.isArray(obj)</code>：判断是否是数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($.isArray($(<span class="string">&#x27;body&#x27;</span>)))   <span class="comment">//false    应是jQuery对象，伪数组</span></span><br></pre></td></tr></table></figure><h2 id="isFunction-obj-：判断是否是函数"><a href="#isFunction-obj-：判断是否是函数" class="headerlink" title="$.isFunction(obj)：判断是否是函数"></a><code>$.isFunction(obj)</code>：判断是否是函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($.isFunction($));   <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="parseJSON-json-：解析json字符串转换为js对象-数组"><a href="#parseJSON-json-：解析json字符串转换为js对象-数组" class="headerlink" title="$.parseJSON(json)：解析json字符串转换为js对象/数组"></a><code>$.parseJSON(json)</code>：解析json字符串转换为js对象/数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;Tom&quot;,&quot;age&quot;:12&#125;&#x27;</span>;   <span class="comment">//json对象</span></span><br><span class="line"><span class="comment">//json对象 ===》JS对象</span></span><br><span class="line"><span class="built_in">console</span>.log($.parseJSON(json));</span><br><span class="line"><span class="comment">//json数组 ===》JS数组</span></span><br><span class="line"><span class="keyword">var</span> json2 = <span class="string">&#x27;[&#123;&quot;name&quot;:&quot;Tom&quot;,&quot;age&quot;:12&#125;,&#123;&quot;name&quot;:&quot;Jack&quot;,&quot;age&quot;:16&#125;]&#x27;</span>;    <span class="comment">//json数组</span></span><br><span class="line"><span class="built_in">console</span>.log($.parseJSON(json2));</span><br><span class="line"><span class="comment">//上述方法不常用</span></span><br><span class="line"><span class="comment">//常用如下：</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(jsonString);     <span class="comment">//json字符串===》JS对象或数组</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(jsonobj/jsArray);    <span class="comment">//js对象/数组===》json字符串</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://blog.ply.cool/image/image-20210607172832918.png" alt="image-20210607172832918"></p><h1 id="效果：多Tab点击切换"><a href="#效果：多Tab点击切换" class="headerlink" title="效果：多Tab点击切换"></a>效果：多Tab点击切换</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        *&#123;</span><br><span class="line">            margin: <span class="number">0</span>;</span><br><span class="line">            padding: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        #tab&gt;li&#123;</span><br><span class="line">            list-style-type: none;</span><br><span class="line">            float: left;</span><br><span class="line">            width: 80px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            line-height: 40px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            text-align: center;</span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">        #container&#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">            clear: both;</span><br><span class="line">            width: 240px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;多Tab点击切换功能&lt;/h2&gt;</span><br><span class="line">    &lt;ul id=<span class="string">&quot;tab&quot;</span>&gt;</span><br><span class="line">        &lt;li id=<span class="string">&quot;tab1&quot;</span> value=<span class="string">&quot;1&quot;</span> style=<span class="string">&quot;background-color: chartreuse;&quot;</span>&gt;<span class="number">10</span>元套餐&lt;/li&gt;</span><br><span class="line">        &lt;li id=<span class="string">&quot;tab2&quot;</span> value=<span class="string">&quot;2&quot;</span>&gt;<span class="number">30</span>元套餐&lt;/li&gt;</span><br><span class="line">        &lt;li id=<span class="string">&quot;tab3&quot;</span> value=<span class="string">&quot;3&quot;</span>&gt;<span class="number">50</span>元包月&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">        &lt;div id=<span class="string">&quot;content1&quot;</span> style=<span class="string">&quot;display: block;&quot;</span>&gt;</span><br><span class="line">            <span class="number">10</span>元套餐详情：&lt;br&gt;每月套餐内拨打<span class="number">100</span>分钟，超出部分<span class="number">2</span>毛每分钟</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div id=<span class="string">&quot;content2&quot;</span> style=<span class="string">&quot;display: none;&quot;</span>&gt;</span><br><span class="line">            <span class="number">30</span>元套餐详情：&lt;br&gt;每月套餐内拨打<span class="number">300</span>分钟，超出部分<span class="number">1.5</span>毛每分钟</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div id=<span class="string">&quot;content3&quot;</span> style=<span class="string">&quot;display: none;&quot;</span>&gt;</span><br><span class="line">            <span class="number">10</span>元套餐详情：&lt;br&gt;每月套餐内拨打<span class="number">500</span>分钟，超出部分<span class="number">1</span>毛每分钟</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;jquery-3.6.0.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> $contents = $(<span class="string">&#x27;#container&gt;div&#x27;</span>);</span><br><span class="line">        <span class="comment">//给3个li加监听</span></span><br><span class="line">        $(<span class="string">&#x27;#tab&gt;li&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//隐式遍历</span></span><br><span class="line">            $(<span class="string">&#x27;#tab&gt;li&#x27;</span>).css(<span class="string">&#x27;background-color&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>);</span><br><span class="line">            $(<span class="built_in">this</span>).css(<span class="string">&#x27;background-color&#x27;</span>, <span class="string">&#x27;chartreuse&#x27;</span>);</span><br><span class="line">            <span class="comment">//隐藏所有内容div</span></span><br><span class="line">            $contents.css(<span class="string">&#x27;display&#x27;</span>, <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">            <span class="comment">//显示对应内容div</span></span><br><span class="line">                <span class="comment">//得到当前点击的li在兄弟中的下标</span></span><br><span class="line">            <span class="keyword">var</span> index = $(<span class="built_in">this</span>).index();</span><br><span class="line">            <span class="comment">//找到对应内容的div，并显示</span></span><br><span class="line">            $contents[index].style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">            <span class="comment">// $($contents[index]).css(&#x27;display&#x27;, &#x27;block&#x27;); //上面效率更高</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://blog.ply.cool/image/moretab.gif" alt="moretab"></p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><ul><li><p>读取第一个div的title属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&#x27;div:first&#x27;</span>).attr(<span class="string">&#x27;title&#x27;</span>));</span><br></pre></td></tr></table></figure></li><li><p>给所有div设置name属性（value为atguigu）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).attr(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;atguigu&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>移出所有div的title属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).removeAttr(<span class="string">&#x27;title&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>给所有的div设置<code>class=“guiguClass”</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).attr(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;guiguClass&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>给所有的div添加<code>class=“abc”</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).addClass(<span class="string">&#x27;abc&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>移除所有div的<code>guiguClass</code>的class</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).removeClass(<span class="string">&#x27;guiguClass&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>得到最后一个li的标签体文本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&#x27;li:last&#x27;</span>).html());</span><br></pre></td></tr></table></figure></li><li><p>设置第一个li的标签体文本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;li:first&#x27;</span>).html(<span class="string">&#x27;&lt;h1&gt;mmmmmmmm&lt;/h1&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>得到输入框的value值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;:text&#x27;</span>).val();</span><br></pre></td></tr></table></figure></li><li><p>设置输入框的值为atguigu</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;:text&#x27;</span>).val(atguigu);</span><br></pre></td></tr></table></figure></li><li><p>全选按钮实现全选功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $checkboxs = $(<span class="string">&#x27;:checkbox&#x27;</span>);</span><br><span class="line">$(<span class="string">&#x27;button:first&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $checkboxs.prop(<span class="string">&#x27;checked&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>全不选按钮实现全不选功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;button:last&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $checkboxs.prop(<span class="string">&#x27;checked&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>attr()：操作属性值为非布尔值的属性</p><p>prop()：专门操作属性值为布尔值的属性 </p></blockquote><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><ul><li><p>得到第一个p标签的颜色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&#x27;p:first&#x27;</span>).css(<span class="string">&#x27;color&#x27;</span>));</span><br></pre></td></tr></table></figure></li><li><p>设置所有p标签的文本颜色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;p&#x27;</span>).css(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>设置第二个p标签的字体颜色（#ff0011），背景（blue），宽（300px），高（30px）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;p:eq(1)&#x27;</span>).css(&#123;</span><br><span class="line">    color: <span class="string">&#x27;#ff0011&#x27;</span>,</span><br><span class="line">    background: <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">    width: <span class="number">300</span>,</span><br><span class="line">    height: <span class="number">30</span>  <span class="comment">//jQuery可不加px</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h2><blockquote><p>获取/设置标签的位置数据</p><p>​    offset()：相对于页面左上角的坐标</p><p>​    position()：相对于父元素左上角的坐标</p></blockquote><ul><li><p>点击id为btn1的元素</p><ul><li>打印div1相对于页面左上角的位置</li><li>打印div1相对于父元素左上角的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btn1&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//打印div1相对于页面左上角的位置</span></span><br><span class="line">    <span class="keyword">var</span> offset = $(<span class="string">&#x27;.div1&#x27;</span>).offset();</span><br><span class="line">    <span class="built_in">console</span>.log(offset.left, offset.top);</span><br><span class="line">    <span class="comment">//打印div1相对于父元素左上角的位置</span></span><br><span class="line">    <span class="keyword">var</span> position = $(<span class="string">&#x27;.div&#x27;</span>).position();</span><br><span class="line">    <span class="built_in">console</span>.log(position.left, position.top);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>点击btn2</p><ul><li>设置div2相对于页面的左上角的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btn2&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;.div2&#x27;</span>).offset(&#123;</span><br><span class="line">        left: <span class="number">50</span>,</span><br><span class="line">        top: <span class="number">100</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h2><blockquote><p>scrollTop()：读取/设置滚动条的Y坐标</p><p>$(document.body).scrollTop()+$(document.documentElement).scrollTop()</p><p>​    读取页面滚动条的Y坐标（兼容IE，Chrome）</p><p>$(‘body,html’).scrollTop(60);</p><p>​    滚动到指定位置（兼容IE，Chrome）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btn1&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//得到div滚动条坐标</span></span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&#x27;div&#x27;</span>).scrollTop());</span><br><span class="line">    <span class="comment">//得到页面滚动条的坐标</span></span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="built_in">document</span>.documentElement).scrollTop()+$(<span class="built_in">document</span>.body).scrollTop());</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//让div或页面的滚动条滚动到指定位置</span></span><br><span class="line">$(<span class="string">&#x27;#btn2&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;div&#x27;</span>).scrollTop(<span class="number">200</span>);</span><br><span class="line">    $(<span class="string">&#x27;html,body&#x27;</span>).scrollTop(<span class="number">300</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="效果：回到顶部"><a href="#效果：回到顶部" class="headerlink" title="效果：回到顶部"></a>效果：回到顶部</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#to_top&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $page = $(<span class="string">&#x27;html,body&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> distance = $(<span class="string">&#x27;html&#x27;</span>).scrollTop() + $(<span class="string">&#x27;body&#x27;</span>).scrollTop();</span><br><span class="line">    <span class="keyword">var</span> time = <span class="number">500</span>; <span class="comment">//花费总时间</span></span><br><span class="line">    <span class="keyword">var</span> intervalTime = <span class="number">10</span>;  <span class="comment">//每次调用时间</span></span><br><span class="line">    <span class="keyword">var</span> itemDistance = distance/(time/intervalTime);</span><br><span class="line">    <span class="keyword">var</span> intervalId = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        distance -= itemDistance;</span><br><span class="line">        <span class="keyword">if</span>(distance &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            distance = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">clearInterval</span>(intervalId);</span><br><span class="line">        &#125;</span><br><span class="line">        $page.scrollTop(distance);</span><br><span class="line">    &#125;, intervalTime)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h2><ul><li><p>内容尺寸</p><ul><li>height()：height</li><li>width()：width</li></ul></li><li><p>内部尺寸</p><ul><li>innerHeight()：height+padding</li><li>innerWidth()：width+padding</li></ul></li><li><p>外部尺寸</p><ul><li><p>outerHeight(false/true)：height+padding+border</p></li><li><p>outerWidth(false/true)：width+padding+border</p><p>如果是true，加上margin</p></li></ul></li></ul><h1 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h1><ul><li><p>ul下的li标签第一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $lis = $(<span class="string">&#x27;ul&gt;li&#x27;</span>);</span><br><span class="line">$lis.first().css(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>ul下li标签最后一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $lis = $(<span class="string">&#x27;ul&gt;li&#x27;</span>);</span><br><span class="line">$lis.last().css(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>ul下li标签的第二个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $lis = $(<span class="string">&#x27;ul&gt;li&#x27;</span>);</span><br><span class="line">$lis.eq(<span class="number">1</span>).css(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>ul下li标签中title属性为hello的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $lis = $(<span class="string">&#x27;ul&gt;li&#x27;</span>);</span><br><span class="line">$lis.filter(<span class="string">&#x27;[title=hello]&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>ul下li标签中title属性不为hello的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $lis = $(<span class="string">&#x27;ul&gt;li&#x27;</span>);</span><br><span class="line">$lis.not(<span class="string">&#x27;[title=hello]&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>ul下有span子标签的li标签</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $lis = $(<span class="string">&#x27;ul&gt;li&#x27;</span>);</span><br><span class="line">$lis.has(<span class="string">&#x27;span&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识jQuery</title>
      <link href="article/c1e02dc1.html"/>
      <url>article/c1e02dc1.html</url>
      
        <content type="html"><![CDATA[<h1 id="初识jQuery"><a href="#初识jQuery" class="headerlink" title="初识jQuery"></a>初识jQuery</h1><h2 id="什么是jQuery"><a href="#什么是jQuery" class="headerlink" title="什么是jQuery"></a>什么是jQuery</h2><ul><li><p>官网：<a href="https://jquery.com/">jQuery</a></p></li><li><p>一个优秀的JS函数库</p></li><li><p>Write Less,Do More!!!</p></li></ul><h2 id="为什么选择jQuery"><a href="#为什么选择jQuery" class="headerlink" title="为什么选择jQuery"></a>为什么选择jQuery</h2><ul><li>HTML元素选取（选择器）</li><li>HTML元素操作</li><li>CSS操作</li><li>HTML事件处理</li><li>JS动画效果</li><li><strong>链式调用</strong></li><li><strong>读写合一</strong></li><li>浏览器兼容</li><li>易扩展插件</li><li>ajax封装</li><li>……</li></ul><h2 id="怎样使用jQuery"><a href="#怎样使用jQuery" class="headerlink" title="怎样使用jQuery"></a>怎样使用jQuery</h2><ol><li><p>引入jQuery库</p></li><li><p>使用jQuery</p><ul><li>jQuery核心函数：<code>$</code>/<code>jQuery</code></li><li>jQuery核心对象：执行<code>$()</code>返回的对象</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用原生的DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> btn1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            btn1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>).value;</span></span><br><span class="line">                alert(username);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用jQuery实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//绑定文档加载完成的监听</span></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $btn2 = $(<span class="string">&#x27;#btn2&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            $btn2.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    <span class="comment">//给btn2绑定点击监听</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> username = $(<span class="string">&#x27;#username&#x27;</span>).val()</span></span><br><span class="line">                alert(username)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 点击“确定”按钮，提示输入的值 --&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>确定（原生版）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>确定（jQuery版）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><img src="https://blog.ply.cool/image/image-20210530121453679.png" alt="image-20210530121453679"  /></li></ol><h1 id="jQuery的2把利器"><a href="#jQuery的2把利器" class="headerlink" title="jQuery的2把利器"></a>jQuery的2把利器</h1><h2 id="jQuery核心函数"><a href="#jQuery核心函数" class="headerlink" title="jQuery核心函数"></a>jQuery核心函数</h2><ul><li>简称：jQuery函数（<code>$</code>/<code>jQuery</code>）</li><li>jQuery库向外直接暴露的就是<code>$</code>/<code>jQuery</code> </li><li>引入jQuery库后，直接使用<code>$</code>即可<ul><li>当函数用：<code>$(xxx)</code> </li><li>当对象用：<code>$.xxx()</code> </li></ul></li></ul><h2 id="jQuery核心对象"><a href="#jQuery核心对象" class="headerlink" title="jQuery核心对象"></a>jQuery核心对象</h2><ul><li>简称：jQuery对象</li><li>得到jQuery对象：执行jQuery函数返回的就是jQuery对象</li><li>使用jQuery对象：<code>$obj.xxx()</code> </li></ul><h1 id="jQuery核心函数的使用"><a href="#jQuery核心函数的使用" class="headerlink" title="jQuery核心函数的使用"></a>jQuery核心函数的使用</h1><h2 id="作为一般函数调用：-param"><a href="#作为一般函数调用：-param" class="headerlink" title="作为一般函数调用：$(param)"></a>作为一般函数调用：<code>$(param)</code></h2><ol><li>参数为函数：当DOM加载完成后，执行此回调函数</li><li>参数为选择器字符串：查找所有匹配的标签，并将它们封装为jQuery对象</li><li>参数为DOM对象：将DOM对象封装成jQuery对象</li><li>参数为html标签字符串（用的少）：创建标签对象并封装成jQuery对象</li></ol><h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><ul><li><p>需求一：点击按钮，显示按钮的文本，显示一个新的输入框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用jQuery实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//参数为函数：当DOM加载完成后，执行此回调函数</span></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   <span class="comment">//绑定文档加载完成的监听</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 参数为选择器字符串：查找所有匹配的标签，并将它们封装为jQuery对象</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;#btn&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//绑定点击事件监听</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//this指向绑定事件的对象</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// alert(this.innerHTML);   也可像下面这么写</span></span></span><br><span class="line"><span class="javascript">                alert($(<span class="built_in">this</span>).html());  <span class="comment">//参数为DOM对象：将DOM对象封装成jQuery对象</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//参数为html标签字符串（用的少）：创建标签对象并封装成jQuery对象</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                $(&#x27;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;msg3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>&#x27;).appendTo(&#x27;div&#x27;);</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;msg1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;msg2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="作为对象使用：-obj-xxx"><a href="#作为对象使用：-obj-xxx" class="headerlink" title="作为对象使用：$obj.xxx()"></a>作为对象使用：<code>$obj.xxx()</code></h2><ul><li><p>需求二：遍历输出数组中所有元素值</p><ul><li><p>准备工作：</p><p>文档找到数组相关操作的部分</p></li></ul><img src="https://blog.ply.cool/image/image-20210602180617365.png" alt="image-20210602180617365" style="zoom: 80%;" /><ul><li><p><code>$.each()</code>：隐式遍历数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>];</span><br><span class="line">$.each(arr,<span class="function"><span class="keyword">function</span>(<span class="params">index,item</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index,item);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><img src="https://blog.ply.cool/image/image-20210602181527421.png" alt="image-20210602181527421"  /></li></ul></li><li><p>需求三：去掉字符串两端的空格</p><ul><li><p><code>$.trim()</code>：去除两端的空格</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27; my string &#x27;</span>;</span><br><span class="line"><span class="comment">//原生JS</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;---&#x27;</span>+str.trim()+<span class="string">&#x27;---&#x27;</span>);</span><br><span class="line"><span class="comment">//jQuery</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;---&#x27;</span>+$.trim(str)+<span class="string">&#x27;---&#x27;</span>);</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://blog.ply.cool/image/image-20210602182713342.png" alt="image-20210602182713342"></p></li></ul></li></ul><h1 id="jQuery核心对象的使用"><a href="#jQuery核心对象的使用" class="headerlink" title="jQuery核心对象的使用"></a>jQuery核心对象的使用</h1><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><ul><li>即执行jQuery核心函数返回的对象</li><li>jQuery对象内部包含的都是DOM元素对象的数组（可能只是一个元素）</li><li>jQuery对象拥有很多有用的属性和方法，让程序员能方便的操作DOM</li></ul><h2 id="属性-方法"><a href="#属性-方法" class="headerlink" title="属性/方法"></a>属性/方法</h2><h3 id="基本行为"><a href="#基本行为" class="headerlink" title="基本行为"></a>基本行为</h3><p><img src="https://blog.ply.cool/image/image-20210602214519924.png" alt="image-20210602214519924"></p><ul><li><p><code>length</code>：属性，包含DOM元素的个数</p></li><li><p><code>[index]</code>/<code>get(index)</code>：得到对应位置的DOM元素（一般用第一个）</p></li><li><p><code>each()</code>：遍历包含的所有DOM元素</p></li><li><p><code>index()</code>：得到在所在兄弟元素中的下标</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;测试一&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;测试二&lt;/button&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn3&quot;</span>&gt;测试三&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;测试四&lt;/button&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;jquery-3.6.0.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">//需求1：统计一共有多少个按钮</span></span><br><span class="line">        <span class="keyword">var</span> $buttons = $(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log($buttons.length);</span><br><span class="line">        <span class="comment">//需求2：取出第二个button的文本</span></span><br><span class="line">        <span class="built_in">console</span>.log($buttons[<span class="number">1</span>].innerHTML, $buttons.get(<span class="number">1</span>).innerHTML);</span><br><span class="line">        <span class="comment">//需求3：输出所有button标签的文本</span></span><br><span class="line">        $buttons.each(<span class="function"><span class="keyword">function</span>(<span class="params">index, domEle</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(index, domEle.innerHTML, <span class="built_in">this</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//需求4：输出“测试三”按钮是所有按钮中的第几个</span></span><br><span class="line">        <span class="built_in">console</span>.log($(<span class="string">&#x27;#btn3&#x27;</span>).index() + <span class="number">1</span>);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210606215728981.png" alt="image-20210606215728981"></p></li></ul><h2 id="伪数组"><a href="#伪数组" class="headerlink" title="伪数组"></a>伪数组</h2><ul><li><p>类型：Object对象</p></li><li><p>行为：length属性，数值下标属性</p></li><li><p>没有数组特别的方法：<code>forEach()</code>，<code>push()</code>，<code>pop()</code>，<code>splice()</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($buttons <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">//false</span></span><br><span class="line"><span class="comment">//自定义一个伪数组</span></span><br><span class="line"><span class="keyword">var</span> weiArr = &#123;&#125;;</span><br><span class="line">weiArr[<span class="number">0</span>] = <span class="string">&#x27;atguigu&#x27;</span>;</span><br><span class="line">weiArr.length = <span class="number">1</span>;</span><br><span class="line">weiArr[<span class="number">1</span>] = <span class="number">123</span>;</span><br><span class="line">weiArr.length = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; weiArr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = weiArr[i];</span><br><span class="line">    <span class="built_in">console</span>.log(i, obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210606220844219.png" alt="image-20210606220844219"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级 对象高级</title>
      <link href="article/660230df.html"/>
      <url>article/660230df.html</url>
      
        <content type="html"><![CDATA[<h1 id="对象创建模式"><a href="#对象创建模式" class="headerlink" title="对象创建模式"></a>对象创建模式</h1><h2 id="Object构造函数模式"><a href="#Object构造函数模式" class="headerlink" title="Object构造函数模式"></a>Object构造函数模式</h2><ul><li><p>套路：先创建空Object对象，再动态添加属性/方法</p></li><li><p>适用场景：起始时不确定对象内部数据</p></li><li><p>弊端：语句太多</p><img src="https://blog.ply.cool/image/image-20210528192748944.png" alt="image-20210528192748944" style="zoom:50%;" /></li></ul><h2 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h2><ul><li><p>套路：使用<code>&#123;&#125;</code>创建对象，同时指定属性/方法</p></li><li><p>适用场景：起始时对象内部的数据是确定的</p></li><li><p>弊端：如果创建多个对象，有重复代码</p><img src="https://blog.ply.cool/image/image-20210528193919701.png" alt="image-20210528193919701" style="zoom:50%;" /></li></ul><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><ul><li><p>套路：通过工厂函数动态创建对象并返回</p></li><li><p>适用场景：需要创建多个对象</p></li><li><p>弊端：对象没有具体的类型，都是Object类型</p><img src="https://blog.ply.cool/image/image-20210528194604253.png" alt="image-20210528194604253" style="zoom:50%;" /></li></ul><h2 id="自定义构造函数模式"><a href="#自定义构造函数模式" class="headerlink" title="自定义构造函数模式"></a>自定义构造函数模式</h2><ul><li><p>套路：自定义构造函数，通过new创建对象</p></li><li><p>适用场景：需要创建多个类型确定的对象</p></li><li><p>弊端：每个对象都有相同的数据，浪费内存</p><img src="https://blog.ply.cool/image/image-20210528195128197.png" alt="image-20210528195128197" style="zoom:50%;" /></li></ul><h2 id="构造函数-原型的组合模式"><a href="#构造函数-原型的组合模式" class="headerlink" title="构造函数+原型的组合模式"></a>构造函数+原型的组合模式</h2><ul><li><p>套路：自定义构造函数，属性在函数中初始化，方法添加到原型上</p></li><li><p>适用场景：需要创建多个类型确定的对象</p><img src="https://blog.ply.cool/image/image-20210528195650383.png" alt="image-20210528195650383" style="zoom:50%;" /></li></ul><h1 id="继承模式"><a href="#继承模式" class="headerlink" title="继承模式"></a>继承模式</h1><h2 id="原型链的继承"><a href="#原型链的继承" class="headerlink" title="原型链的继承"></a>原型链的继承</h2><ul><li><p>套路：</p><ol><li>定义父类型构造函数</li><li>给父类型的原型添加方法</li><li>定义子类型的构造函数</li><li>创建父类型的对象赋值给子类型的原型</li><li>将子类型原型的构造属性设置为子类型</li><li>给子类型原型添加方法</li><li>创建子类型的对象：可以调用父类型的方法</li></ol></li><li><p>关键：</p><ul><li>子类型的原型为父类型的一个实例对象</li></ul><img src="https://blog.ply.cool/image/image-20210528200829944.png" alt="image-20210528200829944" style="zoom:80%;" /></li><li><p>思维图：</p><img src="https://blog.ply.cool/image/image-20210528201809842.png" alt="image-20210528201809842" style="zoom: 50%;" /></li></ul><h2 id="借用构造函数继承（假的）"><a href="#借用构造函数继承（假的）" class="headerlink" title="借用构造函数继承（假的）"></a>借用构造函数继承（假的）</h2><ul><li><p>套路：</p><ol><li>定义父类型构造函数</li><li>定义子类型构造函数</li><li>在子类型构造函数中调用父类型构造方法</li></ol></li><li><p>关键：</p><ul><li><p>在子类型构造函数中通用<code>call()</code>调用父类型构造函数</p><p><code>A.call(B)</code> 用B来调用执行A</p></li></ul><img src="https://blog.ply.cool/image/image-20210528203130474.png" alt="image-20210528203130474" style="zoom: 50%;" /></li></ul><h2 id="组合继承-原型链-借用构造函数"><a href="#组合继承-原型链-借用构造函数" class="headerlink" title="组合继承(原型链+借用构造函数)"></a>组合继承(原型链+借用构造函数)</h2><ul><li><p>利用原型链实现对父类型对象的方法继承</p></li><li><p>利用super()借用父类型构造函数初始化相同属性</p><img src="https://blog.ply.cool/image/image-20210528203729596.png" alt="image-20210528203729596" style="zoom:50%;" /></li></ul><h1 id="附：进程与线程"><a href="#附：进程与线程" class="headerlink" title="附：进程与线程"></a>附：进程与线程</h1><ul><li><p>进程：程序的一次执行，它占用一片独有的内存空间</p></li><li><p>线程：</p><ul><li>是进程内的一个独立执行单元</li><li>是程序执行的完整流程</li><li>是CPU的最小调度单元</li></ul></li><li><p>图解</p><p><img src="https://blog.ply.cool/image/image-20210528205201545.png" alt="image-20210528205201545"></p></li><li><p>相关知识：</p><p><img src="https://blog.ply.cool/image/image-20210528205351075.png" alt="image-20210528205351075"></p></li><li><p>js是单线程运行的，但使用H5中的Web Workers可以多线程运行</p></li><li><p>浏览器是多线程运行的</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级 函数高级</title>
      <link href="article/27e1de73.html"/>
      <url>article/27e1de73.html</url>
      
        <content type="html"><![CDATA[<h1 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h1><h2 id="原型（prototype）"><a href="#原型（prototype）" class="headerlink" title="原型（prototype）"></a>原型（prototype）</h2><ul><li><p>函数的<code>prototype</code>属性</p><ul><li><p>每个函数都有一个<code>prototype</code>属性，它默认指向一个Object空对象（即称为：原型对象）</p></li><li><p>原型对象中有一个属性<code>constractor</code>，它指向函数对象</p><p><img src="https://blog.ply.cool/image/image-20210524222418009.png" alt="image-20210524222418009"></p></li></ul></li><li><p>给原型对象添加属性（一般都是方法）</p><ul><li>作用：函数的所有实例对象自动拥有原型中的属性（方法）</li></ul></li></ul><h2 id="显示原型与隐式原型"><a href="#显示原型与隐式原型" class="headerlink" title="显示原型与隐式原型"></a>显示原型与隐式原型</h2><ul><li><p>每个函数function都有一个<code>prototype</code>，即显式原型（属性）</p></li><li><p>每个实例对象都有一个<code>__proto__</code>，可称为隐式原型（属性）</p><p><img src="https://blog.ply.cool/image/image-20210524223340615.png" alt="image-20210524223340615"></p></li><li><p>对象的隐式原型的值为为其对应构造函数的显式原型的值</p></li><li><p>给原型添加方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Fn.prototype.test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;test()&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn.test();</span><br></pre></td></tr></table></figure><img src="https://blog.ply.cool/image/image-20210524224637431.png" alt="image-20210524224637431" style="zoom: 50%;" /></li></ul><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><ul><li><p>访问一个对象的属性时，</p><p>先在自身属性中查找，找到返回</p><p>如果没有，再沿着<code>__proto__</code>这条链向上查找，找到返回</p><p>如果最终没找到，返回undefined</p></li><li><p>别名：隐式原型链</p></li><li><p>作用：查找对象的属性（方法）</p></li><li><p>构造函数/原型/实体对象的关系</p><img src="https://blog.ply.cool/image/image-20210524230949027.png" alt="image-20210524230949027" style="zoom: 50%;" /></li><li><p>函数的显式原型指向的对象默认是空Object实例对象（但Object不满足）</p></li><li><p>所有函数都是Function的实例（包括Function）</p></li><li><p>Object是原型链尽头</p></li></ul><h2 id="探索instanceof"><a href="#探索instanceof" class="headerlink" title="探索instanceof"></a>探索instanceof</h2><ul><li>instanceof是如何判断的<ul><li>表达式：<code>A instanceof B</code></li><li>如果B函数的显式原型对象在A对象的原型链上，就返回true，否则返回false</li></ul></li></ul><h1 id="执行上下文与执行上下文栈"><a href="#执行上下文与执行上下文栈" class="headerlink" title="执行上下文与执行上下文栈"></a>执行上下文与执行上下文栈</h1><h2 id="变量提升与函数提升"><a href="#变量提升与函数提升" class="headerlink" title="变量提升与函数提升"></a>变量提升与函数提升</h2><ul><li>变量声明提升<ul><li>通过var定义（声明）的变量，在定义语句之前就可以访问到</li><li>值：undefined</li></ul></li><li>函数声明提升<ul><li>通过function声明的函数，在之前就可以直接调用</li><li>值：函数定义（对象）</li></ul></li><li>代码分类（位置）<ul><li>全局代码</li><li>函数（局部）代码</li></ul></li><li>全局执行上下文<ul><li>在执行全局代码前将window确定为全局执行上下文</li><li>对全局数据进行预处理<ul><li>var定义的全局变量==》undefined，添加为window属性</li><li>function声明的全局函数==》赋值（fun），添加为window的方法</li><li>this==》赋值（window）</li></ul></li><li>开始执行全局代码</li></ul></li></ul><h1 id="作用域与作用域链"><a href="#作用域与作用域链" class="headerlink" title="作用域与作用域链"></a>作用域与作用域链</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ul><li>它就像一块“地盘”，一个代码段所在的区域</li><li>它是静态的（相当于上下文对象），在编写代码时就确定了</li><li>分类<ul><li>全局作用域</li><li>函数作用域</li><li>ES6有了块作用域</li></ul></li><li>作用<ul><li>隔离变量</li></ul></li></ul><h2 id="作用域与执行上下文"><a href="#作用域与执行上下文" class="headerlink" title="作用域与执行上下文"></a>作用域与执行上下文</h2><ul><li>区别：</li></ul><p><img src="https://blog.ply.cool/image/image-20210526214940850.png" alt="image-20210526214940850"></p><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><ul><li>如何产生闭包<ul><li>当一个嵌套的内部（子）函数引用了嵌套的外部（父）函数的变量（函数时），就产生了闭包</li></ul></li><li>产生闭包的条件？<ul><li>函数嵌套</li><li>内部函数引用了外部函数的数据（变量/函数）</li></ul></li></ul><h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><ul><li>使用函数内部的变量在函数执行完后，仍然存活在内存中（延长了局部变量的生命周期）</li><li>让函数外部可以操作（读写）到函数内部的数据（变量/函数）</li></ul><p><img src="https://blog.ply.cool/image/image-20210526222828088.png" alt="image-20210526222828088"></p><h2 id="闭包的生命周期"><a href="#闭包的生命周期" class="headerlink" title="闭包的生命周期"></a>闭包的生命周期</h2><ul><li>产生：在嵌套内部函数定义执行完成时就产生了（不是在调用）</li><li>死亡：在嵌套内部函数成为垃圾对象时</li></ul><img src="https://blog.ply.cool/image/image-20210527224854602.png" alt="image-20210527224854602" style="zoom: 50%;" /><h2 id="闭包的应用"><a href="#闭包的应用" class="headerlink" title="闭包的应用"></a>闭包的应用</h2><ul><li>自定义JS模块<ul><li>具有特定功能的js文件</li><li>将所有的数据和功能都封装在一个函数内部（私有的）</li><li>只向外暴露一个包含n个方法的对象或函数</li><li>模块的使用者，只需要通过模块暴露的对象调用方法来实现对应的功能</li></ul></li></ul><h2 id="闭包的缺点及其解决"><a href="#闭包的缺点及其解决" class="headerlink" title="闭包的缺点及其解决"></a>闭包的缺点及其解决</h2><ul><li>缺点<ul><li>函数执行完后，函数内的局部变量没有释放，占用内存时间会变长</li><li>容易造成内存泄漏</li></ul></li><li>解决<ul><li>能不用闭包就不用闭包</li><li>及时释放</li></ul></li></ul><img src="https://blog.ply.cool/image/image-20210527230847867.png" alt="image-20210527230847867" style="zoom: 67%;" /><h2 id="内存溢出与内存泄漏"><a href="#内存溢出与内存泄漏" class="headerlink" title="内存溢出与内存泄漏"></a>内存溢出与内存泄漏</h2><ul><li>内存溢出<ul><li>一种程序运行出现的错误</li><li>当程序运行需要的内存超过了剩余的内存时，就会抛出内存溢出的错误</li></ul></li><li>内存泄漏<ul><li>占用的内存没有及时释放</li><li>内存泄漏积累多了就容易导致内存溢出</li><li>常见的内存泄漏<ul><li>意外的全局变量</li><li>没有及时清理的计时器或回调函数</li><li>闭包</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 原型 </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级 基础知识总结深入</title>
      <link href="article/6754e5d4.html"/>
      <url>article/6754e5d4.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol><li><p>基本（值）类型</p><ul><li><p>String</p><p>任意字符串</p></li><li><p>Number</p><p>任意数字</p></li><li><p>boolean</p><p><code>true</code>/<code>false</code> </p></li><li><p>undefined</p><p><code>undefined</code> </p></li><li><p>null</p><p><code>null</code> </p></li></ul></li><li><p>对象（引用）类型</p><ul><li><p>Object</p><p>任意对象</p></li><li><p>Function</p><p>一种特别的对象（封装了一段可执行的具有一定功能的代码）</p></li><li><p>Array</p><p>一种特别的对象（数值下标，内部数据是有序的）</p></li></ul></li></ol><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><ol><li><p><code>typeof</code> </p><ul><li><p><code>typeof</code>返回数据类型的字符串表达</p></li><li><p>可以判断<code>undefined</code>/数值/字符串/布尔值/<code>function</code> </p></li><li><p>不能判断<code>null</code>与<code>object</code> ，<code>object</code>与<code>array</code> </p><p><img src="https://blog.ply.cool/image/image-20210523222715761.png" alt="image-20210523222715761"></p></li></ul></li><li><p><code>instanceof</code> </p><ul><li><p>翻译：实例</p></li><li><p>判断对象的具体类型</p><p><img src="https://blog.ply.cool/image/image-20210523224412061.png" alt="image-20210523224412061"></p></li></ul></li><li><p><code>===</code> /<code>==</code> </p><ul><li><code>===</code>不会做数据转换</li><li><code>==</code>会做数据转换</li><li><code>===</code>可以判断<code>undefined</code>，<code>null</code> </li></ul></li></ol><ul><li><p>实例对象与类型对象</p><img src="https://blog.ply.cool/image/image-20210523225308931.png" alt="image-20210523225308931" style="zoom:67%;" /></li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li><p><code>undefined</code>与<code>null</code>的区别？</p><ul><li><p><code>undefined</code>代表定义未赋值</p></li><li><p><code>null</code>代表定义并赋值了，只是值为<code>null</code> </p><img src="https://blog.ply.cool/image/image-20210523230438530.png" alt="image-20210523230438530" style="zoom: 67%;" /></li></ul></li><li><p>什么时候给变量赋值为<code>null</code>呢？</p><ul><li><p>初始赋值为<code>null</code>，表明将要赋值为对象</p></li><li><p>结束前，让对象成为垃圾对象（被垃圾回收器回收）</p><img src="https://blog.ply.cool/image/image-20210523230455580.png" alt="image-20210523230455580" style="zoom:67%;" /></li></ul></li><li><p>严格区别变量类型与数据类型？</p><ul><li>数据的类型<ul><li>基本类型</li><li>对象类型</li></ul></li><li>变量的类型（变量内存值的类型）<ul><li>基本类型：保存的就是基本类型数据</li><li>引用类型：保存的是地址值</li></ul></li></ul></li></ol><h1 id="数据—变量—内存"><a href="#数据—变量—内存" class="headerlink" title="数据—变量—内存"></a>数据—变量—内存</h1><ul><li><p>什么是数据？</p><p>存储在内存中代表特定信息的‘东东’，本质上是0101….</p><p>数据的特点：可传递，可运算</p></li><li><p>什么是内存？</p><p>内存条在通电后产生的可存储数据的空间（临时的）</p><p>内存产生和死亡：内存条（电路板）==》通电==》产生内存空间==》存储数据==》处理数据==》断电==》内存空间和数据都消失</p><p>内存分类：</p><ul><li>栈：全局变量/局部变量</li><li>堆：对象</li></ul></li><li><p>什么是变量？</p><p>可变化的量，由变量名和变量值组成</p><p>每个变量都对应一块小内存，变量名用来查找对应的内存，变量值就是内存中保存的数据</p></li><li><p><code>var a = xxx</code>，a内存到底保存的是什么？</p><p>xxx是基本数据，保存的就是这个数据</p><p>xxx是对象，保存的就是这个对象的地址值</p><p>xxx是一个变量，保存的是xxx的内存内容（可能是基本数据，可能是地址值）</p></li><li><p>在js调用函数传递变量参数时，是值传递还是引用传递？</p><ul><li>理解1：都是值（基本/地址值）传递</li><li>理解2：可能是值传递，也可能是引用传递（地址值）</li></ul></li><li><p>JS引擎如何管理内存？</p><ul><li><p>内存生命周期</p><p>分配小内存空间，得到它的使用权</p><p>存储数据，可以反复进行操作</p><p>释放小内存空间</p></li><li><p>释放内存</p><p>局部变量：函数执行完自动释放</p><p>对象：成为垃圾对象==》垃圾回收器回收</p></li></ul></li></ul><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><ul><li><p>什么是对象？</p><ul><li>多个数据的封装体</li><li>用来保存多个数据的容器</li><li>一个对象代表现实中的一个事务</li></ul></li><li><p>为什么要用对象？</p><ul><li>统一管理多个数据</li></ul></li><li><p>对象的组成：</p><ul><li>属性：由属性名（字符串）和属性值（任意）组成</li><li>方法（一种特别的属性）：属性值为函数</li></ul></li><li><p>如何访问对象内部数据？</p><ul><li><p><code>.属性名</code>：编码简单，有时不能用</p></li><li><p><code>[&#39;属性名&#39;]</code>：编码麻烦，能通用</p></li><li><p>什么时候必须使用<code>[&#39;属性名&#39;]</code>的方式？</p><p>属性名包含特殊字符：空格</p><p>变量名不确定</p><img src="https://blog.ply.cool/image/image-20210524183742551.png" alt="image-20210524183742551" style="zoom: 67%;" /></li></ul></li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li><p>什么是函数？</p><ul><li>实现特定功能的n条语句的封装体</li><li>只有函数是可以执行的，其他类型的数据不能执行</li></ul></li><li><p>为什么要用函数？</p><ul><li>提高代码复用</li><li>便于阅读交流</li></ul></li><li><p>如何定义函数？</p><ul><li><p>函数声明</p><img src="https://blog.ply.cool/image/image-20210524211326159.png" alt="image-20210524211326159" style="zoom: 67%;" /></li><li><p>表达式</p><img src="https://blog.ply.cool/image/image-20210524211345609.png" alt="image-20210524211345609" style="zoom:67%;" /></li></ul></li><li><p>如何调用（执行）函数？</p><ul><li><p><code>test()</code>：直接调用</p></li><li><p><code>obj.test()</code>：通过对象调用</p></li><li><p><code>new test</code>：new调用</p></li><li><p><code>test.call/apply(obj)</code>：临时test成为obj的方法进行调用</p><p><img src="https://blog.ply.cool/image/image-20210524211656163.png" alt="image-20210524211656163"></p></li></ul></li></ul><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><ul><li>什么函数才是回调函数？<ul><li>你定义的</li><li>你没有调</li><li>最终它执行了</li></ul></li><li>常见的回调函数？<ul><li>dom事件回调函数</li><li>定时器回调函数</li><li>ajax请求回调函数</li><li>生命周期回调函数</li></ul></li></ul><h2 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h2><ul><li>理解：<ul><li>全称：Immediately-Invoked Function Expression（立即执行函数表达式）</li></ul></li><li>作用：<ul><li>隐藏实现</li><li>不会污染外部（全局）命名空间</li><li>用来编码js模块</li></ul></li></ul><h2 id="函数中的this"><a href="#函数中的this" class="headerlink" title="函数中的this"></a>函数中的this</h2><ul><li>this是什么？<ul><li>任何函数本质上都是通过某个对象调用的，如果没有指定就是window</li><li>所有函数内部都有一个变量this</li><li>它的值是调用函数的当前对象</li></ul></li><li>如何确定this的值？<ul><li><code>test()</code>：window</li><li><code>p.test()</code>：p</li><li><code>new test()</code>：新创建的对象</li><li><code>p.call(obj)</code>：obj</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap学习</title>
      <link href="article/3c3294d3.html"/>
      <url>article/3c3294d3.html</url>
      
        <content type="html"><![CDATA[<h1 id="文档链接"><a href="#文档链接" class="headerlink" title="文档链接"></a>文档链接</h1><ul><li><a href="https://v3.bootcss.com/css/">全局 CSS 样式 · Bootstrap v3 中文文档 | Bootstrap 中文网 (bootcss.com)</a></li></ul><h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><h2 id="流体容器"><a href="#流体容器" class="headerlink" title="流体容器"></a>流体容器</h2><ul><li><p><code>.container-fluid</code> 类用于 100% 宽度，占据全部视口（viewport）的容器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="固定容器"><a href="#固定容器" class="headerlink" title="固定容器"></a>固定容器</h2><ul><li><p><code>.container</code> 类用于固定宽度并支持响应式布局的容器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th align="center">域值</th><th align="center">width</th></tr></thead><tbody><tr><td align="center">大于等于1200<br />（lg    大屏PC）</td><td align="center">1170（1140+槽宽）</td></tr><tr><td align="center">大于等于992<br />小于1200<br />（md    中屏PC）</td><td align="center">970（940+槽宽）</td></tr><tr><td align="center">大于等于768<br />小于992<br />（sm    平板）</td><td align="center">750（720+槽宽）</td></tr><tr><td align="center">小于768<br />（xs    移动手机）</td><td align="center">auto</td></tr></tbody></table><h2 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h2><ul><li>栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。</li><li>“行（row）”必须包含在 <code>.container</code> （固定宽度）或 <code>.container-fluid</code> （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。</li><li>通过“行（row）”在水平方向创建一组“列（column）”。</li><li>你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。</li><li>类似 <code>.row</code> 和 <code>.col-xs-4</code> 这种预定义的类，可以用来快速创建栅格布局。Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。</li><li>通过为“列（column）”设置 <code>padding</code> 属性，从而创建列与列之间的间隔（gutter）。通过为 <code>.row</code> 元素设置负值 <code>margin</code> 从而抵消掉为 <code>.container</code> 元素设置的 <code>padding</code>，也就间接为“行（row）”所包含的“列（column）”抵消掉了<code>padding</code>。</li><li>负值的 margin就是下面的示例为什么是向外突出的原因。在栅格列中的内容排成一行。</li><li>栅格系统中的列是通过指定1到12的值来表示其跨越的范围。例如，三个等宽的列可以使用三个 <code>.col-xs-4</code> 来创建。</li><li>如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列。</li><li>栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 <code>.col-md-*</code> 栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 <code>.col-lg-*</code> 不存在， 也影响大屏幕设备。</li></ul><h1 id="Bootstrap实战"><a href="#Bootstrap实战" class="headerlink" title="Bootstrap实战"></a>Bootstrap实战</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap 101 Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        img&#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.owner-suolue</span>&#123;</span></span><br><span class="line">            margin: 30px auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.owner-suolue</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">            width: auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.item</span>&#123;</span></span><br><span class="line">            height: 500px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.owner-carousel</span>&#123;</span></span><br><span class="line">            margin-top: 50px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.btn-primary</span>&#123;</span></span><br><span class="line">            margin: 10px auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.carousel-caption</span> &gt; <span class="selector-tag">p</span>&#123;</span></span><br><span class="line">            font-size: large;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.col-md-7</span>&#123;</span></span><br><span class="line">            margin-top: 80px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-inverse navbar-fixed-top&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- Brand and toggle get grouped for better mobile display --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle collapsed&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#bs-example-navbar-collapse-1&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>现代浏览器博物馆<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">          <span class="comment">&lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bs-example-navbar-collapse-1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>综述<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>简述<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span>特点<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span> <span class="attr">id</span>=<span class="string">&quot;damu-nav&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#chrome&quot;</span>&gt;</span>Chrome<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#firefox&quot;</span>&gt;</span>Firefox<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#safari&quot;</span>&gt;</span>Safari<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#opera&quot;</span>&gt;</span>Opera<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#ie&quot;</span>&gt;</span>IE<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#about&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;form class=&quot;navbar-form navbar-left&quot;&gt;</span></span><br><span class="line"><span class="comment">              &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="comment">                &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Search&quot;&gt;</span></span><br><span class="line"><span class="comment">              &lt;/div&gt;</span></span><br><span class="line"><span class="comment">              &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;</span></span><br><span class="line"><span class="comment">            &lt;/form&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;ul class=&quot;nav navbar-nav navbar-right&quot;&gt;</span></span><br><span class="line"><span class="comment">              &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">              &lt;li class=&quot;dropdown&quot;&gt;</span></span><br><span class="line"><span class="comment">                &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; role=&quot;button&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot;&gt;Dropdown &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="comment">                &lt;ul class=&quot;dropdown-menu&quot;&gt;</span></span><br><span class="line"><span class="comment">                  &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Action&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">                  &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Another action&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">                  &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Something else here&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">                  &lt;li role=&quot;separator&quot; class=&quot;divider&quot;&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">                  &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Separated link&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">                &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">              &lt;/li&gt;</span></span><br><span class="line"><span class="comment">            &lt;/ul&gt; --&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.container-fluid --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 轮播 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;carousel-example-generic&quot;</span> <span class="attr">class</span>=<span class="string">&quot;carousel slide owner-carousel&quot;</span> <span class="attr">data-ride</span>=<span class="string">&quot;carousel&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Indicators --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">&quot;carousel-indicators&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">&lt;!-- Wrapper for slides --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-inner&quot;</span> <span class="attr">role</span>=<span class="string">&quot;listbox&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item active&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/chrome-big.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Chrome<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span>Google Chrome，又称Google浏览器，是一个由Google（谷歌）公司开发的网页浏览器。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-primary&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.google.cn/chrome/&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>点我下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/firefox-big.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Firefox<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Mozilla Firefox，中文名通常称为“火狐”或“火狐浏览器”，是一个开源网页浏览器。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-primary&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.firefox.com.cn/download/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>点我下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/safari-big.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Safari<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Safari，是苹果计算机的最新操作系统Mac OS X中的浏览器。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-primary&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.apple.com/cn/safari/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>点我下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/opera-big.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Opera<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Opera浏览器，是一款挪威Opera Software ASA公司制作的支持多页面标签式浏览的网络浏览器。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-primary&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.opera.com/zh-cn&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>点我下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/ie-big.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>IE<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Internet Explorer，简称 IE，是微软公司推出的一款网页浏览器。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-primary&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://ie.microsoft.com/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>点我下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">&lt;!-- Controls --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;left carousel-control&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-slide</span>=<span class="string">&quot;prev&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-chevron-left&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;right carousel-control&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-slide</span>=<span class="string">&quot;next&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-chevron-right&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 owner-suolue text-center&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/chrome-logo-small.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;caption&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>chrome<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Google Chrome，又称Google浏览器，是一个由Google（谷歌）公司开发的网页浏览器。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.google.cn/chrome/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>点我下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 owner-suolue text-center&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/firefox-logo-small.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;caption&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Firefox<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Mozilla Firefox，中文名通常称为“火狐”或“火狐浏览器”，是一个开源网页浏览器。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.firefox.com.cn/download/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>点我下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 owner-suolue text-center&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/safari-logo-small.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;caption&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Safari<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Safari，是苹果计算机的最新操作系统Mac OS X中的浏览器。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.apple.com/cn/safari/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>点我下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin: 50px auto;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">id</span>=<span class="string">&quot;damu-tab&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- Nav tabs --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-tabs&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tablist&quot;</span> <span class="attr">id</span>=<span class="string">&quot;damu-list&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#chrome&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;chrome&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>chrome<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#firefox&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;firefox&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>firefox<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#safari&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;safari&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>safari<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#opera&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;opera&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>opera<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#ie&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;ie&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>ie<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">            <span class="comment">&lt;!-- Tab panes --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-content&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane active&quot;</span> <span class="attr">id</span>=<span class="string">&quot;chrome&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-7&quot;</span>&gt;</span></span><br><span class="line">                              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;color: blue;&quot;</span>&gt;</span>Google Chrome<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 15px;color: black;&quot;</span>&gt;</span>使用最广的浏览器<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                               Google Chrome，又称Google浏览器，是一个由Google（谷歌）公司开发的网页浏览器。 该浏览器是基于其他开源软件所撰写，包括WebKit，目标是提升稳定性、速度和安全性，并创造出简单且有效率的使用者界面。</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-5&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/chrome-logo.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane&quot;</span> <span class="attr">id</span>=<span class="string">&quot;firefox&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-5&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/firefox-logo.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-7&quot;</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;color: blue;&quot;</span>&gt;</span>Mozilla Firefox<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 15px;color: black;&quot;</span>&gt;</span>美丽的狐狸<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                          Mozilla Firefox，中文名通常称为“火狐”或“火狐浏览器”，是一个开源网页浏览器， 使用Gecko引擎（非ie内核），支持多种操作系统如Windows、Mac和linux。</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane&quot;</span> <span class="attr">id</span>=<span class="string">&quot;safari&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-7&quot;</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;color: blue;&quot;</span>&gt;</span>Safari<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 15px;color: black;&quot;</span>&gt;</span>Mac用户首选<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                          Safari，是苹果计算机的最新操作系统Mac OS X中的浏览器，使用了KDE的KHTML作为浏览器的运算核心。 Safari在2003年1月7日首度发行测试版，并成为Mac OS X v10.3与之后的默认浏览器，也是iPhone与IPAD和iPod touch的指定浏览器。</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-5&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/safari-logo.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane&quot;</span> <span class="attr">id</span>=<span class="string">&quot;opera&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-5&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/opera-logo.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-7&quot;</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;color: blue;&quot;</span>&gt;</span>Opera<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 15px;color: black;&quot;</span>&gt;</span>小众但易用<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                          Opera浏览器，是一款挪威Opera Software ASA公司制作的支持多页面标签式浏览的网络浏览器。 是跨平台浏览器可以在Windows、Mac和Linux三个操作系统平台上运行。.</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ie&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-7&quot;</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;color: blue;&quot;</span>&gt;</span>IE<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 15px;color: black;&quot;</span>&gt;</span>你懂的<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                          Internet Explorer，原称Microsoft Internet Explorer(6版本以前)和Windows Internet Explorer(7，8，9，10版本)， 简称IE，是美国微软公司推出的一款网页浏览器。它采用的排版引擎(俗称内核)为Trident。</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-5&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/ie-logo.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin: 30px auto;&quot;</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;copy;</span>2021<span class="symbol">&amp;nbsp;</span>Coder.Xie</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模态框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;about&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span> <span class="attr">role</span>=<span class="string">&quot;document&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>模态框<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个模态框<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-dialog --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#damu-nav &gt; li &gt; a&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> href = $(<span class="built_in">this</span>).attr(<span class="string">&quot;href&quot;</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#damu-list &gt; li &gt; a[href=&quot;</span>+(href)+<span class="string">&quot;]&quot;</span>).tab(<span class="string">&#x27;show&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).scrollTop($(<span class="string">&quot;#damu-tab&quot;</span>).offset().top);</span></span><br><span class="line">        e.preventDefult();</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在此查看运行情况：<a href="https://blog.ply.cool/normal/Bootstrap.html">Bootstrap实例</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Bootstrap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Less</title>
      <link href="article/73843be1.html"/>
      <url>article/73843be1.html</url>
      
        <content type="html"><![CDATA[<h1 id="初见Less"><a href="#初见Less" class="headerlink" title="初见Less"></a>初见Less</h1><ul><li>Less是一门CSS预处理语言，它扩展了CSS语言，增加了变量，Mixin，函数等特性，使CSS更易维护和扩展，Less可以运行在Node或浏览器端</li></ul><h2 id="less中的注释"><a href="#less中的注释" class="headerlink" title="less中的注释"></a>less中的注释</h2><ul><li>以<code>//</code>开头的注释，不会被编译到CSS文件中</li><li>以<code>/**/</code>包裹的注释会被编译到CSS文件中</li></ul><h2 id="less中的变量"><a href="#less中的变量" class="headerlink" title="less中的变量"></a>less中的变量</h2><ul><li><p>使用<code>@</code>来声明一个变量：<code>@变量名: pink;</code> </p></li><li><p>作为普通属性值来使用：直接使用<code>@变量名</code> </p></li><li><p>作为选择器和属性名：<code>@&#123;selector的值&#125;</code>的形式</p><ul><li><p>编译前：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@color:</span> pink;</span><br><span class="line"><span class="variable">@kuandu:</span> width;</span><br><span class="line"><span class="variable">@selector:</span> #wrap;</span><br><span class="line"><span class="variable">@&#123;selector&#125;</span>&#123;</span><br><span class="line">    <span class="attribute">@&#123;kuandu&#125;</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">@color</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>作为URL：<code>@&#123;URL&#125;</code> </p></li><li><p>变量的延迟加载</p></li><li><p>less中变量是块级作用域</p><ul><li><p>编译前：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@var:</span> <span class="number">0</span>;</span><br><span class="line"><span class="selector-class">.class</span>&#123;</span><br><span class="line">    <span class="variable">@var:</span> <span class="number">1</span>;</span><br><span class="line">    <span class="selector-class">.bass</span>&#123;</span><br><span class="line">        <span class="variable">@var:</span> <span class="number">2</span>;</span><br><span class="line">        <span class="attribute">three</span>: <span class="variable">@var</span>;</span><br><span class="line">        <span class="variable">@var:</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">one</span>: <span class="variable">@var</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">one</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class</span> <span class="selector-class">.bass</span> &#123;</span><br><span class="line">  <span class="attribute">three</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="less的嵌套规则"><a href="#less的嵌套规则" class="headerlink" title="less的嵌套规则"></a>less的嵌套规则</h2><ul><li><p>基本嵌套规则</p></li><li><p><code>&amp;</code>的使用</p><ul><li><p>属性名之间的嵌套只能表示祖先元素关系</p></li><li><p>属性名前加<code>&amp;</code>则可以取消祖先元素关系之间的空格（设置hover常用）</p></li><li><p>编译前：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="selector-class">.inner</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">        <span class="attribute">background-color</span>: powderblue;</span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">background-color</span>: powderblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="Less中的混合（Mixin）"><a href="#Less中的混合（Mixin）" class="headerlink" title="Less中的混合（Mixin）"></a>Less中的混合（Mixin）</h1><ul><li>混合就是将一系列属性从一个规则集引入到另一个规则集的方式</li></ul><h2 id="普通混合"><a href="#普通混合" class="headerlink" title="普通混合"></a>普通混合</h2><ul><li><p>将相同的样式封装到一起，方便选择器直接使用相同的样式</p><ul><li><p>编译前：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.same</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: powderblue;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="selector-class">.inner</span>&#123;</span><br><span class="line">        <span class="selector-class">.same</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.inner2</span>&#123;</span><br><span class="line">        <span class="selector-class">.same</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.same</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: powderblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.same</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: powderblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: powderblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner2</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="不带输出的混合"><a href="#不带输出的混合" class="headerlink" title="不带输出的混合"></a>不带输出的混合</h2><ul><li><p>如果不希望共同样式生成一个独立的规则集，在选择器名称后加<code>()</code>即可</p><ul><li><p>编译前：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.same</span>()&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: powderblue;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="selector-class">.inner</span>&#123;</span><br><span class="line">        <span class="selector-class">.same</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.inner2</span>&#123;</span><br><span class="line">        <span class="selector-class">.same</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: powderblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: powderblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner2</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="带参数-多个-的混合"><a href="#带参数-多个-的混合" class="headerlink" title="带参数(多个)的混合"></a>带参数(多个)的混合</h2><ul><li><p>编译前：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.same</span>(<span class="variable">@w</span>,<span class="variable">@h</span>,<span class="variable">@c</span>)&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@h</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">@c</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="selector-class">.inner</span>&#123;</span><br><span class="line">        <span class="selector-class">.same</span>(<span class="number">100px</span>,<span class="number">100px</span>,blue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.inner2</span>&#123;</span><br><span class="line">        <span class="selector-class">.same</span>(<span class="number">200px</span>,<span class="number">200px</span>,purple);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: purple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner2</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="带参数并且有默认值的混合"><a href="#带参数并且有默认值的混合" class="headerlink" title="带参数并且有默认值的混合"></a>带参数并且有默认值的混合</h2><ul><li><p>如下所示：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.same</span>(<span class="variable">@w</span>:<span class="number">100px</span>,<span class="variable">@h</span>:<span class="number">100px</span>,<span class="variable">@c</span>:green)&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@h</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">@c</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="selector-class">.inner</span>&#123;</span><br><span class="line">        <span class="selector-class">.same</span>(<span class="number">100px</span>,<span class="number">100px</span>,blue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.inner2</span>&#123;</span><br><span class="line">        <span class="selector-class">.same</span>(<span class="number">200px</span>,<span class="number">200px</span>,purple);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="命名函数"><a href="#命名函数" class="headerlink" title="命名函数"></a>命名函数</h2><ul><li><p>通俗地讲，就是可以使用名值对传参</p><ul><li><p>编译前：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.same</span>(<span class="variable">@w</span>:<span class="number">100px</span>,<span class="variable">@h</span>:<span class="number">100px</span>,<span class="variable">@c</span>:green)&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@h</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">@c</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="selector-class">.inner</span>&#123;</span><br><span class="line">        <span class="selector-class">.same</span>(<span class="variable">@c</span>:black);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.inner2</span>&#123;</span><br><span class="line">        <span class="selector-class">.same</span>(<span class="variable">@c</span>:<span class="number">#bfa</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner2</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><ul><li><p>less中也存在类似java的引包机制，可以将有相似内容的样式写在一个单独的less文件中，然后主less文件通过<code>@import &quot;包的路径&quot;;</code>来引用</p></li><li><p>匹配模式第一个参数可以是字符串形参，通过混合的第一个字符串形参,来确定具体要执行哪一个同名混合</p></li><li><p>在一个less文件中，如果要定义的匹配模式中有相同部分，可以将相同部分提取出来，额外声明一个同名的匹配模式，参数必须为<code>@_</code>，这样在含字符串形参的匹配模式被调用时，这个匹配模式也会被调用，<code>@</code> ：表示匹配，<code>_</code>表示所有</p></li><li><p>如下案例，通过less来实现四个方向三角形的样式输出</p><ul><li><p>triangle.less</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span>(<span class="variable">@_</span>,<span class="variable">@w</span>,<span class="variable">@c</span>)&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.triangle</span>(L,<span class="variable">@w</span>,<span class="variable">@c</span>)&#123; <span class="comment">//L是字符串形参</span></span><br><span class="line">    <span class="attribute">border-width</span>: <span class="variable">@w</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent <span class="variable">@c</span> transparent transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(T,<span class="variable">@w</span>,<span class="variable">@c</span>)&#123;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="variable">@w</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent transparent <span class="variable">@c</span> transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(B,<span class="variable">@w</span>,<span class="variable">@c</span>)&#123;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="variable">@w</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="variable">@c</span> transparent transparent transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(R,<span class="variable">@w</span>,<span class="variable">@c</span>)&#123;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="variable">@w</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent transparent transparent <span class="variable">@c</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>style.less</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;triangle.less&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="selector-class">.inner</span>&#123;</span><br><span class="line">        <span class="selector-class">.triangle</span>(R,<span class="number">30px</span>,blue)<span class="comment">//修改第一个参数调整方向</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最终样式表style.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent transparent blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="arguments变量"><a href="#arguments变量" class="headerlink" title="arguments变量"></a>arguments变量</h2><ul><li><p>将参数列表的所有参数依次填入<code>@arguments</code>处</p><ul><li><p>编译前：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(<span class="variable">@1</span>,<span class="variable">@2</span>,<span class="variable">@3</span>)&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner</span>&#123;</span><br><span class="line">    <span class="selector-class">.border</span>(<span class="number">1px</span>, solid, black)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="Less的运算"><a href="#Less的运算" class="headerlink" title="Less的运算"></a>Less的运算</h1><ul><li>只可以作加减乘除</li><li>计算的一方带单位即可</li></ul><h1 id="Less的继承"><a href="#Less的继承" class="headerlink" title="Less的继承"></a>Less的继承</h1><ul><li><p>继承的意义：如果不用继承，相同的样式即使是使用混合，编译结束后的CSS文件中也不会将共同代码放在以逗号链接的共同样式集中，这会使CSS文件更大，增加浏览器的负担</p></li><li><p>继承类不允许存在参数</p></li><li><p>继承时加<code>all</code>将会继承包括伪类的样式</p></li><li><p>性能比混合高，灵活度比混合低</p><p><code>:extend(.center all);</code> </p><ul><li><p>center.less</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="comment">//要加!important,不然编译后会被下面的样式覆盖</span></span><br><span class="line">    <span class="attribute">background-color</span>: crimson <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mixin.less</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;center.less&quot;</span>;</span><br><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="selector-class">.inner</span>&#123;</span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.center</span> <span class="keyword">all</span>);  <span class="comment">//加all表示将所有状态全部拿下来，包括hover</span></span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: chartreuse;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: chocolate;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mixin.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span>,</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: crimson <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: chartreuse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.inner</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: chocolate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mixin.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">            inner1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">            inner2</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>如图：</p><p><img src="https://blog.ply.cool/image/image-20210522003053428.png" alt="image-20210522003053428"></p><p><img src="https://blog.ply.cool/image/image-20210522003106918.png" alt="image-20210522003106918"></p></li></ul><h1 id="Less避免编译"><a href="#Less避免编译" class="headerlink" title="Less避免编译"></a>Less避免编译</h1><ul><li><p>使用<code>~“内容”</code>避免编译</p><ul><li><p>编译前</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100</span> * <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="string">~&quot;cacl(100px + 100)&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1000px</span>;</span><br><span class="line">  padding: cacl(100px + 100);//将交给浏览器去计算</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Less </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript BOM与JSON</title>
      <link href="article/17c0953f.html"/>
      <url>article/17c0953f.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是BOM"><a href="#什么是BOM" class="headerlink" title="什么是BOM"></a>什么是BOM</h1><ul><li><p>浏览器对象模型</p></li><li><p>BOM可以使我们通过JS来操作浏览器</p></li><li><p>在BOM中为我们提供了一组对象，用来完成对浏览器的操作</p></li><li><p>BOM对象</p><ul><li><p>Window</p><ul><li>代表的是整个浏览器的窗口，同时window也是网页中的全局对象</li></ul></li><li><p>Navigator</p><ul><li>代表的是当前浏览器的信息，通过该对象可以识别不同的浏览器</li></ul></li><li><p>Location</p><ul><li>代表浏览器的地址栏信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面</li></ul></li><li><p>History</p><ul><li><p>代表浏览器的历史记录，可以通过该对象操作浏览器的历史记录</p><p>由于隐私的原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页，而且该操作只在当次访问时有效</p></li></ul></li><li><p>Screen</p><ul><li>代表用户的屏幕的相关信息，通过该对象可以获取到用户显示器的相关信息</li></ul></li></ul></li><li><p>Navigator，Location，History，Screen都是作为window对象的属性保存的</p><p>可以通过window对象来使用，也可以直接使用</p></li></ul><h1 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h1><ul><li>由于历史原因，Navigator对象的大部分属性都已经不能帮助我们识别浏览器了</li><li>一般我们只会使用<code>userAgent</code>来判断浏览器的信息<ul><li>userAgent是一个字符串，这个字符串中包含了用来描述浏览器信息的内容</li><li>不同的浏览器会有不同的userAgent</li></ul></li></ul><h1 id="History"><a href="#History" class="headerlink" title="History"></a>History</h1><ul><li><p>可以操作浏览器向前或向后翻页</p></li><li><p>length</p><ul><li>属性，可以获取到当次访问链接的数量</li></ul></li><li><p>back()</p><ul><li>方法，可以回退到上一个页面，作用和浏览器的回退按钮一样</li></ul></li><li><p>forward()</p><ul><li>方法，可以跳转到下一个页面，作用和浏览器的前进按钮一样</li></ul></li><li><p>go()</p><ul><li><p>可以跳转到指定页面</p></li><li><p>它需要一个整数作为参数</p><p>1：表示向前跳转一个页面 相当于<code>farward()</code> </p><p>2：表示向前跳转两个页面</p><p>-1：表示向后跳转一个页面 相当于<code>back()</code> </p><p>-2：表示向后跳转两个页面</p></li></ul></li></ul><h1 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h1><ul><li><p>如果直接打印<code>location</code>，则可以获取到当前页面的完整路径</p></li><li><p>如果直接将<code>location</code>属性修改为一个完整的路径，或相对路径</p><p>则页面会自动跳转到该路径</p><p>并且会生成相应的历史记录</p></li><li><p>assgin()</p><ul><li>用来跳转到其他的页面，作用和直接修改<code>location</code>一样</li></ul></li><li><p>reload()</p><ul><li>用于重新加载当前页面，作用和刷新一样</li><li>如果在方法中，传递一个<code>true</code>作为参数，则会强制清空缓存刷新页面</li></ul></li><li><p>replace()</p><ul><li><p>可以使用一个新的页面替换当前页面，调用完毕也会跳转页面</p><p>不会生成历史记录，不能使用回退按钮回退</p></li></ul></li></ul><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><ul><li>JS的程序执行速度是非常非常快的</li><li>如果希望一段程序可以每间隔一段时间调用一次，可以使用定时调用</li></ul><h2 id="定时调用"><a href="#定时调用" class="headerlink" title="定时调用"></a>定时调用</h2><h3 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a>setInterval()</h3><ul><li>定时调用</li><li>可以将一个函数每隔一段时间执行一次</li><li>参数：<ol><li>回调函数，该函数每隔一段时间被调用一次</li><li>每次调用间隔的时间，单位是毫秒</li></ol></li><li>返回值：<ul><li>返回一个Number类型的数据</li><li>这个数字作为定时器的唯一标识</li></ul></li></ul><h3 id="clearInterval"><a href="#clearInterval" class="headerlink" title="clearInterval()"></a>clearInterval()</h3><ul><li><p>可以用来关闭一个定时器</p></li><li><p>方法中需要一个定时器的标识作为参数，这样将关闭定时器对应的定时器</p></li><li><p>可以接收任意参数</p><p>如果参数是一个有效的定时器标识，则停止对应的定时器</p><p>如果参数不是一个有效的标识，则什么也不做</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> count = <span class="built_in">document</span>.getElementById(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                count.innerHTML = num++;</span><br><span class="line">                <span class="keyword">if</span>(num == <span class="number">11</span>)&#123;</span><br><span class="line">                    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="number">500</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1 id=<span class="string">&quot;count&quot;</span>&gt;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>上述程序将在页面中输出1到10，每隔半秒输出一次</p><h2 id="延时调用"><a href="#延时调用" class="headerlink" title="延时调用"></a>延时调用</h2><ul><li>延时调用一个函数不马上执行，而是隔一段时间以后再执行，而且只会执行一次</li></ul><blockquote><p>延时调用和定时调用的区别：</p><p>定时调用会执行多次，而延时调用只会执行一次</p></blockquote><ul><li>延时调用与定时调用语法几乎相同，在实际开发中是可以互相代替的</li></ul><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h3><h3 id="clearTimeout"><a href="#clearTimeout" class="headerlink" title="clearTimeout()"></a>clearTimeout()</h3><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><ul><li><p>JSON:    JS对象表示法</p></li><li><p>JS中的对象只有JS认识，别的语言都不认识</p></li><li><p>JSON就是一个特殊格式的字符串，这个字符串可以被任何语言所识别</p><p>并且可以转换为任意语言中的对象</p></li><li><p>JSON在开发中主要用来数据的交互</p></li><li><p>JSON和JS对象的格式一样，只不过JSON字符串的属性名必须加双引号</p><p>其它和JS语法一致</p></li></ul><h2 id="JSON分类"><a href="#JSON分类" class="headerlink" title="JSON分类"></a>JSON分类</h2><ul><li>对象<code>&#123;&#125;</code> <ul><li><code>var obj = &#39;&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;&#39;;</code> </li></ul></li><li>数组<code>[]</code> <ul><li><code>var arr = &#39;[1,2,3,&quot;hello&quot;,true]&#39;;</code> </li></ul></li></ul><h2 id="JSON中允许的值"><a href="#JSON中允许的值" class="headerlink" title="JSON中允许的值"></a>JSON中允许的值</h2><ul><li>字符串</li><li>数组</li><li>布尔值</li><li>null</li><li>对象（不包括函数）</li><li>数组</li></ul><h2 id="将JSON字符串转换为JS中的对象"><a href="#将JSON字符串转换为JS中的对象" class="headerlink" title="将JSON字符串转换为JS中的对象"></a>将JSON字符串转换为JS中的对象</h2><ul><li><p>在JS中，为我们提供了一个工具类，就叫JSON</p><p>这个对象可以帮助我们将一个JSON转换为JS对象，也可以将一个JS对象转换为JSON</p></li></ul><h3 id="JSON-–-gt-JS对象"><a href="#JSON-–-gt-JS对象" class="headerlink" title="JSON –&gt; JS对象"></a>JSON –&gt; JS对象</h3><ul><li><p><code>JSON.parse()</code> </p><ul><li>可以将JSON字符串转换为JS对象</li><li>它需要一个JSON字符串作为参数，会将字符串转换为JS对象并返回</li></ul><p><code>var o = JSON.parse(obj);</code> </p><p><code>var o2 = JSON.parse(arr);</code> </p></li></ul><h3 id="JS对象-–-gt-JSON"><a href="#JS对象-–-gt-JSON" class="headerlink" title="JS对象 –&gt; JSON"></a>JS对象 –&gt; JSON</h3><ul><li><code>JSON.stringify()</code> <ul><li>可以将一个JS对象转换为JSON字符串</li><li>它需要一个JS对象作为参数，会将JS对象转换为JSON字符串并返回</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> BOM </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 事件</title>
      <link href="article/15ce1246.html"/>
      <url>article/15ce1246.html</url>
      
        <content type="html"><![CDATA[<h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><ul><li><p>当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递进响应函数</p></li><li><p>在事件对象中封装了当前事件相关的一切信息</p><p>比如：鼠标的坐标，键盘那个按键被按下，鼠标滚轮滚动的方向……</p></li></ul><p><img src="https://blog.ply.cool/image/image-20210516232206338.png" alt="image-20210516232206338"></p><h1 id="鼠标坐标显示练习"><a href="#鼠标坐标显示练习" class="headerlink" title="鼠标坐标显示练习"></a>鼠标坐标显示练习</h1><h2 id="clientX，clientY"><a href="#clientX，clientY" class="headerlink" title="clientX，clientY"></a>clientX，clientY</h2><ul><li>分别获取鼠标指针的水平坐标，垂直坐标</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//当鼠标在areaDiv中移动时，在showMsg中来显示坐标</span></span><br><span class="line">            <span class="keyword">var</span> areaDiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;areaDiv&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> showMsg = <span class="built_in">document</span>.getElementById(<span class="string">&quot;showMsg&quot;</span>);</span><br><span class="line">            areaDiv.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> x = event.clientX;</span><br><span class="line">                <span class="keyword">var</span> y = event.clientY;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//在showMsg中显示鼠标的坐标</span></span><br><span class="line">                showMsg.innerHTML = <span class="string">&quot;x = &quot;</span>+ x + <span class="string">&quot; , y = &quot;</span>+ y;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #areaDiv&#123;</span><br><span class="line">            width: 600px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            border: 2px black solid;</span><br><span class="line">            margin: <span class="number">0</span> auto;</span><br><span class="line">        &#125;</span><br><span class="line">        #showMsg&#123;</span><br><span class="line">            margin: 20px auto;</span><br><span class="line">            width: 600px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            border: 2px black solid;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;areaDiv&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;showMsg&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210516233440131.png" alt="image-20210516233440131"></p><p>亲自试一试：<a href="https://blog.ply.cool/normal/event.html">鼠标坐标显示练习</a></p><h1 id="div跟随鼠标移动练习"><a href="#div跟随鼠标移动练习" class="headerlink" title="div跟随鼠标移动练习"></a>div跟随鼠标移动练习</h1><ul><li><code>clientX</code>，<code>clientY</code>用于获取鼠标在当前可见窗口的坐标</li><li><code>div</code>的偏移量，是相对整个页面的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #box1&#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: chartreuse;</span><br><span class="line">            position: absolute;</span><br><span class="line">        &#125;</span><br><span class="line">        body&#123;</span><br><span class="line">            height: 3000px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> left = event.pageX;</span><br><span class="line">                <span class="keyword">var</span> top = event.pageY;</span><br><span class="line">                <span class="comment">//设置偏移量</span></span><br><span class="line">                box1.style.left = left + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">                box1.style.top = top + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210517000310300.png" alt="image-20210517000310300"></p><p>亲自试一试：<a href="https://blog.ply.cool/normal/divmouse.html">div跟随鼠标移动练习</a></p><h1 id="事件的冒泡（Bubble）"><a href="#事件的冒泡（Bubble）" class="headerlink" title="事件的冒泡（Bubble）"></a>事件的冒泡（Bubble）</h1><ul><li><p>所谓的冒泡指的就是事件的向上传导，当后代元素上的事件被触发时，其祖先元素的相同事件也会被触发</p></li><li><p>在开发中，大部分情况冒泡都是有用的，如果不希望发生事件冒泡可以通过事件对象来取消冒泡</p></li><li><p>可以将事件对象的<code>cancelBubble</code>设置为<code>true</code>，即可取消冒泡</p><p><code>event.cancelBubble = true;</code> </p></li></ul><h1 id="事件的委派"><a href="#事件的委派" class="headerlink" title="事件的委派"></a>事件的委派</h1><ul><li>指将事件统一绑定给元素的共同祖先元素，这样当后代元素上的事件被触发时，会一直冒泡到祖先元素，从而通过祖先元素的响应函数来处理事件</li><li>事件的委派是利用了冒泡，通过委派可以减少事件绑定的次数，提高程序性能</li><li>事件中<code>target</code>表示触发事件的对象</li></ul><h1 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h1><ul><li><p>使用 对象.事件 = 函数 的形式绑定响应函数</p><p>它只能同时为一个元素的一个事件绑定一个响应函数</p><p>不能绑定多个，如果绑定多个，后面的会覆盖掉前面函数</p></li><li><p><code>addEventListener()</code> </p><p>这个方法也可以为元素绑定响应函数</p><ul><li>参数：<ol><li>事件的字符串，不要on</li><li>回调函数，当事件触发时该函数会被调用</li><li>是否在捕获阶段触发事件，需要一个布尔值，一般传<code>false</code> </li></ol></li></ul></li><li><p>使用<code>addEventListener()</code>可以同时为一个元素的相同事件同时绑定多个响应函数</p><p>这样当事件被触发时，响应函数将会按照函数的绑定顺序执行</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn01 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn01&quot;</span>);</span><br><span class="line">btn01.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line">btn01.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="number">2</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line">btn01.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="number">3</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>上述例子将会分别弹出3个警告框</p><ul><li><p>使用<code>addEventListener()</code>方法绑定响应函数，取消默认行为时不能使用<code>return false</code></p><p>需要使用<code>event.preventDefault();</code></p></li></ul><h1 id="拖拽练习"><a href="#拖拽练习" class="headerlink" title="拖拽练习"></a>拖拽练习</h1><ul><li>拖拽流程<ol><li>当鼠标在被拖拽元素上按下时，开始拖拽 <code>onmousedown</code> </li><li>当鼠标移动时被拖拽的元素跟随鼠标移动 <code>onmousemove</code> </li><li>当鼠标松开时，被拖拽元素固定在当前位置 <code>onmouseup</code> </li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #box1&#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: red;</span><br><span class="line">            position: absolute;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line">            box1.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> ol = event.clientX - box1.offsetLeft;</span><br><span class="line">                <span class="keyword">var</span> ot = event.clientY - box1.offsetTop;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> left = event.clientX - ol;</span><br><span class="line">                    <span class="keyword">var</span> top = event.clientY - ot;</span><br><span class="line"></span><br><span class="line">                    box1.style.left = left + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">                    box1.style.top = top + <span class="string">&quot;px&quot;</span>;</span><br><span class="line"></span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span><br><span class="line">                    <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>亲自试一试：<a href="https://blog.ply.cool/normal/drag.html">拖拽练习</a></p><h1 id="滚轮的事件"><a href="#滚轮的事件" class="headerlink" title="滚轮的事件"></a>滚轮的事件</h1><ul><li><p><code>onwheel</code>即滚轮事件</p></li><li><p><code>event.wheelDelta</code>可以获取滚轮滚动的方向</p><p>向上滚 ：<code>120</code>    向下滚：<code>-120</code> </p><p><code>wheelDelta</code>不看大小，只看正负</p><p>火狐使用<code>event.detail</code> </p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #box1&#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line">            box1.onwheel = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(event.wheelDelta &gt; <span class="number">0</span> || event.detail &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    box1.style.height = box1.clientHeight - <span class="number">30</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    box1.style.height = box1.clientHeight + <span class="number">30</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//取消浏览器滚轮默认事件</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>亲自试一试：<a href="https://blog.ply.cool/normal/scroll.html">滚轮的事件</a></p><h1 id="键盘的事件"><a href="#键盘的事件" class="headerlink" title="键盘的事件"></a>键盘的事件</h1><ul><li><p><code>onkeydown</code> </p><p>按键被按下</p><p>如果按着某个按键不松手，则事件会一直触发</p><ul><li><p>通过keyCode来获取按键的编码<code>event.keyCode</code> </p></li><li><p>altKey，ctrlKey，shiftKey</p><p>这三个按键用来判断alt，ctrl和shift是否被按下</p><p>如果按下则返回true，否则返回false</p></li></ul></li><li><p><code>onkeyup</code> </p><p>按键被松开</p></li><li><p>键盘事件一般绑定给一些能获取到焦点的对象或者是document</p></li><li><p>键盘移动div（含shift加速）</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #info&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">        #box1&#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: red;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 0px;</span><br><span class="line">            top: 0px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line">            <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> speed = <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">if</span>(event.shiftKey)&#123;</span><br><span class="line">                    speed = <span class="number">50</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">switch</span>(event.keyCode)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">                        box1.style.left = box1.offsetLeft - speed + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">                        box1.style.top = box1.offsetTop - speed + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">                        box1.style.left = box1.offsetLeft + speed + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">                        box1.style.top = box1.offsetTop + speed + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;info&quot;</span>&gt;</span><br><span class="line">        &lt;div&gt;→ ← ↑ ↓控制移动&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;按住shift键+方向键加速前进&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>亲自试一试：<a href="https://blog.ply.cool/normal/keyboard.html">键盘移动div</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript CSS相关操作</title>
      <link href="article/6fe37bd8.html"/>
      <url>article/6fe37bd8.html</url>
      
        <content type="html"><![CDATA[<h1 id="通过JS读取修改元素的样式"><a href="#通过JS读取修改元素的样式" class="headerlink" title="通过JS读取修改元素的样式"></a>通过JS读取修改元素的样式</h1><ul><li><p>读取：<code>元素.style.样式名</code> </p></li><li><p>修改：<code>元素.style.样式名 = 样式值</code> </p></li><li><p>注意：</p><p>如果CSS的样式名中含有<code>-</code>，这种名称在JS中是不合法的</p><p>比如<code>background-color</code> </p><p>需要将这种样式修改为驼峰命名法：去掉<code>-</code>，将<code>-</code>后的字母大写</p></li><li><p>我们通过<code>style</code>属性设置的样式都是内联样式</p><p>内联样式有较高的优先级，所以通过JS修改的样式往往会立即显示</p></li><li><p>但是如果在样式中写了<code>!important</code>，则此时样式会有最高的优先级</p><p>即使通过JS也不能覆盖该样式，此时将导致JS修改样式失效</p><p>所以尽量不要为样式添加<code>!important</code> </p></li><li><p>通过<code>style</code>属性设置和读取的都是内联样式</p><p>无法读取样式表中的样式</p></li></ul><h1 id="读取元素的当前显示样式"><a href="#读取元素的当前显示样式" class="headerlink" title="读取元素的当前显示样式"></a>读取元素的当前显示样式</h1><ul><li><p><del><code>元素.currentStyle.样式名</code></del></p><p>只有IE支持！！！</p></li><li><p><code>getComputedStyle()</code>这个方法可以获取当前样式，</p><p>这个方法是window的方法，可以直接使用</p><p>需要两个元素：</p><ul><li>第一个：要获取样式的元素</li><li>第二个：可以传递一个伪元素，一般都传<code>null</code> </li></ul><p>该方法会返回一个对象，对象中封装了当前元素对应的样式</p><p>可以通过<code>对象.样式名</code>来读取样式</p><p>如果获取的样式没有设置，则会获取到真实的值，而不是默认值</p><ul><li>比如：没有设置<code>width</code>，它不会获取到<code>auto</code>，而是一个长度</li><li><code>getComputedStyle(box1,null).width</code> </li></ul></li><li><p>通过<code>currentStyle</code>和<code>getComputedStyle()</code>读取到的样式都是只读的</p><p>要更改样式，只能通过style属性</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #box1&#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> btn01 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn01&quot;</span>);</span><br><span class="line">            btn01.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                box1.style.width = <span class="string">&quot;300px&quot;</span>;</span><br><span class="line">                box1.style.height = <span class="string">&quot;300px&quot;</span>;</span><br><span class="line">                box1.style.backgroundColor = <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">//点击btn02，读取元素的样式</span></span><br><span class="line">            <span class="keyword">var</span> btn02 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn02&quot;</span>);</span><br><span class="line">            btn02.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert(getComputedStyle(box1,<span class="literal">null</span>).backgroundColor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn01&quot;</span>&gt;点我一下&lt;/button&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn02&quot;</span>&gt;点我一下<span class="number">2</span>&lt;/button&gt;</span><br><span class="line">    &lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="clientWidth，clientHeight"><a href="#clientWidth，clientHeight" class="headerlink" title="clientWidth，clientHeight"></a>clientWidth，clientHeight</h2><ul><li>这两个属性可以获取元素的可见宽度和高度</li><li>这两个属性都是不带px的，返回的都是一个数字，可以直接进行计算</li><li>会获取元素的宽度和高度，包括内容区和内边距</li><li>这些属性都是只读的，不能修改</li></ul><h2 id="offsetWidth，offsetHeight"><a href="#offsetWidth，offsetHeight" class="headerlink" title="offsetWidth，offsetHeight"></a>offsetWidth，offsetHeight</h2><ul><li>获取元素的整个宽度和高度，包括内容区，内边距和边框</li><li>这两个属性都是不带px的，返回的都是一个数字，可以直接进行计算</li><li>这些属性都是只读的，不能修改</li></ul><h2 id="offsetParent"><a href="#offsetParent" class="headerlink" title="offsetParent"></a>offsetParent</h2><ul><li>可以获取到当前元素的定位父元素</li><li>会获取到离当前元素最近的开启了定位的祖先元素</li></ul><h2 id="offsetLeft，offsetTop"><a href="#offsetLeft，offsetTop" class="headerlink" title="offsetLeft，offsetTop"></a>offsetLeft，offsetTop</h2><ul><li><code>offsetLeft</code>当前元素相对于其定位父元素的水平偏移量</li><li><code>offsetTop</code>当前元素相对于其定位父元素的垂直偏移量</li></ul><h2 id="scrollWidth，scollHeight"><a href="#scrollWidth，scollHeight" class="headerlink" title="scrollWidth，scollHeight"></a>scrollWidth，scollHeight</h2><ul><li>可以获取元素整个滚动区域的宽度和高度</li></ul><h2 id="scrollLeft，scrollTop"><a href="#scrollLeft，scrollTop" class="headerlink" title="scrollLeft，scrollTop"></a>scrollLeft，scrollTop</h2><ul><li>可以获取水平滚动条，垂直滚动条滚动距离</li></ul><h1 id="重要结论"><a href="#重要结论" class="headerlink" title="重要结论"></a>重要结论</h1><ul><li><p>当满足<code>scrollHeight - scrollTop == clientHeight</code> </p><p>说明垂直滚动条滚到底了</p></li><li><p>当满足<code>scollWidth - scrollLeft == clientWidth</code> </p><p>说明水平滚动条滚到底了</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript DOM</title>
      <link href="article/a3b68a60.html"/>
      <url>article/a3b68a60.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h1><ul><li>DOM，全称Document Object Model文档对象模型</li><li>JS中通过DOM来对HTML文档进行操作。只要了解了DOM就可以随心所欲的操作WEB页面</li><li>文档<ul><li>文档表示的就是整个HTML网页文档</li></ul></li><li>对象<ul><li>对象表示将网页中的每一个部分都转换为了一个对象</li></ul></li><li>模型<ul><li>使用模型来表示对象之间的关系，这样方便我们获取对象</li></ul></li></ul><p><img src="https://blog.ply.cool/image/image-20210508211556802.png" alt="image-20210508211556802"></p><h2 id="简例"><a href="#简例" class="headerlink" title="简例"></a>简例</h2><ul><li><p>浏览器已经为我们提供了文档节点对象，这个对象是window属性</p><p>可以在页面中直接使用，文档节点代表的是整个网页</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;我是一个按钮&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//获取到button对象</span></span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(btn.innerHTML);</span><br><span class="line"><span class="comment">//修改按钮的文字</span></span><br><span class="line">btn.innerHTML = <span class="string">&quot;I&#x27;m Button&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210508212848166.png" alt="image-20210508212848166"></p><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><ul><li><p>事件，就是用户和浏览器之间的交互行为</p><ul><li>比如：点击按钮，鼠标移动，关闭窗口……</li></ul></li><li><p>我们可以在事件对应的属性中设置一些JS代码</p></li><li><p>当这些事件被触发时，这些代码将会执行</p></li><li><p><code>&lt;button id=&quot;btn&quot; onmousemove=&quot;alert(&#39;讨厌，你点我干嘛！&#39;)&quot;&gt;我是一个按钮&lt;/button&gt;</code> </p><p>这种写法我们称为结构和行为耦合，不方便维护，不推荐使用</p></li><li><p>可以为按钮的对应事件绑定处理函数的形式来响应事件</p><ul><li>这样当事件被触发时，其对应的函数将会被调用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;我是一个按钮&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//获取到button对象</span></span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"><span class="comment">//绑定一个单击事件</span></span><br><span class="line"><span class="comment">//像这种为单击事件绑定的函数，我们称之为单击响应函数</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;你还点~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="文档的加载"><a href="#文档的加载" class="headerlink" title="文档的加载"></a>文档的加载</h1><ul><li><p>浏览器在加载页面时，是按照自上向下的顺序加载的</p></li><li><p>读取到一行就运行一行，如果将script标签写到页面的上面</p><p>在执行代码时，页面还没有加载，DOM对象也没有加载</p><p>会导致无法获取到DOM对象 </p></li></ul><ol><li><p>将JS代码编写到下面就是为了可以在页面加载完毕以后再执行代码</p></li><li><p>onload事件会在整个页面加载完成后才触发</p><p>这样可以确保代码执行时，所有的DOM对象都已经加载完毕了</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//为window绑定一个onload事件</span></span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;你还点~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>最优的解决方法是1，性能！！！用户体验！！！（其实差别不是太大）</li></ul><h1 id="DOM查询"><a href="#DOM查询" class="headerlink" title="DOM查询"></a>DOM查询</h1><h2 id="获取元素节点"><a href="#获取元素节点" class="headerlink" title="获取元素节点"></a>获取元素节点</h2><ul><li>通过document对象调用</li></ul><ol><li><p><code>getElementById()</code> </p><ul><li>通过id属性获取一个元素节点对象</li></ul></li><li><p><code>getElementsByTagName()</code> </p><ul><li>通过标签名获取一组元素节点对象</li><li>这个方法会给我们返回一个类数组对象，所有查询到的元素都会封装到对象中</li><li>即使查询到的元素只有一个，也会封装到数组中并返回</li></ul></li><li><p><code>getElementsByName()</code> </p><ul><li><p>通过name属性获取一组元素节点对象</p></li><li><p>如果需要读取元素节点属性：</p><p>直接使用 <code>元素.属性名</code> </p><p>例子：<code>元素.id</code> <code>元素.name</code> <code>元素.value</code> </p><p>注意：class属性不能采用这种方式</p><p>读取class属性时需要使用 <code>元素.className</code> </p></li></ul></li></ol><h2 id="图片切换练习"><a href="#图片切换练习" class="headerlink" title="图片切换练习"></a>图片切换练习</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        *&#123;</span><br><span class="line">            margin: <span class="number">0</span>;</span><br><span class="line">            padding: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        img&#123;</span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 300px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #outer&#123;</span><br><span class="line">            width: 500px;</span><br><span class="line">            margin: 50px auto;</span><br><span class="line">            padding: 20px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            background-color: greenyellow;</span><br><span class="line">            border-radius: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             *点击按钮切换图片</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">//获取两个按钮</span></span><br><span class="line">            <span class="keyword">var</span> prev = <span class="built_in">document</span>.getElementById(<span class="string">&quot;prev&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> next = <span class="built_in">document</span>.getElementById(<span class="string">&quot;next&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//要切换图片就是要修改img标签的src属性</span></span><br><span class="line">            <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;img&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//创建一个数组，用来保存图片的路径</span></span><br><span class="line">            <span class="keyword">var</span> imgArr = [<span class="string">&quot;img/1.jpg&quot;</span> , <span class="string">&quot;img/2.jpg&quot;</span>,<span class="string">&quot;img/3.jpg&quot;</span>,<span class="string">&quot;img/4.jpg&quot;</span>,<span class="string">&quot;img/5.jpg&quot;</span>,];</span><br><span class="line">            <span class="comment">//创建一个变量，用来保存当前正在显示的图片的索引</span></span><br><span class="line">            <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取id为info的p元素</span></span><br><span class="line">            <span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">&quot;info&quot;</span>);</span><br><span class="line">            <span class="comment">//设置提示文字</span></span><br><span class="line">            info.innerHTML = <span class="string">&quot;一共&quot;</span> + imgArr.length + <span class="string">&quot;张图片，当前第&quot;</span> + (index+<span class="number">1</span>) + <span class="string">&quot;张&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//分别为两个按钮绑定单击响应函数</span></span><br><span class="line">            prev.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">//切换到上一张，index自减</span></span><br><span class="line">                index--;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    index = imgArr.length-<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                img.src = imgArr[index];</span><br><span class="line"></span><br><span class="line">                <span class="comment">//每次点击之后，重新设置信息</span></span><br><span class="line">                info.innerHTML = <span class="string">&quot;一共&quot;</span> + imgArr.length + <span class="string">&quot;张图片，当前第&quot;</span> + (index+<span class="number">1</span>) + <span class="string">&quot;张&quot;</span>;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">            next.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">//切换到下一张，index自增</span></span><br><span class="line">                index++;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(index &gt; imgArr.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    index = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                img.src = imgArr[index];</span><br><span class="line"></span><br><span class="line">                <span class="comment">//每次点击之后，重新设置信息</span></span><br><span class="line">                info.innerHTML = <span class="string">&quot;一共&quot;</span> + imgArr.length + <span class="string">&quot;张图片，当前第&quot;</span> + (index+<span class="number">1</span>) + <span class="string">&quot;张&quot;</span>;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;outer&quot;</span>&gt;</span><br><span class="line">        &lt;p id=<span class="string">&quot;info&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;img/1.jpg&quot;</span> alt=<span class="string">&quot;二次元&quot;</span>&gt;</span><br><span class="line">        &lt;button id=<span class="string">&quot;prev&quot;</span>&gt;上一张&lt;/button&gt;</span><br><span class="line">        &lt;button id=<span class="string">&quot;next&quot;</span>&gt;下一张&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210510215208181.png" alt="image-20210510215208181"></p><ul><li>亲自试一试：<a href="https://blog.ply.cool/normal/picture.html">图片切换练习</a></li></ul><h2 id="获取元素节点的子节点"><a href="#获取元素节点的子节点" class="headerlink" title="获取元素节点的子节点"></a>获取元素节点的子节点</h2><ul><li>通过具体的元素节点调用</li></ul><ol><li><code>getElementsByTagName()</code> <ul><li>方法，返回当前节点的指定标签名后代节点</li></ul></li><li><code>childNodes</code> <ul><li>属性，表示当前节点的所有子节点</li><li>会获取包含文本节点在内的所有子节点</li><li>DOM标签间的空白也会当成文本节点</li></ul></li><li>firstChild<ul><li>属性，表示当前节点的第一个子节点（包括空白文本节点）</li></ul></li><li>lastChild<ul><li>属性，表示当前节点的最后一个子节点（包括空白文本节点）</li></ul></li><li>children<ul><li>属性，可以获取当前元素的所有子元素（更推荐使用）</li></ul></li></ol><h2 id="获取父节点和兄弟节点"><a href="#获取父节点和兄弟节点" class="headerlink" title="获取父节点和兄弟节点"></a>获取父节点和兄弟节点</h2><ul><li>通过具体的节点调用</li></ul><ol><li>parentNode<ul><li>属性，表示当前节点的父节点</li></ul></li><li>previousSibling<ul><li>属性，表示当前节点的前一个兄弟节点</li></ul></li><li>nextSibling<ul><li>属性，表示当前节点的后一个兄弟节点</li></ul></li></ol><h1 id="全选练习"><a href="#全选练习" class="headerlink" title="全选练习"></a>全选练习</h1><blockquote><p>在事件的响应函数中，响应函数是给谁绑定的，this就是谁</p></blockquote><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//获取四个多选框items</span></span><br><span class="line">            <span class="keyword">var</span> items = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> checkedAllBox = <span class="built_in">document</span>.getElementById(<span class="string">&quot;checkedAllBox&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//全选按钮</span></span><br><span class="line">            <span class="keyword">var</span> checkedAllBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;checkedAllBtn&quot;</span>);</span><br><span class="line">            checkedAllBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">//遍历items</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">                    <span class="comment">//设置四个多选框变为选中状态</span></span><br><span class="line">                    items[i].checked = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//将全选，全不选设置为选中</span></span><br><span class="line">                checkedAllBox.checked = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//全不选按钮</span></span><br><span class="line">            <span class="keyword">var</span> checkedNoBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;checkedNoBtn&quot;</span>);</span><br><span class="line">            checkedNoBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">                    items[i].checked = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将全选，全不选设置为不选中</span></span><br><span class="line">                checkedAllBox.checked = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//反选按钮</span></span><br><span class="line">            <span class="keyword">var</span> checkedRevBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;checkedRevBtn&quot;</span>);</span><br><span class="line">            checkedRevBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">                    <span class="comment">/* if(items[i].checked)&#123;</span></span><br><span class="line"><span class="comment">                           items[i].checked = false;</span></span><br><span class="line"><span class="comment">                       &#125;else&#123;</span></span><br><span class="line"><span class="comment">                           items[i].checked = true;</span></span><br><span class="line"><span class="comment">                       &#125;</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    <span class="comment">//更简单的写法:</span></span><br><span class="line">                    items[i].checked = !items[i].checked;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将checkedAllBox设置为选中状态</span></span><br><span class="line">                checkedAllBox.checked = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; items.length; j++) &#123;</span><br><span class="line">                    <span class="comment">//只要有一个没选中就不是全选</span></span><br><span class="line">                    <span class="keyword">if</span>(!items[j].checked)&#123;</span><br><span class="line">                        checkedAllBox.checked = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//提交按钮</span></span><br><span class="line">            <span class="comment">//点击按钮后，将所有选中的多选框的value属性值弹出</span></span><br><span class="line">            <span class="keyword">var</span> sendBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;sendBtn&quot;</span>);</span><br><span class="line">            sendBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(items[i].checked == <span class="literal">true</span>)&#123;</span><br><span class="line">                        alert(items[i].value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//全选，全不选 多选框</span></span><br><span class="line">            checkedAllBox.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">                    items[i].checked = <span class="built_in">this</span>.checked;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//checkedAllBox与四个多选框同步</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">                items[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//将checkedAllBox设置为选中状态</span></span><br><span class="line">                    checkedAllBox.checked = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; items.length; j++) &#123;</span><br><span class="line">                        <span class="comment">//只要有一个没选中就不是全选</span></span><br><span class="line">                        <span class="keyword">if</span>(!items[j].checked)&#123;</span><br><span class="line">                            checkedAllBox.checked = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">        你爱好的运动是？</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> id=<span class="string">&quot;checkedAllBox&quot;</span>&gt;全选/全不选</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;items&quot;</span> value=<span class="string">&quot;足球&quot;</span>&gt;足球</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;items&quot;</span> value=<span class="string">&quot;篮球&quot;</span>&gt;篮球</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;items&quot;</span> value=<span class="string">&quot;羽毛球&quot;</span>&gt;羽毛球</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;items&quot;</span> value=<span class="string">&quot;乒乓球&quot;</span>&gt;乒乓球</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;checkedAllBtn&quot;</span> value=<span class="string">&quot;全 选&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;checkedNoBtn&quot;</span> value=<span class="string">&quot;全不选&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;checkedRevBtn&quot;</span> value=<span class="string">&quot;反 选&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;sendBtn&quot;</span> value=<span class="string">&quot;提 交&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210511233919405.png" alt="image-20210511233919405"></p><ul><li>亲自试一试：<a href="https://blog.ply.cool/normal/select.html">全选练习</a></li></ul><h1 id="DOM查询的其它方法"><a href="#DOM查询的其它方法" class="headerlink" title="DOM查询的其它方法"></a>DOM查询的其它方法</h1><ul><li><p>在document中有一个属性body，它保存的是body的引用</p><p><code>var body = document.body;</code> </p></li><li><p><code>document.documentElement;</code> 保存的是html根标签</p></li><li><p><code>document.all</code> 代表页面中所有元素</p></li><li><p>根据元素的class属性值查询一组元素节点对象</p><p>(不兼容IE8及以下浏览器)</p><p><code>var box1 = document.getElementsByClassName(&quot;box1&quot;);</code> </p></li><li><p><code>document.querySelector();</code> </p><p>需要一个选择器的字符串作为参数，可以根据一个CSS选择器来查询一个元素节点对象</p><p><code>var div = document.querySelector(&quot;.box1 div&quot;);</code> 会选中类名为box1下的div对象</p><p>使用该方法只会返回唯一一个元素，如果满足条件的元素有多个，那么它只会返回第一个</p></li><li><p><code>document.querySelectorAll();</code> </p><p>该方法与<code>querySelector()</code>用法类似</p><p>不同的是它会将符合条件的元素封装到一个数组中返回</p></li></ul><h1 id="DOM增删改"><a href="#DOM增删改" class="headerlink" title="DOM增删改"></a>DOM增删改</h1><ul><li><p>创建元素节点对象</p><p><code>document.createElement();</code>  </p><p>他需要一个标签名作为参数，将会根据该标签名创建元素节点对象</p><p>并将创建好的对象作为返回值返回</p><p>创建一个<code>&lt;li&gt;</code>：<code>var li = document.createElement(&quot;li&quot;);</code> </p></li><li><p>创建文本节点对象</p><p><code>document.createTextNode();</code> </p><p>可以用于创建一个文本节点对象</p><p>需要一个文本内容作为参数，将会根据该内容创建文本节点，并将新的节点返回</p><p>例：<code>var Text = document.createTextNode(&quot;广州&quot;);</code> </p></li><li><p>把新的子节点添加到指定节点</p><p><code>appendChild()</code> </p><ul><li><p>向一个父节点中添加一个新的子节点</p><p><code>父节点.appendChild(子节点);</code> </p><p><code>li.appendChild(Text)</code> </p></li></ul></li><li><p>在指定的子节点前面插入新节点</p><p><code>insertBefore()</code> </p><p><code>父节点.insertBefore(新节点,旧节点);</code> </p></li><li><p>替换子节点</p><p><code>replaceChild()</code> </p><p><code>父节点.replaceChild(新节点,旧节点);</code> </p></li><li><p>删除子节点</p><p><code>removeChild()</code> </p><p><code>父节点.removeChild(子节点);</code></p><p>更简单的方法：<code>子节点.parentNode.removeChild(子节点);</code> </p></li><li><p>读取某节点内的HTML代码</p><p><code>节点.innerHTML</code> </p></li><li><p>使用<code>innerHTML</code>也可以完成DOM的增删改的相关操作</p><p>例：<code>city.innerHTML += &quot;&lt;li&gt;广州&lt;/li&gt;&quot;;</code></p></li></ul><h1 id="添加删除记录练习"><a href="#添加删除记录练习" class="headerlink" title="添加删除记录练习"></a>添加删除记录练习</h1><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #employeeTable tr,#employeeTable td,#employeeTable th&#123;</span><br><span class="line">            border: 2px solid black;</span><br><span class="line">        &#125;</span><br><span class="line">        #employeeTable&#123;</span><br><span class="line">            margin-top: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">        table&#123;</span><br><span class="line">            border-collapse: collapse;</span><br><span class="line">            text-align: center;</span><br><span class="line">            margin: 0px auto;</span><br><span class="line">        &#125;</span><br><span class="line">        #formDiv&#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            border: 2px solid black;</span><br><span class="line">            padding: 10px;</span><br><span class="line">            position: relative;</span><br><span class="line">            left: <span class="number">50</span>%;</span><br><span class="line">            transform: translate(-<span class="number">50</span>%,50px);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;table id=<span class="string">&quot;employeeTable&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;Name&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;Email&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;Salary&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;&amp;nbsp;&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;Tom&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;tom@tom.com&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="number">5000</span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;deleteEmp?id=001&quot;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;Jerry&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;jerry@sohu.com&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="number">8000</span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;deleteEmp?id=002&quot;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;Bob&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;bob@tom.com&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="number">10000</span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;deleteEmp?id=003&quot;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">delA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> tr = <span class="built_in">this</span>.parentNode.parentNode;</span><br><span class="line">                <span class="comment">//删除前弹出一个提示框</span></span><br><span class="line">                <span class="keyword">var</span> flag = confirm(<span class="string">&quot;确认删除&quot;</span> + tr.getElementsByTagName(<span class="string">&quot;td&quot;</span>)[<span class="number">0</span>].innerHTML + <span class="string">&quot;吗？&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                    tr.parentNode.removeChild(tr);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//点击超链接后，超链接会跳转页面，这个是超链接的默认行为</span></span><br><span class="line">                <span class="comment">//可以通过在响应函数的最后return false来取消默认行为</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取所有的超链接</span></span><br><span class="line">        <span class="keyword">var</span> allA = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="comment">//为每个超链接都绑定一个单击响应函数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allA.length; i++) &#123;</span><br><span class="line">            allA[i].onclick = delA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//添加员工功能</span></span><br><span class="line">            <span class="keyword">var</span> addEmpButton = <span class="built_in">document</span>.getElementById(<span class="string">&quot;addEmpButton&quot;</span>);</span><br><span class="line">            addEmpButton.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">//获取新员工信息</span></span><br><span class="line">                <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">&quot;empName&quot;</span>).value;</span><br><span class="line">                <span class="keyword">var</span> email = <span class="built_in">document</span>.getElementById(<span class="string">&quot;email&quot;</span>).value;</span><br><span class="line">                <span class="keyword">var</span> salary = <span class="built_in">document</span>.getElementById(<span class="string">&quot;salary&quot;</span>).value;</span><br><span class="line">                <span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">&quot;tr&quot;</span>);</span><br><span class="line">                tr.innerHTML = <span class="string">&quot;&lt;td&gt;&quot;</span>+name+<span class="string">&quot;&lt;/td&gt;&quot;</span>+</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;&quot;</span>+email+<span class="string">&quot;&lt;/td&gt;&quot;</span>+</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;&quot;</span>+salary+<span class="string">&quot;&lt;/td&gt;&quot;</span>+</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;&lt;a href=&#x27;javascript:;&#x27;&gt;Delete&lt;/a&gt;&lt;/td&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">var</span> tbody = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;tbody&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">                tbody.appendChild(tr);</span><br><span class="line">                <span class="keyword">var</span> a = tr.getElementsByTagName(<span class="string">&quot;a&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">                a.onclick = delA;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id=<span class="string">&quot;formDiv&quot;</span>&gt;</span><br><span class="line">        &lt;h3&gt;添加新成员&lt;/h3&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;word&quot;</span>&gt;name:&lt;/td&gt;</span><br><span class="line">                &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;inp&quot;</span>&gt;</span><br><span class="line">                    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;empName&quot;</span> id=<span class="string">&quot;empName&quot;</span>&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;word&quot;</span>&gt;email:&lt;/td&gt;</span><br><span class="line">                &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;inp&quot;</span>&gt;</span><br><span class="line">                    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;email&quot;</span> id=<span class="string">&quot;email&quot;</span>&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;word&quot;</span>&gt;salary&lt;/td&gt;</span><br><span class="line">                &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;inp&quot;</span>&gt;</span><br><span class="line">                    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;salary&quot;</span> id=<span class="string">&quot;salary&quot;</span>&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td colspan=<span class="string">&quot;2&quot;</span> align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">                    &lt;button id=<span class="string">&quot;addEmpButton&quot;</span>&gt;</span><br><span class="line">                        Submit</span><br><span class="line">                    &lt;/button&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>输出结果如图：</p><p><img src="https://blog.ply.cool/image/image-20210515113859891.png" alt="image-20210515113859891"></p><p>亲自试一试：<a href="https://blog.ply.cool/normal/appeddelete.html">添加删除记录练习</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串与正则表达式</title>
      <link href="article/c427f472.html"/>
      <url>article/c427f472.html</url>
      
        <content type="html"><![CDATA[<h1 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h1><ul><li><p>在底层，字符串是以字符数组的形式保存的</p><p>例：<code>var str = &quot;hello&quot;;</code> </p><p>​    底层：<code>[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</code> </p></li><li><p>字符串的大部分方法对原字符串都不会产生影响</p></li><li><p>length属性</p><ul><li>用来获取字符串的长度</li></ul></li></ul><h2 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h2><ul><li><p>可以返回字符串中指定位置的字符</p></li><li><p>根据索引获取指定的字符</p></li><li><p>与<code>str.[]</code>得到的结果相同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">6</span>));</span><br><span class="line"><span class="built_in">console</span>.log(str[<span class="number">6</span>]);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210504154539963.png" alt="image-20210504154539963"></p></li></ul><h2 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt()"></a>charCodeAt()</h2><ul><li>可以返回字符串中指定位置的字符编码（Unicode编码）</li></ul><h2 id="fromCharCode"><a href="#fromCharCode" class="headerlink" title="fromCharCode()"></a>fromCharCode()</h2><ul><li><p>可以根据字符编码去获取字符</p></li><li><p>该方法是通过调用String的构造函数调用</p><p><code>var result = String.fromCharCode(20);</code> </p></li></ul><h2 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h2><ul><li><p>可以用来连接两个或多个字符串</p></li><li><p>作用和<code>+</code>一样</p><p><code>result = str.concat(&quot;你好&quot;,&quot;再见&quot;);</code> </p></li></ul><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h2><ul><li><p>该方法可以检索一个字符串中是否含有指定内容</p></li><li><p>如果字符串中含有该内容，则会返回其第一次出现的索引</p><p>如果没有找到指定的内容，则返回-1</p></li><li><p>可以指定第二个参数，指定开始查找的位置</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result1 = str.indexOf(<span class="string">&quot;H&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> result2 = str.indexOf(<span class="string">&quot;h&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> result3 = str.indexOf(<span class="string">&quot;l&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> result4 = str.indexOf(<span class="string">&quot;l&quot;</span>,<span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result1);</span><br><span class="line"><span class="built_in">console</span>.log(result2);</span><br><span class="line"><span class="built_in">console</span>.log(result3);</span><br><span class="line"><span class="built_in">console</span>.log(result4);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210504161200030.png" alt="image-20210504161200030"></p><h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h2><ul><li><p>该方法的用法和<code>indexOf()</code>一样</p><p>不同的是<code>indexOf()</code>是从前往后找</p><p>而<code>lastIndexOf()</code>是从后往前找</p></li><li><p>可以指定第二个参数，指定开始查找的位置</p></li></ul><h2 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h2><ul><li><p>可以从字符串中截取指定的内容</p></li><li><p>不会影响原字符串，而是将截取到的内容返回</p></li><li><p>参数：</p><ul><li><p>第一个：开始位置的索引（包括开始位置）</p></li><li><p>第二个：结束位置的索引（不包括结束位置）</p><p>如果省略第二个参数，则会截取到后边所有内容</p></li><li><p>也可以传递一个负数作为参数，负数的话将从后面开始计算</p></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result1 = str.slice(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> result2 = str.slice(<span class="number">1</span>,-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> result3 = str.slice(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result1);</span><br><span class="line"><span class="built_in">console</span>.log(result2);</span><br><span class="line"><span class="built_in">console</span>.log(result3);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210504162457012.png" alt="image-20210504162457012"></p><h2 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h2><ul><li><p>可以从字符串中截取指定的内容,与<code>slice()</code>类似</p></li><li><p>参数：</p><ul><li><p>第一个：开始位置的索引（包括开始位置）</p></li><li><p>第二个：结束位置的索引（不包括结束位置）</p></li><li><p>不同的是这个方法不能接受负值作为参数</p><p>如果传递了一个负值，则默认使用0</p></li><li><p>而且它还自动调整参数位置，如果第二个参数小于第一个参数，则自动交换</p></li></ul></li></ul><h2 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h2><ul><li>可以将一个字符串拆分为一个数组</li><li>参数：<ul><li>需要一个字符串作为参数，将会根据该字符串去拆分数组</li><li>如果传递一个空串作为参数，则会将每一个字符都拆分为数组中的每一个元素</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abc,def,ghi,jkl&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result = str.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> result2 = str.split(<span class="string">&quot;g&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="built_in">console</span>.log(result2);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210504164351708.png" alt="image-20210504164351708"></p><h2 id="toUpperCase-与toLowerCase"><a href="#toUpperCase-与toLowerCase" class="headerlink" title="toUpperCase()与toLowerCase()"></a>toUpperCase()与toLowerCase()</h2><ul><li><code>toUpperCase()</code>可以将字符串转换为大写并返回</li><li><code>toLowerCase()</code>可以将字符串转换为小写并返回</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;AbCdEfgHijKl&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result = str.toUpperCase();</span><br><span class="line"><span class="keyword">var</span> result2 = str.toLowerCase();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="built_in">console</span>.log(result2);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210504164857730.png" alt="image-20210504164857730"></p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul><li>正则表达式用于定义一些字符串的规则</li><li>将字符串中符合规则的内容提取出来</li></ul><h2 id="创建正则表达式对象"><a href="#创建正则表达式对象" class="headerlink" title="创建正则表达式对象"></a>创建正则表达式对象</h2><ul><li><p>语法：</p><p><code>var 变量 = new RegExp(&quot;正则表达式&quot;,&quot;匹配模式&quot;);</code> </p><p>使用<code>typeof</code>检查正则对象，会返回object</p></li><li><p>在构造函数中可以传递一个匹配模式作为第二个参数</p><p>可以是</p><ul><li><code>i</code> 忽略大小写</li><li><code>g</code> 全局匹配模式</li></ul></li></ul><h3 id="一般我们经常使用字面量来创建正则表达式"><a href="#一般我们经常使用字面量来创建正则表达式" class="headerlink" title="一般我们经常使用字面量来创建正则表达式"></a>一般我们经常使用字面量来创建正则表达式</h3><ul><li><p>语法：</p><p><code>var 变量 = /正则表达式/匹配模式</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var reg = new RegExp(&quot;a&quot;,&quot;i&quot;);</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/i</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="正则表达式的方法"><a href="#正则表达式的方法" class="headerlink" title="正则表达式的方法"></a>正则表达式的方法</h2><ul><li><p><code>test()</code></p><p>使用这个方法可以检查一个字符串是否符合正则表达式的规则</p><p>如果符合则返回<code>true</code>，否则返回<code>false</code> </p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个正则表达式可以检查一个字符串中是否含有a或A</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;i&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><ul><li><p>使用<code>|</code>表示或者的意思</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a|b|c/</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>[]</code>里的内容也是或的关系</p><p><code>[abcd] == a|b|c|d</code> </p><p><code>[a-z]</code>任意小写字母</p><p><code>[A-Z]</code>任意大写字母</p><p><code>[A-Za-z]</code>任意字母</p><p><code>[0-9]</code>任意数字</p><ul><li><p>检查一个字符串中是否含有abc或adc或aec</p><p><code>reg = /a[bde]c/;</code></p></li></ul></li><li><p><code>[^ ]</code>除了</p><p><code>reg = /[^ab]/;</code>除了a或b还有其它则为true</p><p><code>reg = /[^0-9]/;</code>除了数字还有其它则为true</p></li></ul><h1 id="字符串与正则相关的方法"><a href="#字符串与正则相关的方法" class="headerlink" title="字符串与正则相关的方法"></a>字符串与正则相关的方法</h1><h2 id="split-1"><a href="#split-1" class="headerlink" title="split()"></a>split()</h2><ul><li><p>方法中可以传递一个正则表达式作为一个参数，这样方法将会根据正则表达式去拆分字符串</p></li><li><p>这个方法即使不指定全局匹配，也会全都拆分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据任意字母来拆分字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;1a2b3c4d5e6f7&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result = str.split(<span class="regexp">/[a-z]/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210507213832867.png" alt="image-20210507213832867"></p></li></ul><h2 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h2><ul><li><p>可以搜索字符串中是否含有指定内容</p></li><li><p>如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到，则返回-1</p></li><li><p>他可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串</p></li><li><p><code>search()</code>只会查找第一个，即使设置全局匹配也没用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据任意字母来拆分字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello abc hello aec afc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result = str.search(<span class="string">&quot;ab&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">//搜索字符串中是否含有abc 或aec afc</span></span><br><span class="line"><span class="keyword">var</span> result2 = str.search(<span class="regexp">/a[bef]c/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result2);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210507215125679.png" alt="image-20210507215125679"></p></li></ul><h2 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h2><ul><li><p>可以根据正则表达式，从一个字符串中将符合条件的一个或多个内容提取出来</p></li><li><p>默认情况下，<code>match()</code>只会找到第一个符合要求的内容，找到以后就停止检索</p><p>我们可以设置正则表达式为全局匹配模式，这样就可以匹配到所有内容</p><p>可以为一个正则表达式设置多个匹配模式，且顺序无所谓</p></li><li><p><code>match()</code>会将匹配到的内容封装到一个数组中并返回，几十只查询到一个结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;1a2b3c4d5e6f7A8B9C&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/[a-z]/ig</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210507221425573.png" alt="image-20210507221425573"></p></li></ul><h2 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h2><ul><li><p>可以将字符串中指定的内容替换为新的内容</p></li><li><p>参数：</p><ol><li>被替换的内容，可以接受一个正则表达式作为参数</li><li>新的内容</li></ol></li><li><p>默认只会替换第一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;1a2b3c4d5e6f7A8B9C&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result1 = str.replace(<span class="regexp">/[a-z]/ig</span>,<span class="string">&quot;@_@&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//若替换为一个空串，则等于做删除操作</span></span><br><span class="line"><span class="keyword">var</span> result2 = str.replace(<span class="regexp">/[a-z]/ig</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result1);</span><br><span class="line"><span class="built_in">console</span>.log(result2);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210507222252563.png" alt="image-20210507222252563"></p></li></ul><h1 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h1><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><ul><li><p>通过量词可以设置一个内容出现的次数</p></li><li><p>量词只对它前边的一个内容生效</p><p>若想要对多个内容生效，需要用<code>()</code>将所指内容括起来</p></li><li><p><code>&#123;n&#125;</code>正好出现n次</p></li><li><p><code>&#123;m,n&#125;</code>出现m-n次</p></li><li><p><code>&#123;m,&#125;</code>m次以上</p></li><li><p><code>+</code>至少一个，相当于<code>&#123;1,&#125;</code> </p></li><li><p><code>*</code>0个或多个，相当于<code>&#123;0,&#125;</code> </p></li><li><p><code>?</code>0个或一个，相当于<code>&#123;0,1&#125;</code> </p></li><li><p><code>^</code>表示开头</p><p>例：<code>/^a/</code>表示以a开头</p></li><li><p><code>$</code>表示结尾</p><p>例：<code>/a$/</code>表示以a结尾</p></li><li><p>如果在正则表达式中同时使用<code>^ $</code>，则要求字符串必须完全符合正则表达式</p><p><code>/^a$/</code>表示字符串中只有一个a，这个a既是开头，也是结尾，同时成立</p><p><code>/^a|a$/</code>表示以a开头或以a结尾</p></li></ul><h2 id="特殊"><a href="#特殊" class="headerlink" title="特殊"></a>特殊</h2><ul><li><p><code>.</code>表示任意字符</p></li><li><p>在正则表达式中，使用<code>\</code>作为转义字符</p><p><code>\.</code>表示<code>.</code></p><p><code>\\</code>表示<code>\</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\./</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;b.&quot;</span>));    <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>要注意的是：</p><p>​    在字符串中如果要使用<code>\</code>，也需要<code>\\</code>，因为字符串中也需要转义，但实际上字符串中只有一个<code>\</code> </p></li><li><p>注意：</p><p>使用构造函数时，由于它的参数是一个字符串，而<code>\</code>是字符串中的转义字符</p><p>如果要使用<code>\</code>，则需要用<code>\\</code>来代替</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;\\.&quot;</span>);    <span class="comment">//验证是否含有.</span></span><br><span class="line">reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;\\\\&quot;</span>);   <span class="comment">//验证是否含有\</span></span><br></pre></td></tr></table></figure></li><li><p><code>\w</code>任意字母，数字，下划线<code>_</code> </p><p>相当于<code>[A-z0-9_]</code> </p></li><li><p><code>\W</code>除了字母，数字，下划线<code>_</code> </p><p>相当于<code>[^A-z0-9_]</code> </p></li><li><p><code>\d</code>任意数字</p><p>相当于<code>[0-9]</code> </p></li><li><p><code>\D</code>除了数字</p><p>相当于<code>[^0-9]</code> </p></li><li><p><code>\s</code>空格</p></li><li><p><code>\S</code>除了空格</p></li><li><p><code>\b</code>单词边界</p></li><li><p><code>\B</code>除了单词边界</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\bchild\b/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;hello child&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;hello children&quot;</span>));</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210508203055190.png" alt="image-20210508203055190"></p></li><li><p><code>/^\s*|\s*$/g</code>匹配开头和结尾的空格</p></li></ul><h1 id="邮件的正则"><a href="#邮件的正则" class="headerlink" title="邮件的正则"></a>邮件的正则</h1><ul><li>任意字母数字下划线.任意字母数字下划线@任意字母数字.任意字母(2-5位).任意字母(2-5位)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> emailReg = <span class="regexp">/^\w&#123;3,&#125;(\.\w+)*@[A-Za-z0-9]+(\.[A-Za-z]&#123;2,5&#125;)&#123;1,2&#125;$/</span>;</span><br><span class="line"><span class="keyword">var</span> email = <span class="string">&quot;123abc.hello@163.com&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(emailReg.test(email));  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript_Date与Math对象</title>
      <link href="article/282e5124.html"/>
      <url>article/282e5124.html</url>
      
        <content type="html"><![CDATA[<h1 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h1><ul><li><p>在JS中使用Date对象来表示时间</p></li><li><p>如果直接使用构造函数创建一个Date对象，则会封装为当前代码执行的时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210503162235275.png" alt="image-20210503162235275"></p></li><li><p>创建一个指定的时间对象</p><p>需要在构造函数中传递一个表示时间的字符串作为参数</p><p>日期的格式：<code>月/日/年 时:分:秒</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;12/03/2016 11:10:30&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d2);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210503163018575.png" alt="image-20210503163018575"></p></li></ul><h2 id="Date对象的常用方法"><a href="#Date对象的常用方法" class="headerlink" title="Date对象的常用方法"></a>Date对象的常用方法</h2><table><thead><tr><th align="center">方法</th><th align="center">概述</th></tr></thead><tbody><tr><td align="center">getDate()</td><td align="center">从Date对象返回几日（1~31）</td></tr><tr><td align="center">getDay()</td><td align="center">从Date对象返回周几（0~6）<br />0表示周日<br />1表示周一</td></tr><tr><td align="center">getMonth()</td><td align="center">从Date对象返回月份（0~11）<br />0表示一月<br />1表示二月<br />11表示十二月</td></tr><tr><td align="center">getFullYear()</td><td align="center">从Date对象返回年份</td></tr><tr><td align="center">类似地<br />getHours()<br />getMinutes()<br />getSeconds()<br />getMilliseconds()</td><td align="center">……</td></tr></tbody></table><h2 id="getTime"><a href="#getTime" class="headerlink" title="getTime()"></a>getTime()</h2><ul><li><p>获取当前日期对象的时间戳</p></li><li><p>时间戳，指的是从格林威治标准时间的1970年1月1日，0时0分0秒</p><p>到当前日期所花费的毫秒数（1秒 = 1000毫秒）</p></li><li><p>计算机底层在保存时间时，使用的都是时间戳</p></li><li><p>利用时间戳来测试代码执行的性能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> end = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;执行了：&quot;</span>+(end-start)+<span class="string">&quot;毫秒&quot;</span>);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210503171818203.png" alt="image-20210503171818203"></p></li></ul><h1 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h1><ul><li><p>Math和其它的对象不同，它不是一个构造函数</p><p>它属于一个工具类，不用创建对象，它里面封装了数学运算相关的属性和方法</p></li></ul><h2 id="Math对象的属性"><a href="#Math对象的属性" class="headerlink" title="Math对象的属性"></a>Math对象的属性</h2><p><img src="https://blog.ply.cool/image/image-20210503172554345.png" alt="image-20210503172554345"></p><ul><li><p>使用实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.PI);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210503172740410.png" alt="image-20210503172740410"></p></li></ul><h2 id="Math对象的方法"><a href="#Math对象的方法" class="headerlink" title="Math对象的方法"></a>Math对象的方法</h2><p><img src="https://blog.ply.cool/image/image-20210503173010776.png" alt="image-20210503173010776"></p><ul><li><p>使用实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(-<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210503173141313.png" alt="image-20210503173141313"></p></li></ul><h3 id="ceil"><a href="#ceil" class="headerlink" title="ceil()"></a>ceil()</h3><ul><li><p>可以对一个数进行向上取整（小数位有值就自动进一）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">1.001</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(-<span class="number">1.8</span>));</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210503173542922.png" alt="image-20210503173542922"></p></li></ul><h3 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h3><ul><li><p>可以对一个数进行向下取整</p><p>与ceil()使用相似</p></li></ul><h3 id="round"><a href="#round" class="headerlink" title="round()"></a>round()</h3><ul><li>四舍五入取整</li></ul><h3 id="random"><a href="#random" class="headerlink" title="random()"></a>random()</h3><ul><li><p>可以生成一个0~1之间的随机数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210503174339585.png" alt="image-20210503174339585"></p></li><li><p>生成10个0~10之间的随机数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">10</span>));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210503174903627.png" alt="image-20210503174903627"></p></li><li><p>生成一个0~x之间的随机数</p><p><code>Math.round(Math.random()*x)</code> </p></li><li><p>生成一个x~y之间的随机数</p><p><code>Math.round(Math.random()*(y-x)+x)</code> </p></li></ul><h3 id="max"><a href="#max" class="headerlink" title="max()"></a>max()</h3><ul><li>获取多个数中的最大值</li></ul><h3 id="min"><a href="#min" class="headerlink" title="min()"></a>min()</h3><ul><li>获取多个数中的最大值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max(<span class="number">10</span>,<span class="number">578</span>,<span class="number">1564</span>,<span class="number">635</span>,<span class="number">48</span>,<span class="number">597</span>);</span><br><span class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min(<span class="number">10</span>,<span class="number">578</span>,<span class="number">1564</span>,<span class="number">635</span>,<span class="number">48</span>,<span class="number">597</span>);</span><br><span class="line"><span class="built_in">console</span>.log(max,min);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210503180107395.png" alt="image-20210503180107395"></p><h3 id="pow"><a href="#pow" class="headerlink" title="pow()"></a>pow()</h3><ul><li><code>Math.pow(x,y)</code>返回x的y次方</li></ul><h3 id="sqrt"><a href="#sqrt" class="headerlink" title="sqrt()"></a>sqrt()</h3><ul><li>用于对一个数进行开方运算</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sqrt(<span class="number">9</span>));</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210503180601418.png" alt="image-20210503180601418"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript函数的方法</title>
      <link href="article/9055267.html"/>
      <url>article/9055267.html</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><ul><li>函数也是对象</li></ul><h1 id="call-和apply"><a href="#call-和apply" class="headerlink" title="call()和apply()"></a>call()和apply()</h1><ul><li><p>这两个方法都是函数对象的方法，需要通过函数对象来调用</p></li><li><p>当对函数调用<code>call()</code>和<code>apply()</code>都会调用函数执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;我是fun函数！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//效果相同</span></span><br><span class="line">fun.apply();</span><br><span class="line">fun.call();</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure><p>输出结果为：</p></li></ul><p><img src="https://blog.ply.cool/image/image-20210503150938534.png" alt="image-20210503150938534"></p><ul><li><p>在调用<code>call()</code>和<code>apply()</code>可以将一个对象指定为第一个参数</p><ul><li>此时这个对象将会成为函数执行时的<code>this</code> </li><li><code>call()</code>和<code>apply()</code>的作用：可以修改函数执行时的上下文对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;obj&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>:<span class="string">&quot;obj2&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//效果相同</span></span><br><span class="line">fun.call(obj2.name);</span><br><span class="line">fun.apply(obj2.name);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210503153139794.png" alt="image-20210503153139794"></p><ul><li><p>若直接运行<code>fun()</code>，输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210503153355094.png" alt="image-20210503153355094"></p></li></ul></li><li><p><code>call()</code>方法可以将实参在对象之后依次传递</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;b = &quot;</span>+b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&quot;obj&quot;</span>,</span><br><span class="line">    sayName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fun.call(obj,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210503154339384.png" alt="image-20210503154339384"></p></li><li><p><code>apply()</code>方法需要将实参封装到一个数组中统一传递</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.apply(obj,[<span class="number">2</span>,<span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p>输出结果同上</p></li></ul><h1 id="this的情况"><a href="#this的情况" class="headerlink" title="this的情况"></a>this的情况</h1><ul><li>以函数的形式调用时，this永远都是window</li><li>以方法的形式调用时，this是调用方法的对象</li><li>以构造函数的形式调用时，this是新创建的那个对象</li><li>使用call和apply调用时，this是指定的那个对象</li></ul><h1 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h1><ul><li><p>在调用函数时，浏览器每次都会传递进两个隐含的参数：</p><ol><li>函数的上下文对象this</li><li>封装实参的对象arguments</li></ol></li><li><p>arguments是一个类数组对象，它可以通过索引来操作数据，也可以获取长度</p></li><li><p>在调用函数时，我们所传递的实参都会在arguments中保存</p></li><li><p>我们即使不定义形参，也可以通过arguments来使用实参，只不过比较麻烦</p><ul><li><code>arguments[0]</code>表示第一个实参</li><li><code>arguments[1]</code>表示第二个实参</li></ul></li><li><p>它里面有一个属性叫做<code>callee</code> </p><ul><li><p>这个属性对应一个函数对象，就是当前正在指向的函数对象</p><p><code>arguments.callee == fun</code> </p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法学习&lt;Java&gt;笔记</title>
      <link href="article/c2e84310.html"/>
      <url>article/c2e84310.html</url>
      
        <content type="html"><![CDATA[<h1 id="循环与递归"><a href="#循环与递归" class="headerlink" title="循环与递归"></a>循环与递归</h1><ul><li>递归调用仅仅是被调函数恰为主调函数</li><li>注意每次调用的层次不同</li><li>注意每次分配形参并非同一个变量</li><li>注意返回的次序</li></ul><h2 id="Q：打印从0-n"><a href="#Q：打印从0-n" class="headerlink" title="Q：打印从0 - n"></a>Q：打印从0 - n</h2><ol><li><p>循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="comment">//打印从0到n</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        fun(<span class="number">9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="comment">//打印从0到n</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        <span class="keyword">if</span> (n&gt;<span class="number">0</span>) f(n-<span class="number">1</span>);</span><br><span class="line">        System.out.println(n);;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    f(<span class="number">9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Q：打印begin-end（递归）"><a href="#Q：打印begin-end（递归）" class="headerlink" title="Q：打印begin - end（递归）"></a>Q：打印begin - end（递归）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (begin&gt;end)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        System.out.println(begin);</span><br><span class="line">        f(begin+<span class="number">1</span>,end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        f(<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Q：计算数组begin到结束的所有元素之和（递归）"><a href="#Q：计算数组begin到结束的所有元素之和（递归）" class="headerlink" title="Q：计算数组begin到结束的所有元素之和（递归）"></a>Q：计算数组begin到结束的所有元素之和（递归）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> begin)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (begin==a.length)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x = f(a, begin+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> x+a[begin];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> sum = f(a,<span class="number">0</span>); <span class="comment">//a 从第0项开始的累加值</span></span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Q：比较两个字符串是否相同"><a href="#Q：比较两个字符串是否相同" class="headerlink" title="Q：比较两个字符串是否相同"></a>Q：比较两个字符串是否相同</h2><ol><li><p>调用Java现成工具包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSameString</span><span class="params">(String s1, String s2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.equals(s2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(isSameString(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abcd&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">f</span><span class="params">(String s1, String s2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.length() != s2.length())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (s1.length()==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (s1.charAt(<span class="number">0</span>) != s2.charAt(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> f(s1.substring(<span class="number">1</span>),s2.substring(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(f(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abcd&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="经典递归问题"><a href="#经典递归问题" class="headerlink" title="经典递归问题"></a>经典递归问题</h1><h2 id="Q：在n个球中，任意取m个-不放回-，求有多少种不同的取法"><a href="#Q：在n个球中，任意取m个-不放回-，求有多少种不同的取法" class="headerlink" title="Q：在n个球中，任意取m个(不放回)，求有多少种不同的取法"></a>Q：在n个球中，任意取m个(不放回)，求有多少种不同的取法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n==m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> f(n-<span class="number">1</span>,m-<span class="number">1</span>) + f(n-<span class="number">1</span>,m); <span class="comment">//想象在n个球中有一个特殊的球x，取法划分：包不包含x</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(f(<span class="number">10</span>,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Q：求n个元素的全排列"><a href="#Q：求n个元素的全排列" class="headerlink" title="Q：求n个元素的全排列"></a>Q：求n个元素的全排列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">char</span>[] data, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k==data.length)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i++) System.out.print(data[i]);</span><br><span class="line">                System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; data.length; i++) &#123; <span class="comment">//k：当前的交换位置（关注点），与其后的元素交换</span></span><br><span class="line">            &#123;<span class="keyword">char</span> t = data[k];data[k] = data[i];data[i] = t;&#125; <span class="comment">//试探</span></span><br><span class="line">            f(data, k+<span class="number">1</span>);</span><br><span class="line">            &#123;<span class="keyword">char</span> t = data[k];data[k] = data[i];data[i] = t;&#125; <span class="comment">//回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] data = <span class="string">&quot;ABCDE&quot;</span>.toCharArray();</span><br><span class="line">        f(data,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Q：求两个串的最大公共子序列的长度"><a href="#Q：求两个串的最大公共子序列的长度" class="headerlink" title="Q：求两个串的最大公共子序列的长度"></a>Q：求两个串的最大公共子序列的长度</h2><div class="tip info"><p>最大公共子序列：两个串在不逆向原有字符顺序所能得到的相同字符数量最多的公共子串</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(String s1, String s2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.length()==<span class="number">0</span> || s2.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (s1.charAt(<span class="number">0</span>) == s2.charAt(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">return</span> f(s1.substring(<span class="number">1</span>), s2.substring(<span class="number">1</span>)) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> Math.max(f(s1.substring(<span class="number">1</span>),s2),f(s1,s2.substring(<span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = f(<span class="string">&quot;fabckd&quot;</span>,<span class="string">&quot;xbacd&quot;</span>);</span><br><span class="line">        System.out.println(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="递归真题训练"><a href="#递归真题训练" class="headerlink" title="递归真题训练"></a>递归真题训练</h1><div class="tip success"><p>构建递归的要诀：</p><p>&emsp;&emsp;1.找到相似性</p><p>&emsp;&emsp;2.定义出口</p></div><h2 id="Q：反转串问题"><a href="#Q：反转串问题" class="headerlink" title="Q：反转串问题"></a>Q：反转串问题</h2><ul><li>题目如图：</li></ul><p><img src="https://blog.ply.cool/image/image-20210313235244637.png" alt="image-20210313235244637"></p><ul><li>解决方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">f</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length()==<span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">return</span> f(s.substring(<span class="number">1</span>)) + s.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(f(<span class="string">&quot;abcd&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Q：杨辉三角形问题"><a href="#Q：杨辉三角形问题" class="headerlink" title="Q：杨辉三角形问题"></a>Q：杨辉三角形问题</h2><ul><li>题目如图：</li></ul><p><img src="https://blog.ply.cool/image/image-20210313235139050.png" alt="image-20210313235139050"></p><ul><li>解决方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">0</span> || n==m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> f(m-<span class="number">1</span>,n-<span class="number">1</span>) + f(m-<span class="number">1</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(f(<span class="number">5</span>,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Q：组合数学问题"><a href="#Q：组合数学问题" class="headerlink" title="Q：组合数学问题"></a>Q：组合数学问题</h2><ul><li>题目如图：</li></ul><p><img src="https://blog.ply.cool/image/image-20210315213100172.png" alt="image-20210315213100172"></p><ul><li>解决方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m==<span class="number">0</span> || n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> g(m-<span class="number">1</span>,n) + g(m,n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(g(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Q：整数的分划问题"><a href="#Q：整数的分划问题" class="headerlink" title="Q：整数的分划问题"></a>Q：整数的分划问题</h2><ul><li>题目如图：</li></ul><p><img src="https://blog.ply.cool/image/image-20210315214540223.png" alt="image-20210315214540223"></p><ul><li>解决方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[] a, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="comment">//对n进行加法划分</span></span><br><span class="line">        <span class="comment">//a：缓冲；k：当前的位置</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">                System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=n; i&gt;<span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span> (k&gt;<span class="number">0</span> &amp;&amp; i &gt; a[k-<span class="number">1</span>])  <span class="keyword">continue</span>;</span><br><span class="line">            a[k] = i;</span><br><span class="line">            f(n-i, a, k+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>];</span><br><span class="line">        f(<span class="number">6</span>,a,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>运行结果：</p><p><img src="https://blog.ply.cool/image/image-20210315225051155.png" alt="image-20210315225051155"></p></li></ul><h1 id="浮点数的注意事项"><a href="#浮点数的注意事项" class="headerlink" title="浮点数的注意事项"></a>浮点数的注意事项</h1><ul><li><p>浮点数：足够接近|a-b|&lt;seta。。。不能判断两个浮点数精确相等</p><p>eg:<code>System.out.println(0.2+0.1 == 0.3);</code> 结果为：<code>false</code> </p></li></ul><div class="tip info"><p>浮点数在比较时：</p><p>&emsp;&emsp;1.千万不能用‘ == ’</p><p>&emsp;&emsp;2.如上例子可如此比较：System.out.println(Math.abs(0.2+0.1-0.3)<1E-10);</p></div><p>上述例子也可将方程左右同时扩大10倍，化为整数运算，如此做更安全。</p><ul><li><p><code>float a = 3.0/0;</code> </p><p><code>double a = 3.0/0;</code> </p><p>上述两式a的值都为<code>Infinity</code> </p><p><code>double a = -3.0/0;</code></p><p> 上式a的值为<code>-Infinity</code> </p><p><code>1/a = 0.0</code> </p><p>满足极限运算法则</p><p>无穷与无穷运算结果为<code>NaN</code>，即Not a Number</p></li></ul><h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><p><img src="https://blog.ply.cool/image/image-20210327215623811.png" alt="image-20210327215623811"></p><ul><li><p>解决方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">20</span>; a &gt;=<span class="number">1</span>; a--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> b = a-<span class="number">1</span>; b &gt;= <span class="number">1</span>; b--) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> c = b-<span class="number">1</span>; c &gt;= <span class="number">1</span>; c--) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> d = c-<span class="number">1</span>; d &gt;= <span class="number">1</span>; d--) &#123;</span><br><span class="line">                        <span class="comment">//if (1/a + 1/b + 1/c + 1/d == 1)</span></span><br><span class="line">                            <span class="comment">//注意上式有两个错误：</span></span><br><span class="line">                            <span class="comment">//1.整型/整型只能得到整型，所以每一项结果都是0</span></span><br><span class="line">                            <span class="comment">//2.浮点型不能出现&quot;==&quot;的写法，这是雷区</span></span><br><span class="line">                        <span class="keyword">if</span>(b*c*d + a*c*d + a*b*d + a*b*c == a*b*c*d)</span><br><span class="line">                            System.out.println(a + <span class="string">&quot;,&quot;</span> + b + <span class="string">&quot;,&quot;</span> + c + <span class="string">&quot;,&quot;</span> + d);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>运行结果：</p><p><img src="https://blog.ply.cool/image/image-20210327215801918.png" alt="image-20210327215801918"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数组</title>
      <link href="article/bd63f59d.html"/>
      <url>article/bd63f59d.html</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul><li>数组也是一个对象</li><li>它和我们普通对象功能类似，也是用来存储一些值的</li><li>不同的是：<ul><li>普通对象是使用字符串作为属性名的</li><li>数组是使用数字来作为索引操作元素</li></ul></li><li>索引（index）<ul><li>从0开始的整数就是索引</li></ul></li><li>数组的存储性能比普通对象要高，在开发中我们经常使用数组来存储一些数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个数组对象</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用typeof检查一个数组时，会返回object</span></span><br><span class="line"><span class="comment">//console.log(typeof arr);</span></span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">33</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取数组中的元素</span></span><br><span class="line"><span class="comment">// 语法：数组[索引]</span></span><br><span class="line"><span class="comment">// 如果读取不存在的索引，它不会报错，而是返回undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>]);<span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组长度</span></span><br><span class="line"><span class="comment">// 对于连续的数组，使用length可以获取到数组的长度（数的个数）</span></span><br><span class="line"><span class="comment">// 对于非连续的数组，使用length会获取到数组的最大索引+1</span></span><br><span class="line"><span class="comment">//          尽量不要创建非连续数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改length</span></span><br><span class="line"><span class="comment">//如果修改的length大于原长度，则多出来的部分会空出来</span></span><br><span class="line"><span class="comment">//如果修改的length小于原长度，则多出来的元素会被删除</span></span><br><span class="line">arr.length = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向数组的最后一个位置添加元素</span></span><br><span class="line">arr[arr.length] = <span class="number">70</span>;</span><br></pre></td></tr></table></figure><h1 id="数组字面量"><a href="#数组字面量" class="headerlink" title="数组字面量"></a>数组字面量</h1><ul><li><p>创建一个数组：<code>var arr = new Array();</code> </p></li><li><p>使用字面量来创建数组：<code>var arr = [];</code> </p></li><li><p>使用字面量创建数组时，可以在创建时就指定数组中的元素</p><p><code>var arr = [1，2，3，4，5，10];</code> </p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个数组，数组中只有一个元素10</span></span><br><span class="line">arr = [<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个长度为10的数组</span></span><br><span class="line">arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><ul><li><p>数组中的元素可以是任意数据类型</p><p><code>var arr = [&quot;hello&quot;,1,true,null,undefined];</code></p></li><li><p>也可以是对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =&#123;<span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>&#125;;</span><br><span class="line">arr[arr.length] = obj;</span><br><span class="line"></span><br><span class="line">arr2 = [&#123;<span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;猪八戒&quot;</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;沙和尚&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr2[<span class="number">1</span>].name);<span class="comment">// 猪八戒</span></span><br></pre></td></tr></table></figure></li><li><p>也可以是一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>)&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">2</span>)&#125;];</span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>]();</span><br></pre></td></tr></table></figure></li><li><p>也可以是一个数组，这种数组称为二维数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201208210553411.png" alt="image-20201208210553411"></p></li></ul><h1 id="数组的四个方法"><a href="#数组的四个方法" class="headerlink" title="数组的四个方法"></a>数组的四个方法</h1><h2 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h2><ul><li><p>该方法可以向数组的末尾添加一个或多个元素，并返回数组新的长度</p></li><li><p>可以将要添加的元素作为方法的参数传递</p><p>这样这些元素将会自动添加到数组的末尾</p></li><li><p>该方法会将数组新的长度作为返回值返回</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>];</span><br><span class="line">arr.push(<span class="string">&quot;唐僧&quot;</span>,<span class="string">&quot;蜘蛛精&quot;</span>,<span class="string">&quot;白骨精&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201208211836183.png" alt="image-20201208211836183"></p><h2 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h2><ul><li>该方法可以删除数组的最后一个元素，并将被删除的元素作为返回值返回</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>];</span><br><span class="line">arr.push(<span class="string">&quot;唐僧&quot;</span>,<span class="string">&quot;蜘蛛精&quot;</span>,<span class="string">&quot;白骨精&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line">arr.pop();</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="keyword">var</span> result = arr.pop();</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;result = &quot;</span>+result);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201208212615516.png" alt="image-20201208212615516"></p><h2 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h2><ul><li>向数组开头添加一个或多个元素，并返回新的数组长度</li><li>向前面插入元素以后，其它元素索引会依次调整</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>];</span><br><span class="line">arr.push(<span class="string">&quot;唐僧&quot;</span>,<span class="string">&quot;蜘蛛精&quot;</span>,<span class="string">&quot;白骨精&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line">arr.unshift(<span class="string">&quot;牛魔王&quot;</span>,<span class="string">&quot;二郎神&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201208213540909.png" alt="image-20201208213540909"></p><h2 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h2><ul><li>删除数组的第一个元素，并将删除的元素作为返回值返回</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>];</span><br><span class="line">arr.push(<span class="string">&quot;唐僧&quot;</span>,<span class="string">&quot;蜘蛛精&quot;</span>,<span class="string">&quot;白骨精&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="keyword">var</span> result = arr.shift();</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;result = &quot;</span>+result);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201208214311158.png" alt="image-20201208214311158"></p><h1 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h1><ul><li><p>Demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>,<span class="string">&quot;唐僧&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201219160306938.png" alt="image-20201219160306938"></p></li><li><p>进阶练习</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改Person原型的toString</span></span><br><span class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Person[name=&quot;</span>+<span class="built_in">this</span>.name+<span class="string">&quot;,age=&quot;</span>+<span class="built_in">this</span>.age+<span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个Person对象</span></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person(<span class="string">&quot;孙悟空&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">&quot;猪八戒&quot;</span>,<span class="number">28</span>);</span><br><span class="line"><span class="keyword">var</span> per3 = <span class="keyword">new</span> Person(<span class="string">&quot;红孩儿&quot;</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">var</span> per4 = <span class="keyword">new</span> Person(<span class="string">&quot;蜘蛛精&quot;</span>,<span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> per5 = <span class="keyword">new</span> Person(<span class="string">&quot;二郎神&quot;</span>,<span class="number">38</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(per.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//将这些person对象放入到一个数组中</span></span><br><span class="line"><span class="keyword">var</span> perArr = [per,per2,per3,per4,per5];</span><br><span class="line"><span class="built_in">console</span>.log(perArr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">            创建一个函数，可以将perArr中的满18岁的Person提取出来</span></span><br><span class="line"><span class="comment">            然后封装到一个新的数组中返回</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="comment">//arr:形参，要提取信息的数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAdult</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//创建一个新的数组</span></span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历arr，获取arr中的Person对象</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> p = arr[i];</span><br><span class="line">        <span class="comment">//判断Person对象的age是否大于等于18</span></span><br><span class="line">        <span class="keyword">if</span>(p.age &gt;=<span class="number">18</span>)&#123;</span><br><span class="line">            <span class="comment">//如果大于18，则将这个对象添加到newArr中</span></span><br><span class="line">            newArr.push(p);</span><br><span class="line">        &#125;                </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将新的数组返回</span></span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = getAdult(perArr);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201219165037987.png" alt="image-20201219165037987"></p></li></ul><h1 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h1><ul><li><p>JS中还为我们提供了一个方法，用来遍历数组</p></li><li><p><code>forEach()</code> </p></li><li><p>这个方法只支持IE9以上的浏览器</p></li><li><p><code>forEach()</code>方法需要一个函数作为参数</p></li><li><p>像这种函数，由我们创建但是不由我们调用的，我们称为回调函数</p><ul><li>数组有几个元素函数就会执行几次</li><li>每次执行时，浏览器会将遍历到的元素以实参的形式传递进来</li><li>我们可以定义形参，来读取这些内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>,<span class="string">&quot;唐僧&quot;</span>];</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//由浏览器调用</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>该程序将会输出4次<code>hello</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>,<span class="string">&quot;唐僧&quot;</span>];</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123; <span class="comment">//由浏览器调用</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201219171335408.png" alt="image-20201219171335408"></p></li><li><p>浏览器会在回调函数中传递三个参数</p><ul><li>第一个参数，就是当前正在遍历的元素value</li><li>第二个参数，就是当前正在遍历元素的索引index</li><li>第三个参数，就是正在遍历的数组arr</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>,<span class="string">&quot;唐僧&quot;</span>];</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,arr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,arr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;);</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,arr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201219172325084.png" alt="image-20201219172325084"></p></li></ul><h1 id="数组的其它常用方法"><a href="#数组的其它常用方法" class="headerlink" title="数组的其它常用方法"></a>数组的其它常用方法</h1><h2 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h2><ul><li><p>可以用来从数组提取选定元素</p></li><li><p>该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回</p></li><li><p>参数：</p><ol><li>截取开始位置的索引，包含开始索引</li><li>截取结束位置的索引，不包含结束索引</li><li>第二个参数可以不写，此时会截取从开始索引往后的所有元素</li><li>索引可传递一个负值，如果传递一个负值，则从后往前计算</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>,<span class="string">&quot;唐僧&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr.slice(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr.slice(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line">result = arr.slice(<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201219174614779.png" alt="image-20201219174614779"></p></li></ul><h2 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h2><ul><li><p>可以删除数组中的指定元素</p></li><li><p>使用<code>splice()</code>会影响到原数组，会将指定元素从原数组中删除</p><p>并将删除的元素作为返回值返回</p></li><li><p>参数：</p><ol><li>第一个参数：表示开始位置的索引</li><li>第二个参数：表示删除的数量</li><li>第三个及以后参数：可以传递一些新的元素，这些元素将会自动插入到开始位置的前面</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>,<span class="string">&quot;唐僧&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr.splice(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&quot;牛魔王&quot;</span>,<span class="string">&quot;铁扇公主&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201219175854305.png" alt="image-20201219175854305"></p></li></ul><h2 id="数组去重练习"><a href="#数组去重练习" class="headerlink" title="数组去重练习"></a>数组去重练习</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除数组中重复的数字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] == arr[j])&#123;</span><br><span class="line">            arr.splice(j,<span class="number">1</span>);</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210429172824683.png" alt="image-20210429172824683"></p><h2 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h2><ul><li><code>concat()</code>可以连接两个或多个数组，并将新的数组返回</li><li>该方法不会对原数组产生影响</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">&quot;白骨精&quot;</span>,<span class="string">&quot;玉兔精&quot;</span>,<span class="string">&quot;蜘蛛精&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">&quot;二郎神&quot;</span>,<span class="string">&quot;太上老君&quot;</span>,<span class="string">&quot;玉皇大帝&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result1 = arr.concat(arr2);</span><br><span class="line"><span class="keyword">var</span> result2 = arr.concat(arr2,arr3,<span class="string">&quot;牛魔王&quot;</span>,<span class="string">&quot;铁扇公主&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="built_in">console</span>.log(result1);</span><br><span class="line"><span class="built_in">console</span>.log(result2);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20210429212801160.png" alt="image-20210429212801160"></p><h2 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h2><ul><li><p><code>join()</code>可以将数组转换为字符串</p></li><li><p>该方法不会对原数组产生影响，而是将转换后的字符串作为结果返回</p></li><li><p>在<code>join()</code>中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符</p><p>若没有指定参数，将默认使用<code>,</code>连接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>];</span><br><span class="line"></span><br><span class="line">result = arr.join();</span><br><span class="line">result1 = arr.join(<span class="string">&quot;@-@&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="built_in">console</span>.log(result1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> result);</span><br></pre></td></tr></table></figure><p>运行结果为：</p><p><img src="https://blog.ply.cool/image/image-20210429213949294.png" alt="image-20210429213949294"></p></li></ul><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><ul><li><p><code>reverse()</code>用来反转数组</p></li><li><p>该方法直接修改原数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;沙和尚&quot;</span>,<span class="string">&quot;唐僧&quot;</span>];</span><br><span class="line">arr.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><p>运行结果为：</p><p><img src="https://blog.ply.cool/image/image-20210429214534859.png" alt="image-20210429214534859"></p></li></ul><h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><ul><li><p><code>sort()</code>用来对数组的元素进行排序</p></li><li><p>该方法直接修改原数组，默认按照Unicode编码进行排序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;b&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;c&quot;</span>];</span><br><span class="line"></span><br><span class="line">arr.sort();</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><p>运行结果为：</p><p><img src="https://blog.ply.cool/image/image-20210429215147407.png" alt="image-20210429215147407"></p></li><li><p>即使对于纯数字的数组，使用<code>sort()</code>排序时，也会按照Unicode编码来排序</p><p>所以对数字进行排序时，可能会得到错误的结果</p><ul><li><p>我们可以自己来指定排序的规则</p><p>可以在<code>sort()</code>中添加一个回调函数，来指定排序规则</p><p>回调函数中需要定义两个形参</p><p>浏览器将会分别使用数组中的元素作为实参去调用回调函数</p><p>使用哪个元素调用不确定，但是肯定的是在数组中a一定在b前边</p></li><li><p>浏览器会根据回调函数的返回值来决定元素的顺序</p><p>如果返回一个大于0的值，则元素会交换位置</p><p>如果返回一个小于0的值，则元素位置不变</p><p>如果返回一个0，则认为两个元素相等，也不交换位置</p><ul><li>如果需要升序排列，则返回<code>a-b</code> </li><li>如果需要降序排列，则返回<code>b-a</code> </li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">97</span>,<span class="number">8</span>,<span class="number">34</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">97</span>,<span class="number">8</span>,<span class="number">34</span>];</span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a&lt;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//更妙的写法</span></span><br><span class="line">arr1.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">    <span class="keyword">return</span> b-a; <span class="comment">//降序</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure><p>运行结果为：</p><p><img src="https://blog.ply.cool/image/image-20210429224452936.png" alt="image-20210429224452936"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript对象与函数_02</title>
      <link href="article/2bb77783.html"/>
      <url>article/2bb77783.html</url>
      
        <content type="html"><![CDATA[<h1 id="作用域（Scope）"><a href="#作用域（Scope）" class="headerlink" title="作用域（Scope）"></a>作用域（Scope）</h1><ul><li><p>一个变量的作用范围</p></li><li><p>在JS中一共有两种作用域：</p><ol><li>全局作用域</li><li>函数作用域</li></ol></li></ul><h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><ul><li><p>直接编写在script标签中的JS代码，都在全局作用域</p></li><li><p>全局作用域在页面打开是创建，在页面关闭时销毁</p></li><li><p>在全局作用域中有一个全局对象window</p><p>它代表的是一个浏览器的窗口，我们可以直接使用</p></li><li><p>在全局作用域中：</p><p>创建的变量都会作为window对象的属性保存</p><p>创建的函数都会作为window对象的方法保存</p></li><li><p>全局作用域中的变量都是全局变量</p><p>在页面的任意部分都可以访问的到</p></li></ul><h3 id="变量的声明提前"><a href="#变量的声明提前" class="headerlink" title="变量的声明提前"></a>变量的声明提前</h3><ul><li>使用var关键字声明的变量，会在所有代码执行之前被声明</li><li>但是如果声明变量时不使用var关键字，则变量不会被提前声明</li></ul><h3 id="函数的声明提前"><a href="#函数的声明提前" class="headerlink" title="函数的声明提前"></a>函数的声明提前</h3><ul><li><p>使用<strong>函数声明</strong>形式创建的函数<code>function 函数()&#123;&#125;</code> </p><p>会在所有的代码执行之前就被创建，所以可以在函数声明前调用函数</p></li><li><p>使用<strong>函数表达式</strong>创建的函数，不会被声明提前，所以不能在声明前调用</p></li></ul><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><ul><li><p>调用函数时创建函数作用域，函数执行完毕以后，函数作用域销毁</p></li><li><p>每调用一次函数就会创建一个新的函数作用域，他们之间是相互独立的</p></li><li><p>在函数作用域中可以访问到全局作用域的变量</p><p>在全局作用域中无法访问到函数作用域的变量</p></li><li><p>当在函数作用域中操作一个变量时，它会先在自身作用域中寻找，如果有就直接使用</p><p>如果没有则向上一级作用域中寻找，直到找到全局作用域</p><p>如果全局作用域中依然没有找到，则会报错<code>ReferenceError</code> </p></li><li><p>在函数中要访问全局变量可以使用window对象</p></li><li><p>在函数作用域也有声明提前的特性：</p><p>使用var关键字声明的变量，会在函数中所有代码执行之前被声明</p><p>函数声明也会在函数中所有代码执行之前执行</p></li><li><p>在函数中，不使用var声明的变量都会成为全局变量</p></li><li><p>定义形参就相当于在函数作用域中声明了变量</p></li></ul><h1 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h1><ul><li><p>解析器在调用函数每次都会向函数内部传递进一个隐含的参数</p><p>这个隐含的参数就是this，this指向的是一个对象</p><p>这个对象我们称为上下文对象</p><p>根据函数的调用方式不同，this会指向不同的对象</p><ol><li>以函数的形式调用时，this永远都是window</li><li>以方法的形式调用时，this就是调用方法的那个对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br><span class="line"><span class="comment">//输出的是Window对象</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">    sayName:fun</span><br><span class="line">&#125;;</span><br><span class="line">obj.sayName();</span><br><span class="line"><span class="comment">//输出Object对象</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="this范例"><a href="#this范例" class="headerlink" title="this范例"></a>this范例</h2><ul><li><p>Demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个name变量</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;全局&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个fun()函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建两个对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">    sayName:fun</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    name:<span class="string">&quot;沙和尚&quot;</span>,</span><br><span class="line">    sayName:fun</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们希望调用obj.sayName()时可以输出obj的名字</span></span><br><span class="line">obj.sayName();</span><br><span class="line">obj2.sayName();</span><br></pre></td></tr></table></figure><p>输出结果为：</p></li></ul><center>孙悟空</center><center>沙和尚</center><h1 id="使用工厂方法创建对象"><a href="#使用工厂方法创建对象" class="headerlink" title="使用工厂方法创建对象"></a>使用工厂方法创建对象</h1><ul><li><p>通过该方法可以大批量的创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//创建一个新对象</span></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    <span class="comment">//向对象中添加属性</span></span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.age = age;</span><br><span class="line">    obj.gender = gender;</span><br><span class="line">    obj.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = createPerson(<span class="string">&quot;猪八戒&quot;</span>,<span class="number">28</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> obj2 = createPerson(<span class="string">&quot;白骨精&quot;</span>,<span class="number">16</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> obj3 = createPerson(<span class="string">&quot;蜘蛛精&quot;</span>,<span class="number">18</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"><span class="built_in">console</span>.log(obj3);</span><br><span class="line"></span><br><span class="line">obj3.sayName();</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201206223213154.png" alt="image-20201206223213154"></p></li></ul><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><ul><li><p>使用工厂方法创建的对象，使用的构造函数都是Object</p><p>所以创建对象都是Object这个类型</p><p>导致我们无法区分多种不同类型的对象</p></li><li><p>创建一个构造函数，专门用来创建Person对象的</p><p>构造函数就是一个普通的函数，创建方式和普通函数没有区别</p><p>不同的是构造函数习惯上首字母大写</p></li><li><p>构造函数和普通函数的区别就是调用方式的不同</p><p>普通函数是直接调用，而构造函数需要使用new关键字来调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure></li><li><p>构造函数的执行流程：</p><ol><li>立即创建一个新的对象</li><li>将新建的对象设置为函数中this，在构造函数中可以使用this来引用新的对象</li><li>逐行执行函数中的代码</li><li>将新建的对象作为返回值返回</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person(<span class="string">&quot;孙悟空&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">&quot;玉兔精&quot;</span>,<span class="number">16</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> per3 = <span class="keyword">new</span> Person(<span class="string">&quot;奔波霸&quot;</span>,<span class="number">38</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(per);</span><br><span class="line"><span class="built_in">console</span>.log(dog);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201207203128679.png" alt="image-20201207203128679"></p></li><li><p>使用同一个构造函数创建的对象，我们称为一类对象，也将一个构造函数称为一个类</p><p>我们将通过一个构造函数创建的对象，称为该类的实例</p></li><li><p>this的情况：</p><ol><li>当以函数的形式调用时，this是window</li><li>当以方法的形式调用时，谁调用方法this就是谁</li><li>当以函数的形式调用时，this就是新创建的那个对象</li></ol></li><li><p>使用<code>instanceof</code>可以检查一个对象是否是一个类的实例</p><p>语法：</p><p>​    <code>对象 instanceof 构造函数</code> </p><p>如果是，则返回<code>true</code>，否则返回<code>false</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(per <span class="keyword">instanceof</span> Person);</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(dog <span class="keyword">instanceof</span> Person);</span><br><span class="line"><span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><p>所有的对象都是<code>Object</code>的后代</p><p>所以任何对象和<code>Object</code>左<code>instanceof</code>检查时都会返回<code>true</code> </p></li></ul><h2 id="构造函数修改"><a href="#构造函数修改" class="headerlink" title="构造函数修改"></a>构造函数修改</h2><ul><li><p>Demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 创建一个Person构造函数</span></span><br><span class="line"><span class="comment">         *   - 在Person构造函数中，为每一个对象都添加了一个sayName方法，</span></span><br><span class="line"><span class="comment">         *       目前我们的方法是在构造函数内部创建的</span></span><br><span class="line"><span class="comment">         *           也就是构造函数每执行一次，就会创建一个新的sayName方法</span></span><br><span class="line"><span class="comment">         *       也就是所有实例的sayName都是唯一的</span></span><br><span class="line"><span class="comment">         *       这样就导致了构造函数每执行一次就会创建一个新的方法</span></span><br><span class="line"><span class="comment">         *           执行10000次就会创建10000个新的方法，而10000个方法都是一模一样的</span></span><br><span class="line"><span class="comment">         *           这是完全没有必要的，完全可以使所有的对象共享同一个方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    <span class="comment">//向对象中添加一个方法</span></span><br><span class="line">    <span class="built_in">this</span>.sayName = fun;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将sayName方法在全局作用域中定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;Hello大家好，我是：&quot;</span>+<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个Person的实例</span></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person(<span class="string">&quot;孙悟空&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">&quot;猪八戒&quot;</span>,<span class="number">28</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(per.sayName == per2.sayName);</span><br><span class="line">per.sayName();</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201207215534712.png" alt="image-20201207215534712"></p></li><li><p>将sayName方法在全局作用域中定义</p><ul><li>污染了全局作用域的命名空间</li><li>而且定义在全局作用域中也很不安全</li></ul></li></ul><h1 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h1><ul><li><p>我们所创建的每一个函数，解析器都会向函数中添加一个属性<code>prototype</code> </p><p>这个属性对应着一个对象，这个对象就是我们所谓的原型对象</p></li><li><p>如果函数作为普通函数调用，prototype没有任何作用</p></li><li><p>当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性，指向该构造函数的原型对象，我们可以通过<code>__proto__</code>来访问该属性</p></li><li><p>原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象</p></li><li><p>我们可以将对象中共有的内容，统一设置到原型对象中</p></li><li><p>当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用</p><p>​    如果没有则会去原型对象中寻找，如果找到则直接使用</p></li><li><p>以后我们创建构造函数时，可以将这些对象共有的属性和方法，统一添加到构造函数的原型对象中</p><p>这样不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法了</p></li><li><p>Demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Myclass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向Myclass的原型中添加属性a</span></span><br><span class="line">Myclass.prototype.a = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向原型Myclass的原型中添加一个方法</span></span><br><span class="line">Myclass.prototype.sayHello =  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mc =<span class="keyword">new</span> Myclass();</span><br><span class="line"><span class="keyword">var</span> mc2 = <span class="keyword">new</span> Myclass();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Myclass.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(mc2.__proto__ == Myclass.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">//向mc中添加a属性</span></span><br><span class="line">mc.a = <span class="string">&quot;我是mc中的a&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mc2.a);</span><br><span class="line"></span><br><span class="line">mc.sayHello();</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201207224250389.png" alt="image-20201207224250389"></p><p>思维图如下：</p><p><img src="https://blog.ply.cool/image/image-20201207224420804.png" alt="image-20201207224420804"></p></li><li><p>Demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">         *创建一个构造函数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Myclass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向Myclass的原型中添加属性name</span></span><br><span class="line">Myclass.prototype.name = <span class="string">&quot;我是原型中的名字&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mc =<span class="keyword">new</span> Myclass();</span><br><span class="line">mc.age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用in检查对象中是否含有某个属性时，如果对象中没有，但是原型中有，也会返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> mc);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以使用对象的hasOwnProperty()来检查对象自身中是否含有该属性</span></span><br><span class="line"><span class="comment">//使用该方法只有对象自身中含有属性时，才会返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(mc.hasOwnProperty(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(mc.hasOwnProperty(<span class="string">&quot;age&quot;</span>));</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201208192156496.png" alt="image-20201208192156496"></p></li><li><p>原型对象也是对象，所以它也有原型</p><p>当我们使用一个对象的属性或方法时，会先在自身中寻找</p><p>自身中如果有，则直接使用，如果没有则去原型对象中寻找</p><p>如果原型对象中有，则使用，如果没有则去原型的原型中寻找</p><p>直到找到Object对象的原型，Object对象的原型没有原型</p><p>如果在Object中依然没有找到，则返回<code>undefined</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(mc.__proto__.__proto__.hasOwnProperty(<span class="string">&quot;hasOwnProperty&quot;</span>));</span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>思维图如下：</p><p><img src="https://blog.ply.cool/image/image-20201208192945647.png" alt="image-20201208192945647"></p></li></ul><h1 id="垃圾回收（GC）"><a href="#垃圾回收（GC）" class="headerlink" title="垃圾回收（GC）"></a>垃圾回收（GC）</h1><ul><li><p>就像人生活的时间长了会产生垃圾一样，程序运行过程中也会产生垃圾</p><p>这些垃圾积攒过多以后，会导致程序运行的速度过慢</p><p>所以我们需要一个垃圾回收的机制，来处理程序运行中产生的垃圾</p></li><li><p>当一个对象没有任何的变量或属性对它进行引用，此时我们将永远无法操作该对象</p><p>此时这种对象就是垃圾，这种对象过多占用大量的内存空间，导致程序运行变慢</p><p>所以这种垃圾必须清理</p></li><li><p>在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁</p><p>我们不需要也不能进行垃圾回收的操作</p></li><li><p>我们需要做的只是将不再使用的对象设置为<code>null</code>即可</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">obj = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常</title>
      <link href="article/f495a96f.html"/>
      <url>article/f495a96f.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h1><ul><li>软件程序在运行过程中，遇到的情况不可能是非常完美的，可能会存在各种问题，我们称为异常，英文：<code>Exception</code>，要让我们写出的程序作出合理的处理，而不至于程序崩溃。异常发生在程序运行期间，它影响了正常程序的执行流程。</li><li>异常分类：<ol><li>检查性异常</li><li>运行时异常</li><li>错误ERROR</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java12.jpg"></p><h1 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h1><ul><li><p>抛出异常</p></li><li><p>捕获异常</p></li><li><p>异常处理五个关键字</p></li><li><p>try，catch，finally，throw，throws</p></li><li><p>Demo.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//假设要捕获多个异常：从小到大！</span></span><br><span class="line">        <span class="keyword">try</span> &#123;   <span class="comment">//try监控区域</span></span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Error e)&#123; <span class="comment">//catch(想要捕获的异常类型)  捕获异常</span></span><br><span class="line">            System.out.println(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;程序出现异常，变量b不能为0&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable t)&#123;     <span class="comment">//Throwable是最高层级的异常</span></span><br><span class="line">            System.out.println(<span class="string">&quot;。。。&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;  <span class="comment">//处理善后工作</span></span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;<span class="comment">//程序出现异常，变量b不能为0</span></span><br><span class="line">    &#125;    <span class="comment">//finally</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//finally   可以不要finally，假设IO，资源，关闭！</span></span><br></pre></td></tr></table></figure></li><li><p>IDEA快捷键：<code>Ctrl</code> + <code>Alt</code> +<code>T</code> 将选中部分代码用代码块包裹起来！</p></li><li><p>Demo2.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.exit(<span class="number">0</span>);<span class="comment">//终止程序0,1,2,3,4...都可以</span></span><br><span class="line">            e.printStackTrace();<span class="comment">//打印错误的栈信息</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Demo3.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Demo3().test(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//假设这个方法中处理不了这个异常，方法向上抛出</span></span><br><span class="line">    <span class="comment">//方法中用throw，方法外用throws</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> ArithmeticException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException();<span class="comment">//主动的抛出异常，一般在方法中使用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><ul><li><p>用户自定义异常类，只需继承Exception类即可</p></li><li><p>MyException.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.exception.Ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义的异常类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="comment">//传递数字&gt;10;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> detail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.detail = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//toString：异常的打印信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyException&#123;&quot;</span> + detail + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.exception.Ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//可能会存在异常的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;传递的参数为：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">if</span> (a&gt;<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(a);   <span class="comment">//抛出</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test(<span class="number">11</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (MyException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyException=&gt;&quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//传递的参数为：11</span></span><br><span class="line">&#125;    <span class="comment">//MyException=&gt;MyException&#123;11&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>实际应用中的经验总结</p><ul><li><p>处理运行时异常时，采用逻辑去合理规避同时辅助<code>try-catch</code>处理</p></li><li><p>在多重catch块后面，可以加一个<code>catch(Exception)</code>来处理可能会被遗漏的异常</p></li><li><p>对于不确定的代码，也可以加一个<code>try-catch</code>，处理潜在的异常</p><p>IDEA快捷键：<code>Alt</code> + <code>Enter</code>会提示异常的处理操作</p></li><li><p>尽量去处理异常，切忌只是简单地调用<code>printStackTrace()</code>去打印输出</p></li><li><p>具体如何处理异常，要根据不同的业务需求和异常类型去决定</p></li><li><p>尽量添加finally语句去释放占用的资源</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象</title>
      <link href="article/5f8d3e42.html"/>
      <url>article/5f8d3e42.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h1><ul><li><code>Java的核心思想就是OOP(面向对象编程)</code> </li><li>面向过程思想：<ul><li>步骤清晰简单，第一步做什么，第二步做什么</li><li>处理简单问题</li></ul></li><li>面向对象思想：<ul><li>物以类聚，<code>分类</code>的思维方式</li><li>处理复杂问题</li></ul></li><li><code>类 = 属性 + 方法</code> </li></ul><h2 id="面向对象的本质"><a href="#面向对象的本质" class="headerlink" title="面向对象的本质"></a>面向对象的本质</h2><ul><li><p><code>以类的方式组织代码，以对象的形式组织(封装)数据</code> </p></li><li><p>三大特性：</p><ul><li><code>封装</code></li><li><code>继承</code></li><li><code>多态</code></li></ul></li></ul><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><h2 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="comment">//main方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    修饰符 返回值类型 方法名(...)&#123;</span></span><br><span class="line"><span class="comment">        //方法体</span></span><br><span class="line"><span class="comment">        return 返回值;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//return 结束方法，返回一个结果！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello,world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&gt;b ? a : b; <span class="comment">//三元运算符！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h2><h3 id="静态方法的调用"><a href="#静态方法的调用" class="headerlink" title="静态方法的调用"></a>静态方法的调用</h3><ul><li><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法static</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生说话了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Demo02.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student.say();<span class="comment">//静态方法可以通过类名.方法名进行调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="非静态方法的调用"><a href="#非静态方法的调用" class="headerlink" title="非静态方法的调用"></a>非静态方法的调用</h3><ul><li><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非静态方法static</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生说话了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Demo02.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//实例化这个类 new</span></span><br><span class="line">        <span class="comment">//对象类型 对象名 = 对象值;</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        student.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加static的方法是<code>和类一起加载的，时间片更早</code> </p></li><li><p>不加static的方法是在<code>类实例化之后才存在</code>的。</p><p>如果一个实例化的类或方法调用一个没有实例化的方法，则需要将该方法实例化。</p><p>通常通过new的方法来实现。</p></li></ul><h3 id="形参与实参"><a href="#形参与实参" class="headerlink" title="形参与实参"></a>形参与实参</h3><ul><li>形参是参数的名字，实参是真实的值</li><li>实际参数与形式参数的类型要对应</li></ul><h1 id="类与对象的创建"><a href="#类与对象的创建" class="headerlink" title="类与对象的创建"></a>类与对象的创建</h1><ul><li><p>类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物</p></li><li><p>对象是抽象概念的具体实例</p></li><li><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//属性：字段</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;在学习&quot;</span>);<span class="comment">//this表示当前类下这个学生</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个项目应该只有一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类：抽象的，实例化</span></span><br><span class="line">        <span class="comment">//类实例化后会返回一个自己的对象！</span></span><br><span class="line">        <span class="comment">//student对象就是一个Student类的具体实例！</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        Student xiaoming = <span class="keyword">new</span> Student();</span><br><span class="line">        Student xiaohong = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        xiaoming.name = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">        xiaoming.age = <span class="number">3</span>;</span><br><span class="line">        xiaoming.study();</span><br><span class="line"></span><br><span class="line">        System.out.println(xiaoming.name);</span><br><span class="line">        System.out.println(xiaoming.age);</span><br><span class="line"></span><br><span class="line">        xiaohong.name = <span class="string">&quot;小红&quot;</span>;</span><br><span class="line">        xiaohong.age = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(xiaohong.name);</span><br><span class="line">        System.out.println(xiaohong.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">/*输出结果：</span></span><br><span class="line"><span class="comment">            小明在学习</span></span><br><span class="line"><span class="comment">            小明</span></span><br><span class="line"><span class="comment">            3</span></span><br><span class="line"><span class="comment">            小红</span></span><br><span class="line"><span class="comment">            4</span></span><br><span class="line"><span class="comment">        */</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="构造器详解"><a href="#构造器详解" class="headerlink" title="构造器详解"></a>构造器详解</h1><ul><li><p>类中的构造器也称构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：</p><ol><li>必须和类的名字相同</li><li>必须没有返回类型，也不能写void</li></ol></li><li><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//一个类即使什么都不写，它也会存在一个构造方法</span></span><br><span class="line">    <span class="comment">//显示的定义构造器</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例化</span></span><br><span class="line">    <span class="comment">//1.使用new关键字，本质是在调用构造器</span></span><br><span class="line">    <span class="comment">//2.用来初始化值</span></span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;秦疆&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造：一旦定义了有参构造，无参就必须显示定义（方法重载）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="comment">//前一个name表示类中定义的字符串name</span></span><br><span class="line">        <span class="comment">//后一个name表示传进来的参数name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个项目应该只有一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//new 实例化一个对象</span></span><br><span class="line">        <span class="comment">//Person person = new Person();</span></span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">&quot;狂神&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(person.name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>IDEA快捷键：<code>Alt</code> + <code>Insert</code> 快速定义有参或无参构造</p></li><li><p>注意点：<code>定义有参构造之后，如果想使用无参构造，显示的定义一个无参构造</code> </p></li></ul><h1 id="创建对象内存分析"><a href="#创建对象内存分析" class="headerlink" title="创建对象内存分析"></a>创建对象内存分析</h1><ul><li><p>Pet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;叫了一声&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo3.Pet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pet dog = <span class="keyword">new</span> Pet();</span><br><span class="line">        dog.name = <span class="string">&quot;旺财&quot;</span>;</span><br><span class="line">        dog.age = <span class="number">3</span>;</span><br><span class="line">        dog.shout();</span><br><span class="line">        System.out.println(dog.name);</span><br><span class="line">        System.out.println(dog.age);</span><br><span class="line"></span><br><span class="line">        Pet cat = <span class="keyword">new</span> Pet();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>内存分析</p><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java11.jpg"></p></li></ul><h1 id="小结类与对象"><a href="#小结类与对象" class="headerlink" title="小结类与对象"></a>小结类与对象</h1><ol><li><p>类与对象：</p><p>类是一个模板：抽象，对象是一个具体的实例</p></li><li><p>方法：</p><p>定义，调用！</p></li><li><p>对应的引用：</p><p>引用类型； 基本类型 (8)</p><p>对象是通过引用来操作的：栈 —&gt; 堆</p></li><li><p>属性：字段Feild 成员变量</p><p>默认初始化：</p><p>​    数字：0    0.0</p><p>​    char:    u0000</p><p>​    boolean:    false</p><p>​    引用：    null</p><p>修饰符    属性类型    属性名 = 属性值！</p></li><li><p>对象的创建和使用：</p><ul><li>必须使用new 关键字创造对象，构造器    <code>Person kuangshen = new Person();</code> </li><li>对象的属性 <code>kuangshen.name</code> </li><li>对象的方法 <code>kuangshen.sleep()</code> </li></ul></li><li><p>类：</p><p>静态的属性    属性</p><p>动态的行为    方法</p></li></ol><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><ul><li><p>该露的露，该藏的藏</p><ul><li>程序设计要追求“<code>高内聚，低耦合</code>”。</li><li>高内聚：类的内部数据操作细节自己完成，不允许外部干涉。</li><li>低耦合：仅暴露少量的方法给外部使用。</li></ul></li><li><p>封装(数据的隐藏)</p><ul><li>通常，应禁止直接访问一个对象中数据的实际表示，而应该通过操作接口来访问，这称为信息隐藏。</li></ul></li><li><p>记住这句话就够了：<code>属性私有，get/set</code> </p></li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><ul><li><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo4;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类     private:私有</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> sex;<span class="comment">//性别</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一些可以操作这个属性的方法</span></span><br><span class="line">    <span class="comment">//提供一些public 的 get,set方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//get获得这个数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//set给这个数据设置值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo4.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.setName(<span class="string">&quot;秦疆&quot;</span>);</span><br><span class="line">        System.out.println(s1.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>IDEA快捷键：<code>Alt</code> + <code>Insert</code>快速生成get/set方法</p></li><li><p>封装的妙用(判断数据合法性)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (age&gt;<span class="number">120</span> || age&lt;<span class="number">0</span>)&#123; <span class="comment">//不合法</span></span><br><span class="line">        <span class="keyword">this</span>.age = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>封装的意义：</p><ol><li>提高程序的安全性，保护数据。</li><li>隐藏代码的实现细节</li><li>统一接口</li><li>系统的可维护性提高了</li></ol></li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><ul><li><p>继承的本质是对某一类的抽象，从而实现对现实更好的建模</p></li><li><p><code>extends</code>的意思是“扩展“。子类是父类的扩展</p></li><li><p>在Java中，所有的类，都默认直接或间接继承Object</p></li><li><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo5;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Person 父类，基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;说了一句话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo5;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Student 派生类，子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo5.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.say();</span><br><span class="line">    &#125;<span class="comment">//说了一句话</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>IDEA快捷键：<code>Ctrl</code> + <code>H</code> 查看当前类的树结构</p></li><li><p>Java中类只有单继承，没有多继承！</p><p><del>一个儿子只能有一个爸爸，但是一个爸爸可以有多个儿子🤪</del></p></li></ul><h1 id="super详解"><a href="#super详解" class="headerlink" title="super详解"></a>super详解</h1><h2 id="super注意点："><a href="#super注意点：" class="headerlink" title="super注意点："></a>super注意点：</h2><ol><li>super调用父类的构造方法，必须在构造方法的第一个！</li><li>super必须只能出现在子类的方法或者构造方法中！</li><li>super和this不能同时调用构造方法！</li></ol><h2 id="VS-this："><a href="#VS-this：" class="headerlink" title="VS this："></a>VS this：</h2><ol><li><p>代表的对象不同：</p><ul><li>this：本身调用者这个对象</li><li>super：代表父类对象的应用</li></ul></li><li><p>前提</p><ul><li>this：没有继承也可以使用</li><li>super：只能在继承条件下才可以使用</li></ul></li><li><p>构造方法：</p><ul><li>this()：本类的构造</li><li>super()：父类的构造</li></ul></li></ol><ul><li><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person无参构造执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> String name = <span class="string">&quot;kuangshen&quot;</span>;</span><br><span class="line">    <span class="comment">//私有的东西无法被继承</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo6;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类继承了父类，就会拥有父类的全部的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//隐藏代码：调用了父类的无参构造</span></span><br><span class="line">        <span class="keyword">super</span>(); <span class="comment">//调用父类的构造器，必须要在子类构造器的第一行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Student无参构造执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;qinjiang&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        print();<span class="comment">//Student</span></span><br><span class="line">        <span class="keyword">this</span>.print();<span class="comment">//Student</span></span><br><span class="line">        <span class="keyword">super</span>.print();<span class="comment">//Person</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(name);<span class="comment">//秦疆</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name);<span class="comment">//qinjiang</span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.name);<span class="comment">//kuangshen</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo6.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//student.test(&quot;秦疆&quot;);</span></span><br><span class="line">        <span class="comment">//student.test1();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h1><ul><li><p>需要有继承关系，子类重写父类的方法！</p><ol><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符：范围可以扩大但不能缩小：<code>public</code>&gt;<code>protected</code>&gt;<code>default</code>&gt;<code>private</code> </li><li>抛出的异常：范围，可以缩小，但不能扩大： <code>ClassNotFoundException</code> –&gt; <code>Exception(大)</code> </li></ol></li><li><p>重写，子类的方法和父类必要一致；方法体不同！</p></li><li><p>为什么需要重写：</p><p>父类的功能，子类不一定需要，或者不一定满足！</p><p>IDEA快捷键：<code>Alt</code> + <code>Insert</code> : <code>override</code>;</p></li></ul><h2 id="Demo1-静态方法的重写"><a href="#Demo1-静态方法的重写" class="headerlink" title="Demo1(静态方法的重写)"></a>Demo1(静态方法的重写)</h2><ul><li><p>B.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo7;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写都是方法的重写，和属性无关</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B=&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>A.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A=&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo7.A;</span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo7.B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//方法的调用只和左边，定义的数据类型有关</span></span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        a.test();<span class="comment">//A=&gt;test()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//父类的引用指向了子类</span></span><br><span class="line">        B b = <span class="keyword">new</span> A();</span><br><span class="line">        b.test();<span class="comment">//B=&gt;test()</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Demo2-非静态方法的重写"><a href="#Demo2-非静态方法的重写" class="headerlink" title="Demo2(非静态方法的重写)"></a>Demo2(非静态方法的重写)</h2><ul><li><p>B.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo7;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写都是方法的重写，和属性无关</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B=&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>A.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo7;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Override 重写</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//注解：有功能的注释！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A=&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo7.A;</span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo7.B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态的方法和非静态的方法区别很大！</span></span><br><span class="line">        <span class="comment">//静态的方法：方法的调用只和左边，定义的数据类型有关</span></span><br><span class="line">        <span class="comment">//非静态：重写 //必须是public类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//方法的调用只和左边，定义的数据类型有关</span></span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        a.test();<span class="comment">//A=&gt;test()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//父类的引用指向了子类</span></span><br><span class="line">        B b = <span class="keyword">new</span> A();<span class="comment">//子类重写了父类的方法</span></span><br><span class="line">        b.test();<span class="comment">//A=&gt;test()</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><ul><li><p>同一方法可以根据发送对象的不同而采取多种不同的行为方式</p></li><li><p>多态注意事项：</p><ol><li><p>多态是方法的多态，属性没有多态</p></li><li><p>父类和子类，有联系 <del>类型转换异常！<code>ClassCastException! </code></del> </p></li><li><p>存在条件：</p><p>​    继承关系</p><p>​    方法需要重写</p><p>​    父类引用指向子类对象！</p><p><code>Father f1 = new Son();</code> </p></li><li><p>以下三种方法无法被重写：</p><ul><li><p>static 方法，属于类，它不属于实例；</p></li><li><p>final 常量；</p></li><li><p>private 方法，私有方法；</p></li></ul></li></ol></li><li><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;son&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo8.Person;</span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo8.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//一个对象的实际类型是确定的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以指向的引用类型就不确定了：父类的引用指向子类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Student能调用的方法都是自己的或者继承父类的</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//Person父类型，可以指向子类，但是不能调用子类独有的方法</span></span><br><span class="line">        Person s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//Object类是所有类的祖宗类</span></span><br><span class="line">        Object s3 = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象能执行哪些方法，主要看对象左边的类型，和右边关系不大</span></span><br><span class="line">        s2.run();<span class="comment">//son//子类重写了父类方法，执行子类方法</span></span><br><span class="line">        s1.run();<span class="comment">//son</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="instanceof和类型转换"><a href="#instanceof和类型转换" class="headerlink" title="instanceof和类型转换"></a>instanceof和类型转换</h1><ul><li><p><code>instanceof</code>判断两个类之间是否存在父子关系 (类型转换)引用类型，判断一个对象是什么类型~</p></li><li><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;go&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Teacher.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><ul><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo8.Person;</span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo8.Student;</span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo8.Teacher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Object &gt; String</span></span><br><span class="line">        <span class="comment">//Object &gt; Person &gt; Teacher</span></span><br><span class="line">        <span class="comment">//Object &gt; Person &gt; Student</span></span><br><span class="line">        Object object = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(X instanceof Y);//能不能编译通过看是否有父子关系</span></span><br><span class="line"></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Teacher);<span class="comment">//false</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> String);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Teacher);<span class="comment">//false</span></span><br><span class="line">        <span class="comment">//System.out.println(person instanceof String);//编译报错！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo8.Person;</span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo8.Student;</span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo8.Teacher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//类型之间的转化：父 子</span></span><br><span class="line">        <span class="comment">//高         低</span></span><br><span class="line">        Person obj = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//Student将这个对象转换为Student类型，我们就可以使用Student类型的方法了！</span></span><br><span class="line">        ((Student)obj).go();<span class="comment">//强转</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>子类转换父类可能会丢失自己本来的一些方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.go();</span><br><span class="line">        Person person = student;<span class="comment">//自动转换</span></span><br></pre></td></tr></table></figure></li></ul><ol><li>父类引用指向子类的对象；</li><li>把子类转换为父类，向上转型；</li><li>把父类转换为子类，向下转型；强制转换</li><li>方便方法的调用，减少重复代码！简洁</li></ol><p>🤔抽象：封装，继承，多态</p><h1 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h1><ul><li><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo9;</span><br><span class="line"></span><br><span class="line"><span class="comment">//static</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> age;<span class="comment">//静态的变量 多线程！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;<span class="comment">//非静态的变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Student s1 = new Student();</span></span><br><span class="line"><span class="comment">//        System.out.println(Student.age);</span></span><br><span class="line"><span class="comment">//        System.out.println(s1.age);</span></span><br><span class="line"><span class="comment">//        System.out.println(s1.score);</span></span><br><span class="line">        <span class="keyword">new</span> Student().run();</span><br><span class="line">        Student.go();</span><br><span class="line">        go();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><ul><li><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//输出顺序：</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2：赋初值~</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1：只执行一次~</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person1 = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        Person person2 = <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果如下：</span></span><br><span class="line">    静态代码块</span><br><span class="line">    匿名代码块</span><br><span class="line">    构造方法</span><br><span class="line">    ===============</span><br><span class="line">    匿名代码块</span><br><span class="line">    构造方法</span><br></pre></td></tr></table></figure></li></ul><h2 id="静态导入包"><a href="#静态导入包" class="headerlink" title="静态导入包"></a>静态导入包</h2><ul><li><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo9;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态导入包~</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(random());</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><ul><li><p>不能new抽象类，只能靠子类去实现它：约束！</p></li><li><p>抽象类中可以写普通的方法~</p></li><li><p>抽象方法必须在抽象类中~</p></li><li><p>抽象的抽象：约束~</p></li><li><p>存在意义：提高开发效率！</p></li><li><p>Action.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo10;</span><br><span class="line"></span><br><span class="line"><span class="comment">//abstract 抽象类：类 extends:单继承~    （接口可多继承）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//约束~有人帮我们实现</span></span><br><span class="line">    <span class="comment">//abstract，抽象方法，只有方法名字，没有方法的实现！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">dosomething</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>A.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo10;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类的所有方法，继承了它的子类都必须要实现它的方法~除非子类也是抽象类，就有子子类来重写它的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Action</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dosomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><ul><li><p>普通类：只有具体实现</p></li><li><p>抽象类：具体实现和规范（抽象方法）都有！</p></li><li><p>接口：只有规范！自己无法写方法~专业的约束！约束和实现分离：面向接口编程</p></li><li><p><code>接口的本质是契约</code>，就像我们人间的法律一样。制定好后大家都遵守。</p></li><li><p>OO的精髓，是对对象的抽象，最能体现这一点的就是接口。</p></li></ul><div class="tip success"><p>声明类的关键字是class，声明接口的关键字是interface</p><p></p></div><ul><li><p>UserService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo11;</span><br><span class="line"></span><br><span class="line"><span class="comment">//interface 定义的关键字,接口都需要有实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//常量~ public static final</span></span><br><span class="line">    <span class="keyword">int</span> AGE = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接口中的所有定义的方法其实都是抽象的 public abstract</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TimeService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UserServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo11;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类：extends~</span></span><br><span class="line"><span class="comment">//类 可以实现接口 implements 接口</span></span><br><span class="line"><span class="comment">//实现了接口的类，就需要重写接口中的方法~</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多继承~ 利用接口实现多继承~</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span>,<span class="title">TimeService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>作用：</p><ol><li>约束</li><li>定义一些方法，让不同的人实现~</li><li>public abstract</li><li>public static final</li><li>接口不能被实例化<del>，接口中没有构造方法</del></li><li>implements可以实现多个接口</li><li>必须要重写接口中的方法~</li></ol></li></ul><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><ul><li><p>内部类就是在一个类的内部再定义一个类。</p><p>比如：A类中定义一个B类，那么B类相对A类来说就称为内部类，而A类相对B类来说就是外部类了。</p></li><li><p>分类：</p><ul><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li></ul></li><li><p>Outer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是外部类的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;<span class="comment">//加static即为静态内部类，那么getID方法将无法使用，因为static时间片更早</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是内部类的方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得外部类的私有属性~</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getID</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cool.OOPS.demo12.Outer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        <span class="comment">//通过这个外部类来实例化内部类~</span></span><br><span class="line">        Outer.Inner inner = outer.<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">        inner.in();</span><br><span class="line">        inner.getID();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.OOPS.demo12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是外部类的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是内部类的方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得外部类的私有属性~</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getID</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组</title>
      <link href="article/e3345db4.html"/>
      <url>article/e3345db4.html</url>
      
        <content type="html"><![CDATA[<h1 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h1><ul><li>数组是相同类型数据的有序集合。</li></ul><h1 id="数组的声明创建"><a href="#数组的声明创建" class="headerlink" title="数组的声明创建"></a>数组的声明创建</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个数组</span></span><br><span class="line"><span class="keyword">int</span>[] nums;<span class="comment">//1.声明一个数组</span></span><br><span class="line"><span class="keyword">int</span> nums2[];</span><br><span class="line"><span class="comment">//两种方法都可以声明一个整型数组，但建议使用第一个</span></span><br><span class="line">nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];<span class="comment">//2.创建一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以这样写</span></span><br><span class="line"><span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];<span class="comment">//声明并创建一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.给数组元素赋值</span></span><br><span class="line">nums[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">nums[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">nums[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">nums[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">nums[<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line">nums[<span class="number">5</span>] = <span class="number">6</span>;</span><br><span class="line">nums[<span class="number">6</span>] = <span class="number">7</span>;</span><br><span class="line">nums[<span class="number">7</span>] = <span class="number">8</span>;</span><br><span class="line">nums[<span class="number">8</span>] = <span class="number">9</span>;</span><br><span class="line">nums[<span class="number">9</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//int类型数组未赋值的元素默认值是0</span></span><br></pre></td></tr></table></figure><ul><li>获取数组长度：arrays.length。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算所有元素的和</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">    sum = sum + nums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h1><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java9.jpg"></p><h1 id="三种初始化"><a href="#三种初始化" class="headerlink" title="三种初始化"></a>三种初始化</h1><ol><li><p>静态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,&#125;;<span class="comment">//一旦定义不可改变</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>动态初始化(包含默认初始化)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">nums[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">nums[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">nums[<span class="number">2</span>] = <span class="number">3</span>;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>数组的默认初始化</li></ol><h1 id="数组的四个基本特点"><a href="#数组的四个基本特点" class="headerlink" title="数组的四个基本特点"></a>数组的四个基本特点</h1><ol><li><p>长度确定。数组一旦被创建，它的大小就不可以改变。</p></li><li><p>元素必须是相同类型，不允许出现混合类型。</p></li><li><p>数组中的元素可以是任意数据类型，包括基本类型和引用类型。</p></li><li><p>数组本身就是对象，可以无限套娃。<code>数组对象本身是在堆中</code>。</p></li></ol><h1 id="数组边界"><a href="#数组边界" class="headerlink" title="数组边界"></a>数组边界</h1><ul><li>下标的合法区间：<code>[0,length-1]</code>，如果越界就会报错。</li></ul><h1 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arrays = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">//计算所有元素的和</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">        sum += arrays[i];</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;sum=&quot;</span>+sum);<span class="comment">//sum=15</span></span><br><span class="line">    <span class="comment">//查找最大元素</span></span><br><span class="line">    <span class="keyword">int</span> max =arrays[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arrays[i]&gt;max)&#123;</span><br><span class="line">            max = arrays[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;max=&quot;</span>+max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="For-Each循环"><a href="#For-Each循环" class="headerlink" title="For-Each循环"></a>For-Each循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> array: arrays) &#123;</span><br><span class="line">    System.out.println(array);</span><br><span class="line">&#125;<span class="comment">//遍历每一个元素</span></span><br><span class="line"><span class="comment">//缺点：没有下标，不方便对某个元素操作</span></span><br></pre></td></tr></table></figure><h2 id="数组作为方法入参"><a href="#数组作为方法入参" class="headerlink" title="数组作为方法入参"></a>数组作为方法入参</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个方法，打印数组元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arrays)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">        System.out.print(arrays[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组作返回值"><a href="#数组作返回值" class="headerlink" title="数组作返回值"></a>数组作返回值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个方法，反转数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] reverse(<span class="keyword">int</span>[] arrays)&#123;</span><br><span class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[arrays.length];</span><br><span class="line">    <span class="comment">//反转的操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>,j = result.length-<span class="number">1</span>; i &lt; arrays.length; i++,j--) &#123;</span><br><span class="line">        result[j] = arrays[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arrays = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        printArray(arrays);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">int</span>[] reverse = reverse(arrays);</span><br><span class="line">        printArray(reverse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个方法，打印数组元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arrays)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            System.out.print(arrays[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个方法，反转数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] reverse(<span class="keyword">int</span>[] arrays)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[arrays.length];</span><br><span class="line">        <span class="comment">//反转的操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>,j = result.length-<span class="number">1</span>; i &lt; arrays.length; i++,j--) &#123;</span><br><span class="line">            result[j] = arrays[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h1><ul><li><p>一般我们这样定义一个数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] array = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">4</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;; </span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>int a[][] = new int[2][5];</code> </p><p>以上二维数组a可以看成一个两行五列数组。</p></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] array = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">4</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line">    <span class="comment">//打印二维数组的每一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">            System.out.println(array[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h1><ul><li><code>import java.util.Arrays;</code> </li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">6485</span>,<span class="number">4564</span>,<span class="number">789</span>,<span class="number">26</span>&#125;;</span><br><span class="line">        <span class="comment">//打印数组元素Array.toString</span></span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        Arrays.sort(a);<span class="comment">//数组进行排序</span></span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[1, 5, 7, 6485, 4564, 789, 26]</span></span><br><span class="line"><span class="comment">//[1, 5, 7, 26, 789, 4564, 6485]</span></span><br></pre></td></tr></table></figure><ul><li><p>具有以下常用功能：</p><ul><li><p>给数组赋值：通过fill方法。</p></li><li><p>对数组排序：通过sort方法，按升序。</p></li><li><p>比较数组：通过equals方法比较数组中元素值是否相等。</p></li><li><p>查找数组元素：通过binarySearch方法能对排序好的数组进行二分查找法操作。</p></li></ul></li></ul><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><ol><li><p>比较数组中，两个相邻的元素，如果第一个数比第二个数大，我们就交换他们的位置。</p></li><li><p>每一次比较，都会产出一个最大，或者最小的数字。</p></li><li><p>下一轮则可以少一次排序。</p></li><li><p>依次循环，直到结束。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">45</span>,<span class="number">1574</span>,<span class="number">18574</span>,<span class="number">45</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">78</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] sort = sort(a);<span class="comment">//调用完我们自己写的排序算法后，返回一个排序后的数组</span></span><br><span class="line">        System.out.println(Arrays.toString(sort));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array)&#123;</span><br><span class="line">        <span class="comment">//临时变量</span></span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//外层循环，判断我们要走多少次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//内层循环，比价判断两个数，如果第一个数比第二个数大，则交换位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j+<span class="number">1</span>]&lt;array[j])&#123;</span><br><span class="line">                    temp = array[j];</span><br><span class="line">                    array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                    array[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="时间复杂度优化"><a href="#时间复杂度优化" class="headerlink" title="时间复杂度优化"></a>时间复杂度优化</h2><ul><li>通过定义一个布尔值，在外层循环下，默认为<code>false</code>，在内层循环内，将布尔值重改为<code>true</code>，然后每当内层循环结束后判断布尔值是否为<code>false</code>，如果为<code>false</code>，表明排序已完成，直接跳出外层循环。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">45</span>,<span class="number">1574</span>,<span class="number">18574</span>,<span class="number">45</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">78</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] sort = sort(a);<span class="comment">//调用完我们自己写的排序算法后，返回一个排序后的数组</span></span><br><span class="line">        System.out.println(Arrays.toString(sort));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array)&#123;</span><br><span class="line">        <span class="comment">//临时变量</span></span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//外层循环，判断我们要走多少次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//内层循环，比价判断两个数，如果第一个数比第二个数大，则交换位置</span></span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j+<span class="number">1</span>]&lt;array[j])&#123;</span><br><span class="line">                    temp = array[j];</span><br><span class="line">                    array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                    array[j+<span class="number">1</span>] = temp;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag==<span class="keyword">false</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h1><ul><li><p>二维数组中如果很多值都是0或者同一数值时，意味着记录了很多没有意义的数据。采用稀疏数组是不错的选择。</p></li><li><p>稀疏数组的处理方式是：</p><ul><li><p>记录数组一共有几行几列，有多少个不同值。</p></li><li><p>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模。</p></li></ul></li></ul><h2 id="原始数组"><a href="#原始数组" class="headerlink" title="原始数组"></a>原始数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个二维数组 11*11   0：没有棋子   1：黑棋   2：白棋</span></span><br><span class="line">        <span class="keyword">int</span> [][] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;输出原始的数组：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="稀疏数组-1"><a href="#稀疏数组-1" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个二维数组 11*11   0：没有棋子   1：黑棋   2：白棋</span></span><br><span class="line">        <span class="keyword">int</span> [][] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;输出原始的数组：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//转化为稀疏数组保存</span></span><br><span class="line">        <span class="comment">//获取有效值的个数</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;有效值个数为：&quot;</span>+sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个稀疏数组的数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] array2 = <span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历二维数组，将非零的值存放在稀疏数组中</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array1.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array1[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    array2[count][<span class="number">0</span>] = i;</span><br><span class="line">                    array2[count][<span class="number">1</span>] = j;</span><br><span class="line">                    array2[count][<span class="number">2</span>] = array1[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出稀疏数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;稀疏数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">            System.out.println(array2[i][<span class="number">0</span>]+<span class="string">&quot;\t&quot;</span></span><br><span class="line">                    +array2[i][<span class="number">1</span>]+<span class="string">&quot;\t&quot;</span></span><br><span class="line">                    +array2[i][<span class="number">2</span>]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;======================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;还原&quot;</span>);</span><br><span class="line">        <span class="comment">//读取稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] array3 = <span class="keyword">new</span> <span class="keyword">int</span>[array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">        <span class="comment">//给其中的元素还原值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">            array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印</span></span><br><span class="line">        System.out.println(<span class="string">&quot;输出还原的数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array3) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>输出结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java10.jpg"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java方法</title>
      <link href="article/7a37a823.html"/>
      <url>article/7a37a823.html</url>
      
        <content type="html"><![CDATA[<h1 id="何谓方法"><a href="#何谓方法" class="headerlink" title="何谓方法"></a>何谓方法</h1><ul><li><p><code>System.out.println()</code>   //<code>类</code>.<code>对象</code>.<code>方法</code><br>//调用系统类中的标准输出对象<code>out</code>中的方法<code>println()</code></p></li><li><p>方法是语句的集合，他们在一起执行一个功能</p><ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或对象中</li><li>方法在程序中被创建，在其它地方被引用</li></ul></li><li><p>原子性：一个方法只能完成一个功能，这样利于后期扩展</p></li></ul><h1 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = add(<span class="number">1</span>,<span class="number">2</span>);   <span class="comment">//调用方法</span></span><br><span class="line">        System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//public表示外部类可以访问(修饰符)</span></span><br><span class="line"><span class="comment">//static转化为类变量就可以被main方法调用(修饰符)</span></span><br><span class="line"><span class="comment">//有返回值加void，并要有return；无返回值不加</span></span><br></pre></td></tr></table></figure><ul><li><p>方法类似其它语言的函数</p></li><li><p><code>return 0;</code>可用来终止某个方法</p></li><li><p>Java是值传递</p></li></ul><h1 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h1><ul><li>重载就是在一个类中，有相同的函数名称，但形参不同的函数</li></ul><h1 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//args.length 数组长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;args[&quot;</span> + i + <span class="string">&quot;]:&quot;</span> + args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在命令行中编译，传参，输出</li></ul><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java07.jpg" width="75%"><h1 id="可变参数-不定向参数"><a href="#可变参数-不定向参数" class="headerlink" title="可变参数(不定向参数)"></a>可变参数(不定向参数)</h1><ul><li><p>在方法声明中，在指定参数类型后加一个省略号(…)</p></li><li><p>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            Demo03 demo03 = <span class="keyword">new</span> Demo03();</span><br><span class="line">            demo03.test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span>... i)</span></span>&#123;</span><br><span class="line">        System.out.println(i[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">2</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">3</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">4</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">5</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出结果为</li></ul><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java8.jpg" width="50%"><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><ul><li>递归就是A方法调用A方法，就是自己调用自己</li><li>递归结构包括两个部分：<ul><li>递归头：什么时候不调用自身方法。如果没有头，将陷入死循环</li><li>递归体：什么时候需要调用自身方法</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用递归的方法计算4的阶乘</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(f(<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n ==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n*f(n-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果为 24</span></span><br></pre></td></tr></table></figure><ul><li>递归方便了程序员，难为了电脑。因为Java采用栈内存，会不断将调用函数压入栈。如果深度足够大，会造成崩溃。</li><li><code>能不用递归就不用递归</code></li><li>小计算可以用递归</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java流程控制</title>
      <link href="article/41201b24.html"/>
      <url>article/41201b24.html</url>
      
        <content type="html"><![CDATA[<h1 id="用户交互Scanner"><a href="#用户交互Scanner" class="headerlink" title="用户交互Scanner"></a>用户交互Scanner</h1><h2 id="next-方法"><a href="#next-方法" class="headerlink" title="next()方法"></a>next()方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个扫描器对象，用于接收键盘数据</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用next方式接受：&quot;</span>);</span><br><span class="line">        <span class="comment">//判断用户有没有输入字符串</span></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext())&#123;   <span class="comment">//if判断非必要</span></span><br><span class="line">            <span class="comment">//使用next方式接收</span></span><br><span class="line">            String str = scanner.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输出的内容为：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//凡是属于IO流的类如果不关闭会一直占用资源，要养成良好习惯，用完就关掉</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行效果如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java04.jpg"></p><ul><li>因为使用的是<code>next方法</code>，所以只能接收一个字符串 </li></ul><h2 id="nextLine-方法"><a href="#nextLine-方法" class="headerlink" title="nextLine()方法"></a>nextLine()方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//接收键盘数据</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用nextLine方式接受：&quot;</span>);</span><br><span class="line">        <span class="comment">//判断是否还有输入</span></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextLine())&#123;   <span class="comment">//if判断非必要</span></span><br><span class="line">            String str = scanner.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输出的内容为：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//凡是属于IO流的类如果不关闭会一直占用资源，要养成良好习惯，用完就关掉</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行效果如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java05.jpg"></p><h2 id="next-与nextLine-区别"><a href="#next-与nextLine-区别" class="headerlink" title="next()与nextLine()区别"></a>next()与nextLine()区别</h2><ul><li><p>next()</p><ol><li>一定要读取到有效字符后才可以结束输入</li><li>对输入有效字符之前遇到的空白，next()方法会自动将其去掉</li><li>只有输入有效字符后才能将其后面输入的空白作为分隔符或结束符</li><li><code>next()不能得到带有空格的字符串</code> </li></ol></li><li><p>nextLine()</p><ol><li>以Enter(回车)为结束符，也就是说，nextLine()方法返回的是输入回车之前的所有字符</li><li>可以获得空白</li></ol></li></ul><h2 id="Scanner进阶使用"><a href="#Scanner进阶使用" class="headerlink" title="Scanner进阶使用"></a>Scanner进阶使用</h2><h3 id="Example1"><a href="#Example1" class="headerlink" title="Example1:"></a>Example1:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//从键盘接收数据</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入整数：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextInt())&#123;   <span class="comment">//判断如果输入了整数</span></span><br><span class="line">            i = scanner.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;整数数据：&quot;</span> + i);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入的不是整数数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入小数：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextFloat())&#123;   <span class="comment">//判断如果输入了小数</span></span><br><span class="line">            f = scanner.nextFloat();</span><br><span class="line">            System.out.println(<span class="string">&quot;小数数据：&quot;</span> + f);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入的不是小数数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Example2"><a href="#Example2" class="headerlink" title="Example2:"></a>Example2:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*输入多个数字，求其总和与平均数</span></span><br><span class="line"><span class="comment">        每输入一个数字用回车确认</span></span><br><span class="line"><span class="comment">        通过输入非数字来结束输入并输出执行结果*/</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//和</span></span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//计算输入了多少个数字</span></span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入数据：&quot;</span>);</span><br><span class="line">        <span class="comment">//通过循环判断是否还有输入，并在里面对每一次进行求和和统计</span></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextDouble())&#123;</span><br><span class="line">            <span class="keyword">double</span> x = scanner.nextDouble();</span><br><span class="line">            <span class="comment">//统计数字个数</span></span><br><span class="line">            m = m + <span class="number">1</span>;   <span class="comment">//m++</span></span><br><span class="line">            <span class="comment">//求和</span></span><br><span class="line">            sum = sum + x;</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入了第&quot;</span> + m + <span class="string">&quot;个数据，然后当前结果是sum=&quot;</span>+sum);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(m + <span class="string">&quot;个数的和为&quot;</span> + sum);</span><br><span class="line">        System.out.println(m + <span class="string">&quot;个数的平均值是&quot;</span> + (sum / m));</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>运行效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java06.jpg"></p></li></ul><h1 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h1><ul><li>从上到下依次执行代码</li></ul><h1 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h1><h2 id="if单选择结构"><a href="#if单选择结构" class="headerlink" title="if单选择结构"></a>if单选择结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入内容：&quot;</span>);</span><br><span class="line">    String s = scanner.nextLine();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//equals:判断字符串是否相等</span></span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">&quot;hello&quot;</span>)) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;END&quot;</span>);</span><br><span class="line">    scanner.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>程序中，若输入<code>hello</code>，则先输出<code>hello</code>,再输出<code>END</code>，若输入其它内容，则直接输出<code>END</code>。</li></ul><h2 id="if选择结构"><a href="#if选择结构" class="headerlink" title="if选择结构"></a>if选择结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入成绩：&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> score = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (score&gt;<span class="number">60</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    scanner.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if多选择结构"><a href="#if多选择结构" class="headerlink" title="if多选择结构"></a>if多选择结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式1的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式2的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式3的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//如果以上布尔表达式都不成立执行代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一个条件一定为if，最后一个条件一定为else，中间条件一定为else if</span></span><br></pre></td></tr></table></figure><h2 id="嵌套的if结构"><a href="#嵌套的if结构" class="headerlink" title="嵌套的if结构"></a>嵌套的if结构</h2><ul><li>即if选择结构中嵌套if选择结构。</li></ul><h2 id="switch多选择结构"><a href="#switch多选择结构" class="headerlink" title="switch多选择结构"></a>switch多选择结构</h2><ul><li>多选择结构还有一个实现方式就是<code>switch case</code>语句。</li><li><code>switch case</code>语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。</li><li>switch语句中的变量类型可以是：<ul><li><code>byte</code>，<code>short</code>，int或者<code>char</code>。</li><li><code>从 JavaSE7 开始，switch支持字符串String类型了。</code></li><li>同时case标签必须为字符串常量或字面量。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String name = <span class="string">&quot;秦疆&quot;</span>;</span><br><span class="line"><span class="comment">//JDK7新特性，表达式结果可以是字符串！！！</span></span><br><span class="line">    <span class="keyword">switch</span> (name)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;秦疆&quot;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;秦疆的课真不错！&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;狂神&quot;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;狂神的课真不错！&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;弄啥嘞！&quot;</span>);</span><br><span class="line">        <span class="comment">//switch匹配一个具体的值</span></span><br><span class="line">        <span class="comment">//不加break则从case成立处开始向下依次执行所有代码，输出该处下的所有case代码</span></span><br><span class="line">        <span class="comment">//加break即case穿透，只输出case成立处代码则跳出选择结构</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字符的本质还是数字</li><li>反编译：java — class(字节码文件) — 反编译</li></ul><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//输出100</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h2><ul><li>与while循环不同的是：<ul><li>对于while语句而言，如果不满足条件，则不能进入循环。do…while循环至少会执行一次。</li><li>while先判断后执行。do…while先执行后判断。</li></ul></li></ul><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><ul><li>for循环语句是支持迭代的一种通用结构，<code>是最有效，最灵活的循环结构</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;   <span class="comment">//初始化;条件判断;迭代</span></span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>IDEA快捷键：<code>100.for</code>快速创建一个0到100的for循环。</p></li><li><p>死循环for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] numbers = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;   <span class="comment">//定义一个数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        System.out.println(numbers[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x:numbers)&#123;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上述代码两个for循环输出结果相同，第2个for循环为增强for循环。是将数组numbers中每个元素分别赋值给x，然后输出x，用来简化偷懒。</li></ul><h2 id="break-continue"><a href="#break-continue" class="headerlink" title="break/continue"></a>break/continue</h2><ul><li>break强行跳出循环(循环不会继续进行)。</li><li>continue跳过本次循环(循环还会继续进行)。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="article/f7ede91d.html"/>
      <url>article/f7ede91d.html</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>JDK : Java开发者工具。</li><li>JRE : Java运行环境。(JDK中包含JRE)</li><li>JVM :  Java虚拟机。</li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java01.jpg"></p><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><ul><li><p>long类型要在数字后面加个L</p><p>例如：<code>long num = 30L;</code></p></li><li><p>float类型要在数字后面加个F</p><p>例如：<code>flaot num = 50.1F;</code></p></li><li><p>字符</p><div class="note info flat"><p><code>char</code>只能输单个字符</p></div><p>例如：<code>char name = &#39;国&#39;;</code> <code>char name = &#39;A&#39;;</code></p></li><li><p>字符串</p><div class="note info flat"><p><code>String</code>不是关键字，是类</p></div><p>例如：<code>String name = &quot;蔡徐坤&quot;;</code></p></li></ul><h2 id="浮点数拓展"><a href="#浮点数拓展" class="headerlink" title="浮点数拓展"></a>浮点数拓展</h2><ul><li><p>浮点数<code>有限</code>，<code>离散</code>，<code>舍入误差</code>，<code>大约</code>，<code>接近但不等于</code></p><div class="note warning flat"><p>最好完全避免使用浮点数进行比较</p></div></li><li><p>常用BigDecimal（数学工具类）进行比较</p><p>例如：银行业务表示。</p></li></ul><h2 id="字符拓展"><a href="#字符拓展" class="headerlink" title="字符拓展"></a>字符拓展</h2><ul><li><p>所有的字符本质还是数字</p><p>使用int强制转换可以使字符转换为对应Unicode编码表原数值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c1 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">System.out.println((<span class="keyword">int</span>)c1);<span class="comment">//打印结果为97(十进制)</span></span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">&#x27;\u0061&#x27;</span>;<span class="comment">//61为十六进制数</span></span><br><span class="line">System.out.println(c2);<span class="comment">//打印结果为a</span></span><br></pre></td></tr></table></figure></li><li><p>转义字符</p><ul><li><code>\t</code> 制表符 (相当于Tab)</li><li><code>\n</code> 换行</li><li>……</li></ul></li></ul><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">低-------------------------------------&gt;高(容量)</span><br><span class="line">byte,short,char-&gt;int-&gt;long-&gt;float-&gt;double</span><br></pre></td></tr></table></figure><ol><li><p>强制类型转换(由高转向低)</p><p><code>(类型)变量名</code></p></li><li><p>自动类型转换(由低转向高)</p></li></ol><div class="note warning flat"><p>注意点：</p><ol><li>不能对布尔值进行转换</li><li>不能把对象类型转换为不相干的类型</li><li>在把高容量转换到低容量时，强制转换</li><li>转换的时候可能存在内存溢出，或者精度问题</li></ol></div><h1 id="变量，常量，作用域"><a href="#变量，常量，作用域" class="headerlink" title="变量，常量，作用域"></a>变量，常量，作用域</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise</span> </span>&#123;     <span class="comment">//这是一个类</span></span><br><span class="line">    <span class="comment">//属性：变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//类变量 static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> salary = <span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例变量：从属于对象；</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  <span class="comment">//这是一个main方法</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>; <span class="comment">//局部变量；必须声明和初始化值</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;  <span class="comment">//其它方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise</span> </span>&#123;</span><br><span class="line">    <span class="comment">//final定义一个常量，是修饰符，不存在先后顺序；即可以与static调换位置</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>IDEA快捷键<code>Ctrl+D</code>，快速复制当前行到下一行。</li></ul><h2 id="空字符串的妙用"><a href="#空字符串的妙用" class="headerlink" title="空字符串的妙用"></a>空字符串的妙用</h2><ul><li><p>字符串在前面，会对后面的量进行拼接</p></li><li><p>字符串在后面，前面的量依旧会进行运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串连接符 + , String</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+a+b);   <span class="comment">//输出结果为1020</span></span><br><span class="line">System.out.println(a+b+<span class="string">&quot;&quot;</span>);   <span class="comment">//输出结果为30</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h1><h2 id="Java语言支持如下运算符："><a href="#Java语言支持如下运算符：" class="headerlink" title="Java语言支持如下运算符："></a>Java语言支持如下运算符：</h2><ul><li>算数运算符：+，-，*，/，%，++，–</li><li>赋值运算符：=</li><li>关系运算符：&gt;，&lt;，&gt;=，&lt;=，==，!=instanceof</li><li>逻辑运算符：&amp;&amp;，||,!</li><li>位运算符：&amp;，|，^，~，&gt;&gt;，&lt;&lt;，&gt;&gt;&gt;  (了解！！！)</li><li>条件运算符：? :</li><li>扩展赋值运算符：+=，-=，*=，/=</li></ul><h1 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h1><ul><li><p>包的本质：文件夹</p></li><li><p>一般利用公司<code>域名倒置</code>作为<code>包名</code></p></li><li><p>包语句的语法格式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pkg1[.pkg2[.pkg3..]];</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.operator</span><br></pre></td></tr></table></figure></li><li><p>导入包语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> package1[.package2...].(classname|*);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cool.ply.base.*   <span class="comment">//导入这个包下所有的类</span></span><br></pre></td></tr></table></figure></li><li><p>定义包：<code>package</code>，导入包：<code>import</code> </p></li><li><p><code>import</code>必须写在<code>package</code>下面，不然会报错</p></li></ul><h1 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h1><ul><li><p>JDK帮助文档：<a href="https://docs.oracle.com/javase/8/docs/api/">https://docs.oracle.com/javase/8/docs/api/</a></p></li><li><p>javadoc命令是用来生成自己API文档的</p></li><li><p>参数信息</p><ul><li><code>@author</code> 作者名</li><li><code>@version</code> 版本号</li><li><code>@since</code> 指明需要最早使用的jdk版本</li><li><code>@param</code> 参数名</li><li><code>@return</code> 返回值情况</li><li><code>@throws</code> 异常抛出情况</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cool.ply.base;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Coder.Xie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Coder.Xie</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用命令行生产JavaDoc文档"><a href="#使用命令行生产JavaDoc文档" class="headerlink" title="使用命令行生产JavaDoc文档"></a>使用命令行生产JavaDoc文档</h2><ol><li><p>找到写好的Doc.java文件(我演示的文件名为：Demo01.java)</p></li><li><p>在文件路径前加cmd，即使用命令行打开此路径</p><p>在命令行中输入：<code>javadoc -encoding UTF-8 -charset UTF-8 Demo01.java</code> </p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java02.jpg" width="75%"></li><li><p>在java文件路径下会生成很多html文件，找到index.html，运行出来即可得到JavaDoc文档</p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/java03.jpg" width="75%"></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML表单_02</title>
      <link href="article/28806e63.html"/>
      <url>article/28806e63.html</url>
      
        <content type="html"><![CDATA[<h1 id="多行文本域"><a href="#多行文本域" class="headerlink" title="多行文本域"></a>多行文本域</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        备注信息：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;remark&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form>        备注信息：<textarea name="remark" cols="30" rows="10"></textarea></form></div><div class="tip success"><p>    拖动右下角可以随意改变文本域大小，如果要取消这一特性，要使用CSS清除这一特性    textarea{    resize:none;    }    限制字符输入长度则需要使用JS脚本等方法</p></div><h1 id="readonly和disabled属性"><a href="#readonly和disabled属性" class="headerlink" title="readonly和disabled属性"></a>readonly和disabled属性</h1><h2 id="readonly属性"><a href="#readonly属性" class="headerlink" title="readonly属性"></a>readonly属性</h2><ul><li>在某些情况下，input表单控件并不用于用户输入数据，而是将已有的数据显示给用户查看，而且显示的这些数据，用户不能删除，也不能修改，即这些数据是只读的。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;input1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;中国&quot;</span> <span class="attr">readonly</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;input2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;中国&quot;</span> <span class="attr">readonly</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form>        <input type="text" name="input1" value="中国" readonly="true"><br><br>        <input type="text" name="input2" value="中国" readonly></form></div><h2 id="disabled属性"><a href="#disabled属性" class="headerlink" title="disabled属性"></a>disabled属性</h2><ul><li>在某些情况下，某些表单元素不可用，比如在用户提交表单到后台，后台正在处理表单的过程中，不允许用户再次提交表单，这时应将提交按钮设置为不可用。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;input3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;input4&quot;</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span> <span class="attr">disabled</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮2&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form>        <input type="text" name="input3" value="china" disabled="true"><br><br>        <input type="text" name="input4" value="china" disabled><br><br>        <input type="submit" value="提交按钮1">        <input type="submit" value="提交按钮2" disabled></form></div><h1 id="表单新增属性"><a href="#表单新增属性" class="headerlink" title="表单新增属性"></a>表单新增属性</h1><h2 id="form属性"><a href="#form属性" class="headerlink" title="form属性"></a>form属性</h2><ul><li>使用form属性可以定义表单元素和某个表单之间的隶属关系。form属性需赋予id值。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form1&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="formaction属性"><a href="#formaction属性" class="headerlink" title="formaction属性"></a>formaction属性</h2><ul><li>当一个表单中包含两个或两个以上的提交按钮，可使用formaction属性来指定处理逻辑。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">formaction</span>=<span class="string">&quot;处理逻辑&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="autofocus属性"><a href="#autofocus属性" class="headerlink" title="autofocus属性"></a>autofocus属性</h2><ul><li><p>HTML5表单的<code>&lt;textarea&gt;</code>和所有<code>&lt;input&gt;</code>元素都有autofocus属性，其值是一个布尔值，默认值是false。一旦为某个元素设置该属性，页面加载完成后该元素将自动获得焦点。</p><div class="tip warning"><p>需要注意的是：</p><p>一个页面中最多只能有一个表单元素设置该属性，否则该功能将失效</p></div></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">autofocus</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="pattern属性"><a href="#pattern属性" class="headerlink" title="pattern属性"></a>pattern属性</h2><ul><li>pattern属性是input元素的验证属性，该属性的值是一个正则表达式，通过这个表达式可以验证输入内容的有效性。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^[a-zA-Z\w&#123;2,7&#125;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;必须以字母开头，包含字符或数字，长度是3~8&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;\d&#123;6&#125;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;必须输入6个数字&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;取消&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><div class="gallery ">    <p>    <div class="fancybox">        <img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/html1.jpg">    </div><br>    <div class="fancybox">        <img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/html2.jpg">    </div>    </p></div></div><h2 id="placeholder属性"><a href="#placeholder属性" class="headerlink" title="placeholder属性"></a>placeholder属性</h2><ul><li>placeholder属性主要用于在文本框或文本域中提供输入提示信息，以增加用户界面的友好性。当表单元素获得焦点时，显示在文本框或文本域中的提示信息将自动消失。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">        姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入您的真实姓名&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        电话：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入您的手机号码&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        备注：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入内容不能超过150个字符&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form action="" method="POST">        姓名：<input type="text" placeholder="请输入您的真实姓名" name="username"><br>        电话：<input type="text" placeholder="请输入您的手机号码" name="tel"><br>        备注：<textarea placeholder="输入内容不能超过150个字符" cols="30" rows="10"></textarea><br>        <input type="submit" value="提交"></form></div><h2 id="required属性"><a href="#required属性" class="headerlink" title="required属性"></a>required属性</h2><ul><li>判断元素的值是否为空或字符长度是否等于0。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">required</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="元素轮廓-outline"><a href="#元素轮廓-outline" class="headerlink" title="元素轮廓(outline)"></a>元素轮廓(outline)</h1><ul><li><p>修改轮廓的默认样式需要使用CSS的outline属性</p><table><thead><tr><th align="center">属性</th><th align="center">属性值</th></tr></thead><tbody><tr><td align="center">outline</td><td align="center">在一个声明中同时设置各个属性，<br />各属性之间空一格：outline-color outline-style outline-width</td></tr><tr><td align="center">outline-color</td><td align="center">取值与border-color类似</td></tr><tr><td align="center">outline-style</td><td align="center">取值与border-style类似</td></tr><tr><td align="center">outline-width</td><td align="center">取值与border-width类似</td></tr></tbody></table></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">            <span class="attribute">outline</span>: red dotted thin;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="表单元素的默认样式及重置"><a href="#表单元素的默认样式及重置" class="headerlink" title="表单元素的默认样式及重置"></a>表单元素的默认样式及重置</h1><ul><li><table><thead><tr><th align="center">元素</th><th align="center">样式重置</th></tr></thead><tbody><tr><td align="center">form</td><td align="center">form{<br />margin:0;<br />}</td></tr><tr><td align="center">input表单控件</td><td align="center">input[type=text]{<br />border:none或其他值;<br />padding:0或某个px;<br />outline:none;<br />}<br />input[type=radio]{<br />outline:none;<br />margin:0或某个px;<br />}<br />input[type=checkbox]{<br />outline:none;<br />margin:0或某个px;<br />}</td></tr><tr><td align="center">textarea</td><td align="center">textarea{<br />margin:0;<br />padding:某个px;<br />outline:none;<br />resize:none;<br />overflow:auto;<br />}</td></tr><tr><td align="center">select</td><td align="center">select{<br />padding:0;<br />}</td></tr><tr><td align="center">option</td><td align="center">option{<br />left-padding:某个px;<br />right-padding:某个px;<br />}</td></tr></tbody></table></li></ul><h1 id="表单美化"><a href="#表单美化" class="headerlink" title="表单美化"></a>表单美化</h1><ul><li>与普通元素一样通过CSS控制美化，此处略过N个字。</li></ul><h1 id="表单的元素类型"><a href="#表单的元素类型" class="headerlink" title="表单的元素类型"></a>表单的元素类型</h1><ul><li><p>form是块级元素</p><p>display属性值为block</p></li><li><p>input,select,textarea和button元素是行内块元素</p><p>display属性值为inline-block</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 表单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML表单_01</title>
      <link href="article/b1893fd9.html"/>
      <url>article/b1893fd9.html</url>
      
        <content type="html"><![CDATA[<h1 id="input表单控件"><a href="#input表单控件" class="headerlink" title="input表单控件"></a>input表单控件</h1><h2 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;form1&quot;</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">        姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        电话：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">size</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        邮编：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PC&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;6&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        主页：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;http://&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form name="form1" action="register.jsp" method="POST">        姓名：<input type="text" name="username"><br>        电话：<input type="text" name="tel" size="20"><br>        邮编：<input type="text" name="PC" maxlength="6"><br>        主页：<input type="text" name="url" value="http://"></form></div><h2 id="密码框"><a href="#密码框" class="headerlink" title="密码框"></a>密码框</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user_name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;psw&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form action="register.jsp" method="POST">            姓名：<input type="text" name="user_name"><br>            密码：<input type="password" name="psw"></form></div><h2 id="隐藏域"><a href="#隐藏域" class="headerlink" title="隐藏域"></a>隐藏域</h2><ul><li>隐藏域不会被浏览者看到，它是给开发人员用于在不同页面传递域中所设定的值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;域名称&quot;</span> <span class="attr">value</span>=<span class="string">&quot;域值&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文件域"><a href="#文件域" class="headerlink" title="文件域"></a>文件域</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;域名称&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form action="register.jsp" method="POST">            <input type="file" name="域名称"></form></div><h2 id="单选框与复选框"><a href="#单选框与复选框" class="headerlink" title="单选框与复选框"></a>单选框与复选框</h2><ol><li>单选框</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;域名称&quot;</span> <span class="attr">value</span>=<span class="string">&quot;域值&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;域名称&quot;</span> <span class="attr">value</span>=<span class="string">&quot;域值&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form action="register.jsp" method="POST">              <input type="radio" name="域名称" value="域值" checked="checked"></form><form action="register.jsp" method="POST">            <input type="radio" name="域名称" value="域值"></form></div><ol start="2"><li>多选框</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            性别:</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>女</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            爱好：</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;music&quot;</span> <span class="attr">name</span>=<span class="string">&quot;m1&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>音乐</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;trip&quot;</span> <span class="attr">name</span>=<span class="string">&quot;m2&quot;</span>&gt;</span>旅游</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;reading&quot;</span> <span class="attr">name</span>=<span class="string">&quot;m3&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>阅读</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form action="register.jsp" method="POST">            性别:            <input type="radio" value="female" name="gender">女            <input type="radio" value="male" name="gender">男<br>            爱好：            <input type="checkbox" value="music" name="m1" checked="checked">音乐            <input type="checkbox" value="trip" name="m2">旅游            <input type="checkbox" value="reading" name="m3" checked="checked">阅读</form></div><h2 id="提交按钮"><a href="#提交按钮" class="headerlink" title="提交按钮"></a>提交按钮</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            请输入用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;按钮名称&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form action="register.jsp" method="POST">            请输入用户名：<input type="text" name="username">            <input type="submit" name="按钮名称" value="登录"></form></div><h2 id="普通按钮"><a href="#普通按钮" class="headerlink" title="普通按钮"></a>普通按钮</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮显示文本&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;javascript函数名&quot;</span> <span class="attr">name</span>=<span class="string">&quot;按钮名称&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form action="register.jsp" method="POST">            <input type="button" value="按钮显示文本" onclick="javascript函数名" name="按钮名称"></form></div><h2 id="重置按钮"><a href="#重置按钮" class="headerlink" title="重置按钮"></a>重置按钮</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            请输入用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;取消&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form action="register.jsp" method="POST">            请输入用户名：<input type="text" name="username">            <input type="reset" value="取消"></form></div><h2 id="图像按钮"><a href="#图像按钮" class="headerlink" title="图像按钮"></a>图像按钮</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">name</span>=<span class="string">&quot;名称&quot;</span> <span class="attr">src</span>=<span class="string">&quot;图像路径&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;替换信息&quot;</span> <span class="attr">width</span>=<span class="string">&quot;宽度值&quot;</span> <span class="attr">height</span>=<span class="string">&quot;高度值&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="button元素按钮"><a href="#button元素按钮" class="headerlink" title="button元素按钮"></a>button元素按钮</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h1><ul><li>单击这个标签（文本）可以使光标聚焦在input元素上</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>女</span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>男</span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form action="">            <input type="radio" value="female" name="gender">女            <label>            <input type="radio" value="male" name="gender">男            </label></form></div><h1 id="选择列表"><a href="#选择列表" class="headerlink" title="选择列表"></a>选择列表</h1><h2 id="多项选择列表"><a href="#多项选择列表" class="headerlink" title="多项选择列表"></a>多项选择列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        请选择您最喜欢吃的水果：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">size</span>=<span class="string">&quot;5&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;banana&quot;</span> <span class="attr">selected</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;apple&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;pear&quot;</span> <span class="attr">selected</span> = <span class="string">&quot;selected&quot;</span>&gt;</span>梨子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;grape&quot;</span> <span class="attr">selected</span> = <span class="string">&quot;selected&quot;</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;watermelon&quot;</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;peach&quot;</span>&gt;</span>桃子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form>        请选择您最喜欢吃的水果：<select name="fruit" size="5" multiple>            <option value="banana" selected>香蕉</option>            <option value="apple">苹果</option>            <option value="pear" selected = "selected">梨子</option>            <option value="grape" selected = "selected">葡萄</option>            <option value="watermelon">西瓜</option>            <option value="peach">桃子</option>        </select></form></div><h2 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        请选择您的学历：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;degree&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>博士后<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">selected</span> = <span class="string">&quot;selected&quot;</span>&gt;</span>博士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>硕士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>学士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>其它<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>效果如下：</p><form>        请选择您的学历：<select name="degree">            <option value="1">博士后</option>            <option value="2" selected = "selected">博士</option>            <option value="3">硕士</option>            <option value="4">学士</option>            <option value="0">其它</option>        </select></form></div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 表单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript对象与函数_01</title>
      <link href="article/9b9ababb.html"/>
      <url>article/9b9ababb.html</url>
      
        <content type="html"><![CDATA[<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><ul><li>对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性（与C语言中结构体类似）</li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol><li><p>内建对象</p><ul><li>由ES标准中定义的对象，在任何的ES的实现中都可以使用</li><li>比如：Math,String,Number,Boolean,Function,Object……</li></ul></li><li><p>宿主对象</p><ul><li>由JS的运行环境提供的对象，目前来讲主要是浏览器提供的对象</li><li>比如BOM,DOM</li></ul></li><li><p>自定义对象</p><ul><li>由开发人员自己创建的对象</li></ul></li></ol><h2 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><h3 id="向对象中添加-修改属性"><a href="#向对象中添加-修改属性" class="headerlink" title="向对象中添加/修改属性"></a>向对象中添加/修改属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">obj.name = <span class="string">&quot;孙悟空“;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">obj.gender = ”男“;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">obj.age = 18;</span></span><br></pre></td></tr></table></figure><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.gender);</span><br></pre></td></tr></table></figure><h3 id="特殊属性名的存取"><a href="#特殊属性名的存取" class="headerlink" title="特殊属性名的存取"></a>特殊属性名的存取</h3><p><strong>这种写法更加灵活</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj[<span class="string">&quot;123&quot;</span>] = <span class="number">789</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">&quot;123&quot;</span>]);</span><br></pre></td></tr></table></figure><h3 id="in运算符"><a href="#in运算符" class="headerlink" title="in运算符"></a>in运算符</h3><ul><li><p>检查obj中是否含有test2属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;test2&quot;</span> <span class="keyword">in</span> obj);</span><br></pre></td></tr></table></figure></li></ul><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><ul><li><p>JS中变量都是保存在栈内存中的</p><ul><li>基本数据类型的值直接在栈内存中存储</li></ul></li><li><p>对象是保存在堆内存中的，每创建一个新的对象，就会在堆内存中开辟出一个新的空间</p><p>而变量保存的是对象的内存地址（对象的引用）</p></li></ul><h2 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;  等同于 <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><ul><li><p>更方便地直接添加属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>:<span class="string">&quot;猪八戒&quot;</span>,</span><br><span class="line">age:<span class="number">28</span>,</span><br><span class="line">gender:<span class="string">&quot;男&quot;</span>(此处最好不要写<span class="string">&quot;,&quot;</span>，浏览器会默认删除<span class="string">&quot;,&quot;</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更方便地无限套娃</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>:<span class="string">&quot;猪八戒&quot;</span>,</span><br><span class="line">age:<span class="number">28</span>,</span><br><span class="line">gender:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">test:&#123;<span class="attr">name</span>:<span class="string">&quot;沙和尚&quot;</span>&#125;(注意是<span class="string">&quot;:&quot;</span>,而不是<span class="string">&quot;=&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li><code>函数也是一个对象</code></li><li>函数可以封装一些功能（代码），在需要时可以执行这些功能（代码）</li></ul><h2 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h2><ul><li><p>创建一个函数对象(不常用)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;console.log(&#x27;Hello 这是我的第一个函数&#x27;);&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>函数的调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun();</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用函数声明来创建一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;这是我的第二个函数~~~&quot;</span>);</span><br><span class="line">alert(<span class="string">&quot;哈哈哈&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;~~~(&gt;_&lt;)~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun2();</span><br></pre></td></tr></table></figure></li><li><p>使用函数表达式来创建一个对象</p><p>本质：将匿名函数赋值给变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;我是匿名函数中封装的代码&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun3();</span><br></pre></td></tr></table></figure></li><li><p>函数的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a+b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><code>如果实参的数量少于形参的数量，则没有对应实参的形参将是undefined</code></p></li><li><p>返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> d = a + b + c;</span><br><span class="line"><span class="keyword">return</span> d;(rueturn后的语句不会执行)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = sum(<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>);</span><br></pre></td></tr></table></figure></li><li><p>实参可以是任意数据类型，包括对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;我是&quot;</span>+o.name+<span class="string">&quot;，今年我&quot;</span>+o.age+<span class="string">&quot;岁了，&quot;</span>+<span class="string">&quot;我是一个&quot;</span>+o.gender+<span class="string">&quot;人，&quot;</span>+<span class="string">&quot;我住在&quot;</span>+o.address)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">  age:<span class="number">18</span>,</span><br><span class="line">  gender:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">  address:<span class="string">&quot;花果山&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  sayHello(obj);</span><br><span class="line">  <span class="comment">//sayHello(obj);也可以这样写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">      a(obj);</span><br><span class="line">  &#125;</span><br><span class="line">  fun(sayHello);</span><br><span class="line">  <span class="comment">//输出结果都是：</span></span><br><span class="line">  <span class="comment">//我是孙悟空，今年我18岁了，我是一个男人,我住在花果山</span></span><br></pre></td></tr></table></figure></li><li><p>实参可以是一个对象，也可以是一个函数，对象能干的事，实参都能干</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">&quot;hello&quot;</span>)&#125;);</span><br><span class="line"><span class="comment">//输出结果为：</span></span><br><span class="line"><span class="comment">//a = function()&#123;alert(&quot;hello&quot;)&#125;</span></span><br></pre></td></tr></table></figure><ul><li>Demo1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = a + b + c;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">fun(sum);</span><br></pre></td></tr></table></figure><ul><li><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201204194957573.png" alt="image-20201204194957573"></p></li><li><p>Demo2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = a + b + c;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">fun(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure></li><li><p>输出结果为：</p><center>a = 6</center></li><li><p>对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum()</span><br><span class="line">    - 调用函数</span><br><span class="line">    - 相当于使用函数的返回值</span><br><span class="line">sum</span><br><span class="line">    - 函数对象</span><br><span class="line">    - 相当于直接使用函数</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="返回值的类型"><a href="#返回值的类型" class="headerlink" title="返回值的类型"></a>返回值的类型</h2><ul><li><p>Demo1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;函数要执行了~~~&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">5</span> ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">//使用break可以退出当前循环 </span></span><br><span class="line">            <span class="comment">//continue用于跳出当次循环</span></span><br><span class="line">            <span class="comment">//使用return可以结束整个函数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">    alert(<span class="string">&quot;函数执行完了~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure></li><li><p>返回值可以是任意的数据类型</p><p>也可以是一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//    return 10;</span></span><br><span class="line">    <span class="comment">//    return &quot;hello&quot;;</span></span><br><span class="line">    <span class="comment">//    return true;</span></span><br><span class="line">    <span class="comment">//    return null;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = fun2();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;沙和尚&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = fun3();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;b = &quot;</span>+b.name);<span class="comment">//b = 沙和尚</span></span><br></pre></td></tr></table></figure><p>也可以是一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun5</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;我是fun5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将fun5函数对象作为返回值返回</span></span><br><span class="line">    <span class="keyword">return</span> fun5;</span><br><span class="line">&#125;</span><br><span class="line">a = fun4;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://blog.ply.cool/image/image-20201204214934814.png" alt="image-20201204214934814"></p><p>上述程序若将<code>a=fun4;</code>改为<code>a=fun4();</code>，<code>console.log(a);</code>改为<code>a();</code>或者<code>fun4()();</code> 都将弹出警告框！</p></li></ul><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><ul><li><p>Demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数对象()</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *立即执行函数</span></span><br><span class="line"><span class="comment"> *函数定义完，立即被调用，这种函数叫做立即执行函数</span></span><br><span class="line"><span class="comment"> *立即执行函数往往只会执行一次</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;b = &quot;</span>+b);</span><br><span class="line">&#125;)(<span class="number">123</span>,<span class="number">456</span>);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><center>a = 123</center><center>b = 456</center></li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li><p>函数也可以成为对象的属性</p></li><li><p>如果一个函数作为一个对象的属性保存，那么我们就称这个函数是这个对象的方法。调用这个函数就说是调用对象的方法</p></li><li><p>但是它只是名称上的区别，与函数并无差异</p></li><li><p>一个形象的比喻：函数是公交车🚌，方法是私家车🚗</p></li><li><p>Demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="comment">//向对象中添加属性</span></span><br><span class="line">obj.name = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line">obj.age = <span class="number">18</span>;</span><br><span class="line"><span class="comment">//对象的属性值可以是任何数据类型，也可以是个函数</span></span><br><span class="line">obj.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    name:<span class="string">&quot;猪八戒&quot;</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    sayName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(obj2.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.sayName();</span><br><span class="line">obj2.sayName();</span><br></pre></td></tr></table></figure><p>输出结果为：</p><center>孙悟空</center><center>猪八戒</center></li></ul><h2 id="枚举对象中的属性"><a href="#枚举对象中的属性" class="headerlink" title="枚举对象中的属性"></a>枚举对象中的属性</h2><ul><li><p>使用<code>for ... in</code> 语句</p></li><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> 变量 <span class="keyword">in</span> 对象) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对象中有几个属性，循环体就会执行几次</p><p>每次执行时会将对象中的一个属性的名字赋值给变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =&#123;</span><br><span class="line">    name:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    gender: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">    address:<span class="string">&quot;花果山&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://blog.ply.cool/image/image-20201204224529660.png" alt="image-20201204224529660"></p></li><li><p>Demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =&#123;</span><br><span class="line">    name:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    gender: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">    address:<span class="string">&quot;花果山&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;属性名：&quot;</span>+n);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;属性值：&quot;</span>+obj[n]);<span class="comment">//.n和[&quot;n&quot;]只能用于取静态值，取变量要用[n]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://blog.ply.cool/image/image-20201204225116678.png" alt="image-20201204225116678"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基本数据类型</title>
      <link href="article/a9ba4134.html"/>
      <url>article/a9ba4134.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h1><p>一个完整的JavaScript实现应该由下列三个不同的部分组成：</p><ol><li><p>核心（ECMAScript）</p></li><li><p>文档对象模型（DOM） </p></li><li><p>浏览器对象模型（BOM）</p><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/js1.jpg"></p></li></ol><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="区分大小写"><a href="#区分大小写" class="headerlink" title="区分大小写"></a>区分大小写</h3><p>变量名 test 和变量名 Test 分别表示两个不同的变量，而函数名不能使用 typeof，因为它是一个关键字，但 typeOf 则完全可以是一个有效的函数名。</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>所谓标识符，就是指变量、函数、属性的名字，或者函数的参数。</p><p>标识符可以是按照下列格式规则组合起来的一或多个字符：</p><ul><li><p>第一个字符必须是一个字母、下划线（_）或一个美元符号（$）</p></li><li><p>其他字符可以是字母、下划线、美元符号或数字</p></li><li><p>不能把关键字、保留字、<strong>true</strong>、<strong>false</strong> 和 <strong>null</strong> 用作标识符</p></li></ul><h2 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h2><p>以下就是 ECMAScript的全部关键字(具有特定用途)：</p><p>break do instanceof typeof case else new var catch finally return void continue for switch while debugger* function this with default if throw delete in try </p><p>第 5 版在非严格模式全部保留字(不能用作标识符)：</p><p>class enum extends super const export import </p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>定义变量时要使用 var 操作符（注意 var 是一个关键字），后跟变量名（即一个标识符），如：var message; <code>如果在函数中使用 var 定义一个变量，那么这个变量在函数退出后就会被销毁。</code>可以使用一条语句定义多个变量，把每个变量（初始化或不初始化均可）用<code>逗号</code>分隔开即可。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>基本数据类型：Undefined、Null、Boolean、Number和 String。</p><p>还有 1种复杂数据类型——Object(本质上是由一组无序的名值对组成的)。</p><h3 id="typeof操作符"><a href="#typeof操作符" class="headerlink" title="typeof操作符"></a>typeof操作符</h3><p>对一个值使用 typeof (<code>检测给定变量的数据类型</code>)操作符可能返回下列某个字符串：</p><ul><li>undefined”——如果这个值未定义；</li><li>“boolean”——如果这个值是布尔值；</li><li>“string”——如果这个值是字符串；</li><li>“number”——如果这个值是数值；</li><li>“object”——如果这个值是对象或 null；</li><li>“function”——如果这个值是函数。</li></ul><h3 id="Undefined类型"><a href="#Undefined类型" class="headerlink" title="Undefined类型"></a><strong>Undefined</strong>类型</h3><p>在使用 var 声明变量但未对其加以初始化时，这个变量的值就是 undefined。</p><h3 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a><strong>Null</strong>类型</h3><p>从逻辑角度来看，null 值表示一个空对象指针，而这也正是使用 typeof 操作符检测 null 值时会返回”object”的原因。如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为 null 而不是其他值。</p><h3 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a><strong>Boolean</strong>类型</h3><p>该类型只有两个字面值：true 和 false。这两个值与数字值不是一回事，因此 true 不一定等于 1，而 false 也不一定等于 0。</p><div class="tip warning"><p>需要注意的是，Boolean 类型的字面值 true 和 false 是区分大小写的。也就是说，True 和 False（以及其他的混合大小写形式）都不是 Boolean 值，只是标识符</p><p></p></div><p>虽然 Boolean 类型的字面值只有两个，但 ECMAScript 中所有类型的值都有与这两个 Boolean 值等价的值。要将一个值转换为其对应的 Boolean 值，可以调用转型函数 Boolean()。</p><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/js2.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/js3.jpg"></p><h3 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a><strong>Number</strong>类型</h3><ol><li><p>浮点数值(该数值中必须包含一个小数点，并且小数点后面必须至少有一位数字)</p></li><li><p>数值范围(要想确定一个数值是不是有穷的，可以使用 isFinite()函数。这个函数在参数位于最小与最大数值之间时会返回 true)</p></li><li><p>NaN(即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况（这样就不会抛出错误了）)</p></li><li><p>数值转换(有 3 个函数可以把非数值转换为数值：Number()、parseInt()和 parseFloat()。第一个函数，即转型函数 Number()可以用于任何数据类型，而另两个函数则专门用于把字符串转换成数值)</p></li></ol><h1 id="toString与String的区别"><a href="#toString与String的区别" class="headerlink" title="toString与String的区别"></a>toString与String的区别</h1><ol><li>toString()方法；数值、字符串、对象、布尔；都有toString方法；这个方法唯一能做的就是返回相应的字符串；其中null和undefined没有toString()方法。</li><li>String()属于强制转换， null转换的结果为null；undefined转换的结果为undefined；其余的如果有toString()方法，即调用该方法，返回相应的结果；</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王者荣耀战区修改教程</title>
      <link href="article/22585c50.html"/>
      <url>article/22585c50.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p>王者荣耀作为一款近年来十分火爆的游戏，深受各年龄段人群的喜爱。很多玩家更是期望能够提高自己主玩英雄的荣耀战力排名，但由于当地某个英雄的荣耀战力榜的分值已经被刷的很高，想要跻身前列，得到一个银牌牌或者金牌牌实在困难，不少玩家便有了更换荣耀战区的想法。本篇文章就王者荣耀更换战区这个问题提供了安卓区和苹果区两套不同的解决方案，亲测有效，希望对小伙伴们有所帮助。</p></li><li><p>本次教程分安卓区和苹果区两个平台，请根据要修改的平台阅读相关内容。</p></li><li><p>首先，这里先声明一个错误的修改方案：</p><div class="tip warning"><p>利用分身多开类软件修改，将会造成账号限时或永久封停的后果</p><p></p></div></li></ul><div class="note success flat"><p>特别强调：王者荣耀战区一周只能修改一次，且只能在<code>每周一</code>修改</p></div><h1 id="安卓区修改教程"><a href="#安卓区修改教程" class="headerlink" title="安卓区修改教程"></a>安卓区修改教程</h1><div class="note primary no-icon flat"><p>所需工具：PC端QQ游戏平台</p></div><ol><li><p>电脑下载QQ游戏平台，下载完成后，在QQ游戏平台中搜索下载王者荣耀手游（同时会自动下载手游模拟器）</p></li><li><p>下载完成后，进入王者荣耀，直接点击右侧<code>虚拟定位</code>，然后用鼠标找到想要更换的战区地点（这里我以内蒙古呼和浩特为例）</p><div class="gallery ">    <p>    <div class="fancybox">        <img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/王1.png">    </div><br>    <div class="fancybox">        <img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/王2.png">    </div>    </p></div></li><li><p>虚拟位置更改完成后直接进入游戏，打开你的荣耀战区，更新一下新的战区</p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/王3.png" width="75%"></li></ol><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/王4.png" width="70%"><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/王5.png" width="70%"><p>若进入游戏后无法点开荣耀战区，则需要点击此处：</p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/王7.png" width="70%"><p>如果问题依然不能解决，重新登陆即可。</p><h1 id="苹果区修改教程"><a href="#苹果区修改教程" class="headerlink" title="苹果区修改教程"></a>苹果区修改教程</h1><div class="note primary no-icon flat"><p>所需工具：PC端爱思助手，数据线连接苹果手机</p></div><ol><li><p>打开爱思助手–工具箱–打开虚拟定位</p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/王9.png" width="70%"></li><li><p>找到自己需要定位的战区，点击修改虚拟定位</p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/王10.png" width="70%"><p>此时手机已经暂时处于虚拟定位的状态，只需进入游戏重新定位即可定位想要定位的战区。</p><p>但是，由于手机系统的虚拟定位时间有限，所以请修改完虚拟定位后尽快进游戏更新战区，以免过期无效。</p></li></ol><p><strong><em>以上所提到的方法可保证玩家在一周内锁定在自己想要的战区，如果发现战区又锁定到了实地位置，重新操作即可！！！</em></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> 我收藏的tags/note样式（个人使用）</title>
      <link href="article/7945418e.html"/>
      <url>article/7945418e.html</url>
      
        <content type="html"><![CDATA[<h1 id="个人博客常用tags-note模板"><a href="#个人博客常用tags-note模板" class="headerlink" title="个人博客常用tags/note模板"></a>个人博客常用tags/note模板</h1><p><font size=4><strong>本篇文章涉及内容来自<a href="https://www.antmoe.com/" target="_blank" rel="noopener external nofollow noreferrer"> 小康博客</a>，<a href="https://demo.jerryc.me/" target="_blank" rel="noopener external nofollow noreferrer"> Butterfly主题安装文档（作者：jerry）</a></strong></font></p><div class="tip warning"><p>以下主要是我对以上两位大佬所写内容的摘要，主要服务于我今后的博文创作</p><p></p></div><p><strong>若您希望可以使用这些效果，请详细阅读以上两位大佬的博客，因为涉及到主题（或版本）不同，若没有增加或引入正确的CSS/JS文件，直接写入下列代码将不能获得对应效果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D; &quot;checkbox red checked&quot; &gt; &lt;input type&#x3D; &quot;radio&quot; checked&#x3D;&quot;checked&quot;&gt;实心红色圆圈&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;checkbox minus blue checked&quot;&gt;&lt;input type&#x3D;&quot;checkbox&quot; checked&#x3D;&quot;checked&quot;&gt;方块蓝色减号&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;checkbox green checked&quot;&gt;&lt;input type&#x3D;&quot;checkbox&quot; checked&#x3D;&quot;checked&quot;&gt;方块绿色对号&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;checkbox green checked&quot;&gt;&lt;input type&#x3D;&quot;checkbox&quot; &gt;方块空心对号（绿色方框）&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;checkbox times red checked&quot;&gt;&lt;input type&#x3D;&quot;checkbox&quot; checked&#x3D;&quot;checked&quot;&gt;方块红色错误&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><div class= "checkbox red checked" > <input type= "radio" checked="checked">实心红色圆圈</div><div class="checkbox minus blue checked"><input type="checkbox" checked="checked">方块蓝色减号</div><div class="checkbox green checked"><input type="checkbox" checked="checked">方块绿色对号</div><div class="checkbox green checked"><input type="checkbox" >方块空心对号（绿色方框）</div><div class="checkbox times red checked"><input type="checkbox" checked="checked">方块红色错误</div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* 小tag标签语法示例 *&#x2F;</span><br><span class="line">&lt;span class&#x3D;&quot;inline-tag red&quot;&gt;红色小标签&lt;&#x2F;span&gt;</span><br><span class="line">&lt;span class&#x3D;&quot;inline-tag green&quot;&gt;绿色小标签&lt;&#x2F;span&gt;</span><br><span class="line">&lt;span class&#x3D;&quot;inline-tag blue&quot;&gt;蓝色小标签&lt;&#x2F;span&gt;</span><br><span class="line">&lt;span class&#x3D;&quot;inline-tag yellow&quot;&gt;黄色小标签&lt;&#x2F;span&gt;</span><br><span class="line">&lt;span class&#x3D;&quot;inline-tag grey&quot;&gt;灰色小标签&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><p><span class="inline-tag red">红色小标签</span><br><span class="inline-tag green">绿色小标签</span><br><span class="inline-tag blue">蓝色小标签</span><br><span class="inline-tag yellow">黄色小标签</span><br><span class="inline-tag grey">灰色小标签</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;tip error&quot;&gt;&lt;p&gt;错误标签&lt;&#x2F;p&gt;&lt;p&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;tip warning&quot;&gt;&lt;p&gt;警告标签&lt;&#x2F;p&gt;&lt;p&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;tip success&quot;&gt;&lt;p&gt;成功标签&lt;&#x2F;p&gt;&lt;p&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;tip info&quot;&gt;&lt;p&gt;信息标签&lt;&#x2F;p&gt;&lt;p&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><div class="tip error"><p>错误标签</p><p></p></div><div class="tip warning"><p>警告标签</p><p></p></div><div class="tip success"><p>成功标签</p><p></p></div><div class="tip info"><p>信息标签</p><p></p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* note语法示例(边框加粗版)*&#x2F;</span><br><span class="line">&lt;p class&#x3D;&#39;div-border green left right&#39;&gt;绿色&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&#39;div-border red left right&#39;&gt;红色&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&#39;div-border yellow left right&#39;&gt;黄色&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&#39;div-border grey left right&#39;&gt;灰色&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&#39;div-border blue left right&#39;&gt;蓝色&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><p class='div-border green left right'>绿色</p><p class='div-border red left right'>红色</p><p class='div-border yellow left right'>黄色</p><p class='div-border grey left right'>灰色</p><p class='div-border blue left right'>蓝色</p><p><strong>去掉<code>left right</code>可得基本边框版，效果如下：</strong></p><p class='div-border green'>绿色</p><p class='div-border red'>红色</p><p class='div-border yellow'>黄色</p><p class='div-border grey'>灰色</p><p class='div-border blue'>蓝色</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 无icon提示块标签</p></div><p><font size=6><strong>特别声明：</strong></font></p><p><font size=5><strong>本篇文章涉及内容来自<a href="https://www.antmoe.com/" target="_blank" rel="noopener external nofollow noreferrer"> 小康博客</a>，<a href="https://demo.jerryc.me/" target="_blank" rel="noopener external nofollow noreferrer"> Butterfly主题安装文档（作者：jerry）</a></strong></font></p>]]></content>
      
      
      
        <tags>
            
            <tag> 个人工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="article/79666db.html"/>
      <url>article/79666db.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章  绪论"></a>第一章  绪论</h1><p>数据的定义：信息的载体。</p><p>数据元素、数据项：<strong>数据元素</strong>是数据的基本单位，通常作为一个整体进行考虑和处理。一个数据元素可由若干<strong>数据项</strong>组成，数据项是构成数据元素的不可分割的最小单位。</p><p>数据结构的定义：相互之间存在一种或多种特定<strong>关系</strong>的数据元素的集合。</p><p>数据对象：具有<strong>相同性质</strong>的数据元素的集合，是数据的一个子集。</p><h2 id="数据结构的三要素"><a href="#数据结构的三要素" class="headerlink" title="数据结构的三要素"></a>数据结构的三要素</h2><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><ol><li>集合&lt;不讨论&gt;</li><li>线性结构&lt;第二，三章&gt;</li><li>树形结构&lt;第四章&gt;</li><li>图状结构（网状结构）&lt;第五章&gt;</li></ol><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><ol><li>顺序存储</li><li>链式存储</li><li>索引存储</li><li>散列存储&lt;第六章（散列表有讲）&gt;</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/d7.png"></p><h3 id="数据的运算"><a href="#数据的运算" class="headerlink" title="数据的运算"></a>数据的运算</h3><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/d8.png"></p><h2 id="数据类型、抽象数据类型"><a href="#数据类型、抽象数据类型" class="headerlink" title="数据类型、抽象数据类型"></a>数据类型、抽象数据类型</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>定义：一个值的集合和定义在此集合上的一组操作的总称。</p><ol><li><p>原子类型（其值不可再分的数据类型）</p><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/d9.png"></p></li><li><p>结构类型（其值可以再分解为若干成分&lt;分量&gt;的数据类型）</p><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/d10.png"></p></li></ol><h3 id="抽象数据类型（ADT）"><a href="#抽象数据类型（ADT）" class="headerlink" title="抽象数据类型（ADT）"></a>抽象数据类型（ADT）</h3><p>定义：抽象数据组织及与之相关的操作。</p><h2 id="算法的基本概念"><a href="#算法的基本概念" class="headerlink" title="算法的基本概念"></a>算法的基本概念</h2><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/d12.png"></p><p><strong>算法的五大特性</strong></p><ol><li><p><strong>有穷性</strong>：一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成。</p><p>注：<strong>算法</strong>必须是<strong>有穷</strong>的，而<strong>程序</strong>可以是<strong>无穷</strong>的。</p></li><li><p><strong>确定性</strong>：算法中每条指令必须有确切的含义，对于<strong>相同的输入</strong>只能得出<strong>相同的结果</strong>。</p></li><li><p><strong>可行性</strong>：算法中描述的操作都可以通过已经实现的<strong>基本运算执行有限次</strong>来实现。</p></li><li><p><strong>输入</strong>：一个算法<strong>有零个或多个输入</strong>，这些输入取自于某个特定的对象的集合。</p></li><li><p><strong>输出</strong>：一个算法<strong>有一个或多个输出</strong>，这些输出是与输入有着某种特定关系的量。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> VS Code配置C/C++环境</title>
      <link href="article/1802445c.html"/>
      <url>article/1802445c.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​        因本人也是第一次入手VS Code，这里提供的配置方法仅供参考。若您有更好的方法或建议，还请在下方留言评论，我将根据大家的建议修改教程内容。尽量做到对还未入手的萌新提供一定的参考价值。❗❗❗本教程仅适用于Windows系统。</p><h1 id="下载及安装"><a href="#下载及安装" class="headerlink" title="下载及安装"></a>下载及安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ol><li><p>Visual Studio Code官网下载请点击<a href="https://code.visualstudio.com" target="_blank" rel="noopener external nofollow noreferrer">这里</a>。</p></li><li><p>C++工具链（mingw64），可在官网下载，但由于是外国网站，大陆下载会很慢。</p><p><a href="https://pan.baidu.com/s/1_gdaid7yvGTqN2xikoEUmQ" target="_blank" rel="noopener external nofollow noreferrer">这里</a>提供一个快速下载链接，提取码为：ne84。（感谢 bilibili<a href="https://www.bilibili.com/video/BV1sW411v7VZ/?spm_id_from=333.788.videocard.0" target="_blank" rel="noopener external nofollow noreferrer">鹅弹</a>提供下载链接）</p><p>当然，你也可以选择<a href="https://sourceforge.net/projects/mingw-w64/" target="_blank" rel="noopener external nofollow noreferrer">官方下载</a>渠道。</p></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>VS Code安装时注意将以下选项全部勾选：</p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/7.jpg" style="zoom: 67%;" /></li><li><p>mingw64下载完成之后，需要将其解压。（建议将其解压在C盘根目录下，并且保证文件路径无中文或空格）</p></li></ol><h1 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h1><ol><li><p>进入解压好的mingw64文件中，复制文件夹\bin的路径。</p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/8.jpg" style="zoom: 33%;" /></li><li><p>右键点击此电脑–属性–高级系统设置–环境变量–找到系统变量–双击其中的Path–新建–粘贴刚刚复制的\bin文件夹路径即可。</p><div class="note success flat"><p><strong>温馨提示</strong>：环境变量中的数据最好不要随意删除，否则可能导致Windows系统无法正常运行等严重问题。</p></div></li></ol><h1 id="VS-Code运行及插件安装"><a href="#VS-Code运行及插件安装" class="headerlink" title="VS Code运行及插件安装"></a>VS Code运行及插件安装</h1><h2 id="VS-Code运行"><a href="#VS-Code运行" class="headerlink" title="VS Code运行"></a>VS Code运行</h2><p>新建一个文件夹，用来存放C/C++代码，注意该文件夹的路径中不能有中文或者空格。（因为可能导致gdb没有办法正常工作，没有办法Debug）对文件夹右键–通过Code打开。</p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>如图，搜索并安装这两个插件（一个是官方的C++插件，另一个是软件的汉化包）</p><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/9.jpg"></p><h2 id="创建测试文件"><a href="#创建测试文件" class="headerlink" title="创建测试文件"></a>创建测试文件</h2><p>点击左侧任务栏第一个（资源管理器），在刚才建立的用于存放代码的文件夹下新建文件（注意后缀为.cpp）。然后敲入一个简单的程序，这里提供我的测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;conio.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc,char const *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; &quot;Hello VSCode&quot; &lt;&lt; std::endl;</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置VS-Code的文件"><a href="#配置VS-Code的文件" class="headerlink" title="配置VS Code的文件"></a>配置VS Code的文件</h2><p>点击左侧任务栏第四个（运行），点击创建launch.json文件，会在上方弹出选择环境，点击C++(GDB/LLDB)–g++，launch.json文件就会自动配置成功。然后Ctrl+Shift+p打开命令面板，输入并点击Tasks:Configure Tsak(任务：配置任务)–然后点击g++.exe，系统会自动创建一个tasks.json文件，建议在该文件中添加如下项（意为按照C++17的标准，当然后续会更新迭代）：</p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/10.jpg" style="zoom: 50%;" /><p>接下来要做两步<strong>很关键的操作</strong>，在launch.json和tasks.json文件中修改mingw64中文件的路径，操作如图：</p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/13.jpg" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/14.jpg" style="zoom:50%;" /><p><strong>这里分享我的两个.json文件：</strong></p><p><strong>🚩launch.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 使用 IntelliSense 了解相关属性。 </span><br><span class="line">    &#x2F;&#x2F; 悬停以查看现有属性的描述。</span><br><span class="line">    &#x2F;&#x2F; 欲了解更多信息，请访问: https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?linkid&#x3D;830387</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;g++.exe - 生成和调试活动文件&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: true,</span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,</span><br><span class="line">            &quot;miDebuggerPath&quot;: &quot;C:\\mingw64\\x86_64-8.1.0-release-posix-seh-rt_v6-rev0\\mingw64\\bin\\gdb.exe&quot;,</span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;,</span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                    &quot;ignoreFailures&quot;: true</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;g++.exe build active file&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>🚩tasks.json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; See https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkId&#x3D;733558</span><br><span class="line">    &#x2F;&#x2F; for the documentation about the tasks.json format</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;label&quot;: &quot;g++.exe build active file&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;g++&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-g&quot;,</span><br><span class="line">                &quot;$&#123;file&#125;&quot;,</span><br><span class="line">                &quot;-o&quot;,</span><br><span class="line">                &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,</span><br><span class="line">                &quot;-std&#x3D;c++17&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;options&quot;: &#123;</span><br><span class="line">                &quot;cwd&quot;:&quot;C:\\mingw64\\x86_64-8.1.0-release-posix-seh-rt_v6-rev0\\mingw64\\bin&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;problemMatcher&quot;:[</span><br><span class="line">                &quot;$gcc&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;group&quot;: &quot;build&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行刚刚创建的-cpp文件"><a href="#执行刚刚创建的-cpp文件" class="headerlink" title="执行刚刚创建的.cpp文件"></a>执行刚刚创建的.cpp文件</h2><p>回到该文件页面，按下快捷键F5（运行），输出“Hello VSCode”即成功！</p><p>若程序无法正常运行，请尝试将两个.json文件换成我的.json文件，但<strong>注意更改你的路径</strong>。</p><h1 id="我遇到的坑"><a href="#我遇到的坑" class="headerlink" title="我遇到的坑"></a>我遇到的坑</h1><p>这里分享一个我遇到的坑：</p><p>我当时在配置完成之后，按下F5，会弹出两个窗口👀，一个是Windows Powershell,另一个是正常的显示窗口。当时我寻找解决方法，发现<strong>出现这种情况的人并不多</strong>，我花了大量时间，心态都搞崩了💢…好在后来问题解决了。这里提供一个解决思路：因为我经常用Windows的命令提示符，可能导致因为某些原因，命令提示符的相关设置出了问题。我是这样解决的：打开命令提示符，右键点击窗口–属性，将使用旧版控制台选项取消。但是这个操作将导致命令提示符无法正常使用（只有一个黑框，不能输入任何字符），但是这对不使用命令提示符的人来说，无疑是一种解决方法。若您有更好的解决方法，欢迎评论区留言。</p><div class="gallery ">    <p>    <div class="fancybox">        <img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/11.jpg" width="75%">    </div><br>    <div class="fancybox">        <img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/12.jpg" width="75%">    </div>    </p></div><p><strong>创作不易，感谢支持🤞🤞🤞</strong></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++实现QQ消息轰炸</title>
      <link href="article/8a4b34f1.html"/>
      <url>article/8a4b34f1.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-环境"><a href="#C-环境" class="headerlink" title="C++环境"></a>C++环境</h1><p>我们需要一个C++编辑器（已配置C++环境），常用的如Visual Studio系列。我这里演示所用的是更简洁的Visual C++ 6.0。</p><h1 id="编译器中输入轰炸代码"><a href="#编译器中输入轰炸代码" class="headerlink" title="编译器中输入轰炸代码"></a>编译器中输入轰炸代码</h1><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;Windows.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">char name[100];</span><br><span class="line">printf(&quot;输入你想要轰炸的对象名称：&quot;);</span><br><span class="line">scanf(&quot;%s&quot;, &amp;name, 40);</span><br><span class="line">printf(&quot;请输入你要轰炸的次数：&quot;);</span><br><span class="line">scanf(&quot;%d&quot;, &amp;i);</span><br><span class="line">HWND H &#x3D; FindWindow(0, name);</span><br><span class="line">while (i-- &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">SendMessage(H, WM_PASTE, 0, 0);</span><br><span class="line">SendMessage(H, WM_KEYDOWN, VK_RETURN, 0);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/2.jpg"></p><h2 id="需要注意的是"><a href="#需要注意的是" class="headerlink" title="需要注意的是:"></a>需要注意的是:</h2><div class="note warning flat"><p>要打开轰炸对象的QQ对话窗口，且必须是一个独立的窗口，不能合并。将需要轰炸的图片或消息复制下来即可。</p></div><h1 id="友情提醒"><a href="#友情提醒" class="headerlink" title="友情提醒"></a>友情提醒</h1><div class="tip warning"><p>QQ消息轰炸操作需谨慎，易激起对方情绪。若轰炸次数过多可能会被官方作封号若干天处理</p><p></p></div>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
          <category> QQ轰炸 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> 博客开通致辞</title>
      <link href="article/32027959.html"/>
      <url>article/32027959.html</url>
      
        <content type="html"><![CDATA[<p>本博客得以开通，特别感谢哔哩哔哩，CSDN，以及知乎大佬们的指导。同时，特别感谢任同学的亲自指导和示范。</p><p>本人软件工程专业大一在读，此博客主要记录我的学习经历以及生活日常，欢迎各位游客前来浏览。</p><p>同时，对于本博客中的所有文章，若有异议或者疑问，欢迎您的指正或咨询。本人唯一联系QQ：<font color="orange">1532518617</font><img src="https://cdn.jsdelivr.net/gh/Xiexinyue123/image/5d761484a9b49.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 初 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
